// CodecAudio.v

// Generated using ACDS version 15.1 185

`timescale 1 ps / 1 ps
module CodecAudio (
		inout  wire        audio_i2c_o_SDAT,          //           audio_i2c_o.SDAT
		output wire        audio_i2c_o_SCLK,          //                      .SCLK
		input  wire        audio_o_BCLK,              //               audio_o.BCLK
		output wire        audio_o_DACDAT,            //                      .DACDAT
		input  wire        audio_o_DACLRCK,           //                      .DACLRCK
		input  wire        clk_clk,                   //                   clk.clk
		output wire        dacchip_pll_audio_clk_clk, // dacchip_pll_audio_clk.clk
		input  wire [23:0] datafromaccmat_i_export,   //      datafromaccmat_i.export
		output wire [19:0] datatoaccmat_o_export,     //        datatoaccmat_o.export
		output wire        pll_0_locked_export,       //          pll_0_locked.export
		inout  wire        ps2_o_CLK,                 //                 ps2_o.CLK
		inout  wire        ps2_o_DAT,                 //                      .DAT
		input  wire        reset_reset_n,             //                 reset.reset_n
		input  wire        toggleaccmat_i_export      //        toggleaccmat_i.export
	);

	wire         dac_pll_audio_clk_clk;                                                       // dac_pll:audio_clk_clk -> [audio:clk, irq_synchronizer:receiver_clk, mm_interconnect_0:dac_pll_audio_clk_clk, rst_controller_001:clk]
	wire         pll_0_outclk0_clk;                                                           // pll_0:outclk_0 -> [DataFromAccMat:clk, DataToAccMat:clk, ToggleAccMat:clk, audio_and_video_config:clk, cpu:clk, dac_pll:ref_clk_clk, dacchip_pll:ref_clk_clk, irq_mapper:clk, irq_synchronizer:sender_clk, jtag_uart_0:clk, mm_interconnect_0:pll_0_outclk0_clk, onchipmem:clk, ps2:clk, rst_controller:clk, sysid:clock, timer0:clk, timer1:clk]
	wire  [31:0] cpu_data_master_readdata;                                                    // mm_interconnect_0:cpu_data_master_readdata -> cpu:d_readdata
	wire         cpu_data_master_waitrequest;                                                 // mm_interconnect_0:cpu_data_master_waitrequest -> cpu:d_waitrequest
	wire         cpu_data_master_debugaccess;                                                 // cpu:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:cpu_data_master_debugaccess
	wire  [19:0] cpu_data_master_address;                                                     // cpu:d_address -> mm_interconnect_0:cpu_data_master_address
	wire   [3:0] cpu_data_master_byteenable;                                                  // cpu:d_byteenable -> mm_interconnect_0:cpu_data_master_byteenable
	wire         cpu_data_master_read;                                                        // cpu:d_read -> mm_interconnect_0:cpu_data_master_read
	wire         cpu_data_master_write;                                                       // cpu:d_write -> mm_interconnect_0:cpu_data_master_write
	wire  [31:0] cpu_data_master_writedata;                                                   // cpu:d_writedata -> mm_interconnect_0:cpu_data_master_writedata
	wire  [31:0] cpu_instruction_master_readdata;                                             // mm_interconnect_0:cpu_instruction_master_readdata -> cpu:i_readdata
	wire         cpu_instruction_master_waitrequest;                                          // mm_interconnect_0:cpu_instruction_master_waitrequest -> cpu:i_waitrequest
	wire  [19:0] cpu_instruction_master_address;                                              // cpu:i_address -> mm_interconnect_0:cpu_instruction_master_address
	wire         cpu_instruction_master_read;                                                 // cpu:i_read -> mm_interconnect_0:cpu_instruction_master_read
	wire         mm_interconnect_0_audio_avalon_audio_slave_chipselect;                       // mm_interconnect_0:audio_avalon_audio_slave_chipselect -> audio:chipselect
	wire  [31:0] mm_interconnect_0_audio_avalon_audio_slave_readdata;                         // audio:readdata -> mm_interconnect_0:audio_avalon_audio_slave_readdata
	wire   [1:0] mm_interconnect_0_audio_avalon_audio_slave_address;                          // mm_interconnect_0:audio_avalon_audio_slave_address -> audio:address
	wire         mm_interconnect_0_audio_avalon_audio_slave_read;                             // mm_interconnect_0:audio_avalon_audio_slave_read -> audio:read
	wire         mm_interconnect_0_audio_avalon_audio_slave_write;                            // mm_interconnect_0:audio_avalon_audio_slave_write -> audio:write
	wire  [31:0] mm_interconnect_0_audio_avalon_audio_slave_writedata;                        // mm_interconnect_0:audio_avalon_audio_slave_writedata -> audio:writedata
	wire  [31:0] mm_interconnect_0_audio_and_video_config_avalon_av_config_slave_readdata;    // audio_and_video_config:readdata -> mm_interconnect_0:audio_and_video_config_avalon_av_config_slave_readdata
	wire         mm_interconnect_0_audio_and_video_config_avalon_av_config_slave_waitrequest; // audio_and_video_config:waitrequest -> mm_interconnect_0:audio_and_video_config_avalon_av_config_slave_waitrequest
	wire   [1:0] mm_interconnect_0_audio_and_video_config_avalon_av_config_slave_address;     // mm_interconnect_0:audio_and_video_config_avalon_av_config_slave_address -> audio_and_video_config:address
	wire         mm_interconnect_0_audio_and_video_config_avalon_av_config_slave_read;        // mm_interconnect_0:audio_and_video_config_avalon_av_config_slave_read -> audio_and_video_config:read
	wire   [3:0] mm_interconnect_0_audio_and_video_config_avalon_av_config_slave_byteenable;  // mm_interconnect_0:audio_and_video_config_avalon_av_config_slave_byteenable -> audio_and_video_config:byteenable
	wire         mm_interconnect_0_audio_and_video_config_avalon_av_config_slave_write;       // mm_interconnect_0:audio_and_video_config_avalon_av_config_slave_write -> audio_and_video_config:write
	wire  [31:0] mm_interconnect_0_audio_and_video_config_avalon_av_config_slave_writedata;   // mm_interconnect_0:audio_and_video_config_avalon_av_config_slave_writedata -> audio_and_video_config:writedata
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect;                  // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_chipselect -> jtag_uart_0:av_chipselect
	wire  [31:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata;                    // jtag_uart_0:av_readdata -> mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_readdata
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest;                 // jtag_uart_0:av_waitrequest -> mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_waitrequest
	wire   [0:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address;                     // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_address -> jtag_uart_0:av_address
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read;                        // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_read -> jtag_uart_0:av_read_n
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write;                       // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_write -> jtag_uart_0:av_write_n
	wire  [31:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata;                   // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_writedata -> jtag_uart_0:av_writedata
	wire         mm_interconnect_0_ps2_avalon_ps2_slave_chipselect;                           // mm_interconnect_0:ps2_avalon_ps2_slave_chipselect -> ps2:chipselect
	wire  [31:0] mm_interconnect_0_ps2_avalon_ps2_slave_readdata;                             // ps2:readdata -> mm_interconnect_0:ps2_avalon_ps2_slave_readdata
	wire         mm_interconnect_0_ps2_avalon_ps2_slave_waitrequest;                          // ps2:waitrequest -> mm_interconnect_0:ps2_avalon_ps2_slave_waitrequest
	wire   [0:0] mm_interconnect_0_ps2_avalon_ps2_slave_address;                              // mm_interconnect_0:ps2_avalon_ps2_slave_address -> ps2:address
	wire         mm_interconnect_0_ps2_avalon_ps2_slave_read;                                 // mm_interconnect_0:ps2_avalon_ps2_slave_read -> ps2:read
	wire   [3:0] mm_interconnect_0_ps2_avalon_ps2_slave_byteenable;                           // mm_interconnect_0:ps2_avalon_ps2_slave_byteenable -> ps2:byteenable
	wire         mm_interconnect_0_ps2_avalon_ps2_slave_write;                                // mm_interconnect_0:ps2_avalon_ps2_slave_write -> ps2:write
	wire  [31:0] mm_interconnect_0_ps2_avalon_ps2_slave_writedata;                            // mm_interconnect_0:ps2_avalon_ps2_slave_writedata -> ps2:writedata
	wire  [31:0] mm_interconnect_0_sysid_control_slave_readdata;                              // sysid:readdata -> mm_interconnect_0:sysid_control_slave_readdata
	wire   [0:0] mm_interconnect_0_sysid_control_slave_address;                               // mm_interconnect_0:sysid_control_slave_address -> sysid:address
	wire  [31:0] mm_interconnect_0_cpu_debug_mem_slave_readdata;                              // cpu:debug_mem_slave_readdata -> mm_interconnect_0:cpu_debug_mem_slave_readdata
	wire         mm_interconnect_0_cpu_debug_mem_slave_waitrequest;                           // cpu:debug_mem_slave_waitrequest -> mm_interconnect_0:cpu_debug_mem_slave_waitrequest
	wire         mm_interconnect_0_cpu_debug_mem_slave_debugaccess;                           // mm_interconnect_0:cpu_debug_mem_slave_debugaccess -> cpu:debug_mem_slave_debugaccess
	wire   [8:0] mm_interconnect_0_cpu_debug_mem_slave_address;                               // mm_interconnect_0:cpu_debug_mem_slave_address -> cpu:debug_mem_slave_address
	wire         mm_interconnect_0_cpu_debug_mem_slave_read;                                  // mm_interconnect_0:cpu_debug_mem_slave_read -> cpu:debug_mem_slave_read
	wire   [3:0] mm_interconnect_0_cpu_debug_mem_slave_byteenable;                            // mm_interconnect_0:cpu_debug_mem_slave_byteenable -> cpu:debug_mem_slave_byteenable
	wire         mm_interconnect_0_cpu_debug_mem_slave_write;                                 // mm_interconnect_0:cpu_debug_mem_slave_write -> cpu:debug_mem_slave_write
	wire  [31:0] mm_interconnect_0_cpu_debug_mem_slave_writedata;                             // mm_interconnect_0:cpu_debug_mem_slave_writedata -> cpu:debug_mem_slave_writedata
	wire         mm_interconnect_0_onchipmem_s1_chipselect;                                   // mm_interconnect_0:onchipmem_s1_chipselect -> onchipmem:chipselect
	wire  [31:0] mm_interconnect_0_onchipmem_s1_readdata;                                     // onchipmem:readdata -> mm_interconnect_0:onchipmem_s1_readdata
	wire  [15:0] mm_interconnect_0_onchipmem_s1_address;                                      // mm_interconnect_0:onchipmem_s1_address -> onchipmem:address
	wire   [3:0] mm_interconnect_0_onchipmem_s1_byteenable;                                   // mm_interconnect_0:onchipmem_s1_byteenable -> onchipmem:byteenable
	wire         mm_interconnect_0_onchipmem_s1_write;                                        // mm_interconnect_0:onchipmem_s1_write -> onchipmem:write
	wire  [31:0] mm_interconnect_0_onchipmem_s1_writedata;                                    // mm_interconnect_0:onchipmem_s1_writedata -> onchipmem:writedata
	wire         mm_interconnect_0_onchipmem_s1_clken;                                        // mm_interconnect_0:onchipmem_s1_clken -> onchipmem:clken
	wire         mm_interconnect_0_timer0_s1_chipselect;                                      // mm_interconnect_0:timer0_s1_chipselect -> timer0:chipselect
	wire  [15:0] mm_interconnect_0_timer0_s1_readdata;                                        // timer0:readdata -> mm_interconnect_0:timer0_s1_readdata
	wire   [2:0] mm_interconnect_0_timer0_s1_address;                                         // mm_interconnect_0:timer0_s1_address -> timer0:address
	wire         mm_interconnect_0_timer0_s1_write;                                           // mm_interconnect_0:timer0_s1_write -> timer0:write_n
	wire  [15:0] mm_interconnect_0_timer0_s1_writedata;                                       // mm_interconnect_0:timer0_s1_writedata -> timer0:writedata
	wire         mm_interconnect_0_timer1_s1_chipselect;                                      // mm_interconnect_0:timer1_s1_chipselect -> timer1:chipselect
	wire  [15:0] mm_interconnect_0_timer1_s1_readdata;                                        // timer1:readdata -> mm_interconnect_0:timer1_s1_readdata
	wire   [2:0] mm_interconnect_0_timer1_s1_address;                                         // mm_interconnect_0:timer1_s1_address -> timer1:address
	wire         mm_interconnect_0_timer1_s1_write;                                           // mm_interconnect_0:timer1_s1_write -> timer1:write_n
	wire  [15:0] mm_interconnect_0_timer1_s1_writedata;                                       // mm_interconnect_0:timer1_s1_writedata -> timer1:writedata
	wire         mm_interconnect_0_toggleaccmat_s1_chipselect;                                // mm_interconnect_0:ToggleAccMat_s1_chipselect -> ToggleAccMat:chipselect
	wire  [31:0] mm_interconnect_0_toggleaccmat_s1_readdata;                                  // ToggleAccMat:readdata -> mm_interconnect_0:ToggleAccMat_s1_readdata
	wire   [1:0] mm_interconnect_0_toggleaccmat_s1_address;                                   // mm_interconnect_0:ToggleAccMat_s1_address -> ToggleAccMat:address
	wire         mm_interconnect_0_toggleaccmat_s1_write;                                     // mm_interconnect_0:ToggleAccMat_s1_write -> ToggleAccMat:write_n
	wire  [31:0] mm_interconnect_0_toggleaccmat_s1_writedata;                                 // mm_interconnect_0:ToggleAccMat_s1_writedata -> ToggleAccMat:writedata
	wire         mm_interconnect_0_datatoaccmat_s1_chipselect;                                // mm_interconnect_0:DataToAccMat_s1_chipselect -> DataToAccMat:chipselect
	wire  [31:0] mm_interconnect_0_datatoaccmat_s1_readdata;                                  // DataToAccMat:readdata -> mm_interconnect_0:DataToAccMat_s1_readdata
	wire   [1:0] mm_interconnect_0_datatoaccmat_s1_address;                                   // mm_interconnect_0:DataToAccMat_s1_address -> DataToAccMat:address
	wire         mm_interconnect_0_datatoaccmat_s1_write;                                     // mm_interconnect_0:DataToAccMat_s1_write -> DataToAccMat:write_n
	wire  [31:0] mm_interconnect_0_datatoaccmat_s1_writedata;                                 // mm_interconnect_0:DataToAccMat_s1_writedata -> DataToAccMat:writedata
	wire  [31:0] mm_interconnect_0_datafromaccmat_s1_readdata;                                // DataFromAccMat:readdata -> mm_interconnect_0:DataFromAccMat_s1_readdata
	wire   [1:0] mm_interconnect_0_datafromaccmat_s1_address;                                 // mm_interconnect_0:DataFromAccMat_s1_address -> DataFromAccMat:address
	wire         irq_mapper_receiver0_irq;                                                    // ps2:irq -> irq_mapper:receiver0_irq
	wire         irq_mapper_receiver2_irq;                                                    // timer0:irq -> irq_mapper:receiver2_irq
	wire         irq_mapper_receiver3_irq;                                                    // timer1:irq -> irq_mapper:receiver3_irq
	wire         irq_mapper_receiver4_irq;                                                    // jtag_uart_0:av_irq -> irq_mapper:receiver4_irq
	wire  [31:0] cpu_irq_irq;                                                                 // irq_mapper:sender_irq -> cpu:irq
	wire         irq_mapper_receiver1_irq;                                                    // irq_synchronizer:sender_irq -> irq_mapper:receiver1_irq
	wire   [0:0] irq_synchronizer_receiver_irq;                                               // audio:irq -> irq_synchronizer:receiver_irq
	wire         rst_controller_reset_out_reset;                                              // rst_controller:reset_out -> [DataFromAccMat:reset_n, DataToAccMat:reset_n, ToggleAccMat:reset_n, audio_and_video_config:reset, cpu:reset_n, irq_mapper:reset, irq_synchronizer:sender_reset, jtag_uart_0:rst_n, mm_interconnect_0:cpu_reset_reset_bridge_in_reset_reset, onchipmem:reset, ps2:reset, rst_translator:in_reset, sysid:reset_n, timer0:reset_n, timer1:reset_n]
	wire         rst_controller_reset_out_reset_req;                                          // rst_controller:reset_req -> [cpu:reset_req, onchipmem:reset_req, rst_translator:reset_req_in]
	wire         rst_controller_001_reset_out_reset;                                          // rst_controller_001:reset_out -> [audio:reset, irq_synchronizer:receiver_reset, mm_interconnect_0:audio_reset_reset_bridge_in_reset_reset]
	wire         dac_pll_reset_source_reset;                                                  // dac_pll:reset_source_reset -> rst_controller_001:reset_in0

	CodecAudio_DataFromAccMat datafromaccmat (
		.clk      (pll_0_outclk0_clk),                            //                 clk.clk
		.reset_n  (~rst_controller_reset_out_reset),              //               reset.reset_n
		.address  (mm_interconnect_0_datafromaccmat_s1_address),  //                  s1.address
		.readdata (mm_interconnect_0_datafromaccmat_s1_readdata), //                    .readdata
		.in_port  (datafromaccmat_i_export)                       // external_connection.export
	);

	CodecAudio_DataToAccMat datatoaccmat (
		.clk        (pll_0_outclk0_clk),                            //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),              //               reset.reset_n
		.address    (mm_interconnect_0_datatoaccmat_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_datatoaccmat_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_datatoaccmat_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_datatoaccmat_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_datatoaccmat_s1_readdata),   //                    .readdata
		.out_port   (datatoaccmat_o_export)                         // external_connection.export
	);

	CodecAudio_ToggleAccMat toggleaccmat (
		.clk        (pll_0_outclk0_clk),                            //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),              //               reset.reset_n
		.address    (mm_interconnect_0_toggleaccmat_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_toggleaccmat_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_toggleaccmat_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_toggleaccmat_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_toggleaccmat_s1_readdata),   //                    .readdata
		.in_port    (toggleaccmat_i_export)                         // external_connection.export
	);

	CodecAudio_audio audio (
		.clk         (dac_pll_audio_clk_clk),                                 //                clk.clk
		.reset       (rst_controller_001_reset_out_reset),                    //              reset.reset
		.address     (mm_interconnect_0_audio_avalon_audio_slave_address),    // avalon_audio_slave.address
		.chipselect  (mm_interconnect_0_audio_avalon_audio_slave_chipselect), //                   .chipselect
		.read        (mm_interconnect_0_audio_avalon_audio_slave_read),       //                   .read
		.write       (mm_interconnect_0_audio_avalon_audio_slave_write),      //                   .write
		.writedata   (mm_interconnect_0_audio_avalon_audio_slave_writedata),  //                   .writedata
		.readdata    (mm_interconnect_0_audio_avalon_audio_slave_readdata),   //                   .readdata
		.irq         (irq_synchronizer_receiver_irq),                         //          interrupt.irq
		.AUD_BCLK    (audio_o_BCLK),                                          // external_interface.export
		.AUD_DACDAT  (audio_o_DACDAT),                                        //                   .export
		.AUD_DACLRCK (audio_o_DACLRCK)                                        //                   .export
	);

	CodecAudio_audio_and_video_config audio_and_video_config (
		.clk         (pll_0_outclk0_clk),                                                           //                    clk.clk
		.reset       (rst_controller_reset_out_reset),                                              //                  reset.reset
		.address     (mm_interconnect_0_audio_and_video_config_avalon_av_config_slave_address),     // avalon_av_config_slave.address
		.byteenable  (mm_interconnect_0_audio_and_video_config_avalon_av_config_slave_byteenable),  //                       .byteenable
		.read        (mm_interconnect_0_audio_and_video_config_avalon_av_config_slave_read),        //                       .read
		.write       (mm_interconnect_0_audio_and_video_config_avalon_av_config_slave_write),       //                       .write
		.writedata   (mm_interconnect_0_audio_and_video_config_avalon_av_config_slave_writedata),   //                       .writedata
		.readdata    (mm_interconnect_0_audio_and_video_config_avalon_av_config_slave_readdata),    //                       .readdata
		.waitrequest (mm_interconnect_0_audio_and_video_config_avalon_av_config_slave_waitrequest), //                       .waitrequest
		.I2C_SDAT    (audio_i2c_o_SDAT),                                                            //     external_interface.export
		.I2C_SCLK    (audio_i2c_o_SCLK)                                                             //                       .export
	);

	CodecAudio_cpu cpu (
		.clk                                 (pll_0_outclk0_clk),                                 //                       clk.clk
		.reset_n                             (~rst_controller_reset_out_reset),                   //                     reset.reset_n
		.reset_req                           (rst_controller_reset_out_reset_req),                //                          .reset_req
		.d_address                           (cpu_data_master_address),                           //               data_master.address
		.d_byteenable                        (cpu_data_master_byteenable),                        //                          .byteenable
		.d_read                              (cpu_data_master_read),                              //                          .read
		.d_readdata                          (cpu_data_master_readdata),                          //                          .readdata
		.d_waitrequest                       (cpu_data_master_waitrequest),                       //                          .waitrequest
		.d_write                             (cpu_data_master_write),                             //                          .write
		.d_writedata                         (cpu_data_master_writedata),                         //                          .writedata
		.debug_mem_slave_debugaccess_to_roms (cpu_data_master_debugaccess),                       //                          .debugaccess
		.i_address                           (cpu_instruction_master_address),                    //        instruction_master.address
		.i_read                              (cpu_instruction_master_read),                       //                          .read
		.i_readdata                          (cpu_instruction_master_readdata),                   //                          .readdata
		.i_waitrequest                       (cpu_instruction_master_waitrequest),                //                          .waitrequest
		.irq                                 (cpu_irq_irq),                                       //                       irq.irq
		.debug_reset_request                 (),                                                  //       debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_cpu_debug_mem_slave_address),     //           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_cpu_debug_mem_slave_byteenable),  //                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_cpu_debug_mem_slave_debugaccess), //                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_cpu_debug_mem_slave_read),        //                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_cpu_debug_mem_slave_readdata),    //                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_cpu_debug_mem_slave_waitrequest), //                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_cpu_debug_mem_slave_write),       //                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_cpu_debug_mem_slave_writedata),   //                          .writedata
		.dummy_ci_port                       ()                                                   // custom_instruction_master.readra
	);

	CodecAudio_dac_pll dac_pll (
		.ref_clk_clk        (pll_0_outclk0_clk),          //      ref_clk.clk
		.ref_reset_reset    (~reset_reset_n),             //    ref_reset.reset
		.audio_clk_clk      (dac_pll_audio_clk_clk),      //    audio_clk.clk
		.reset_source_reset (dac_pll_reset_source_reset)  // reset_source.reset
	);

	CodecAudio_dac_pll dacchip_pll (
		.ref_clk_clk        (pll_0_outclk0_clk),         //      ref_clk.clk
		.ref_reset_reset    (~reset_reset_n),            //    ref_reset.reset
		.audio_clk_clk      (dacchip_pll_audio_clk_clk), //    audio_clk.clk
		.reset_source_reset ()                           // reset_source.reset
	);

	CodecAudio_jtag_uart_0 jtag_uart_0 (
		.clk            (pll_0_outclk0_clk),                                           //               clk.clk
		.rst_n          (~rst_controller_reset_out_reset),                             //             reset.reset_n
		.av_chipselect  (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect),  // avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address),     //                  .address
		.av_read_n      (~mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read),       //                  .read_n
		.av_readdata    (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata),    //                  .readdata
		.av_write_n     (~mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write),      //                  .write_n
		.av_writedata   (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata),   //                  .writedata
		.av_waitrequest (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest), //                  .waitrequest
		.av_irq         (irq_mapper_receiver4_irq)                                     //               irq.irq
	);

	CodecAudio_onchipmem onchipmem (
		.clk        (pll_0_outclk0_clk),                         //   clk1.clk
		.address    (mm_interconnect_0_onchipmem_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_onchipmem_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_onchipmem_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_onchipmem_s1_write),      //       .write
		.readdata   (mm_interconnect_0_onchipmem_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_onchipmem_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_onchipmem_s1_byteenable), //       .byteenable
		.reset      (rst_controller_reset_out_reset),            // reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req)         //       .reset_req
	);

	CodecAudio_pll_0 pll_0 (
		.refclk   (clk_clk),             //  refclk.clk
		.rst      (~reset_reset_n),      //   reset.reset
		.outclk_0 (pll_0_outclk0_clk),   // outclk0.clk
		.locked   (pll_0_locked_export)  //  locked.export
	);

	CodecAudio_ps2 ps2 (
		.clk         (pll_0_outclk0_clk),                                  //                clk.clk
		.reset       (rst_controller_reset_out_reset),                     //              reset.reset
		.address     (mm_interconnect_0_ps2_avalon_ps2_slave_address),     //   avalon_ps2_slave.address
		.chipselect  (mm_interconnect_0_ps2_avalon_ps2_slave_chipselect),  //                   .chipselect
		.byteenable  (mm_interconnect_0_ps2_avalon_ps2_slave_byteenable),  //                   .byteenable
		.read        (mm_interconnect_0_ps2_avalon_ps2_slave_read),        //                   .read
		.write       (mm_interconnect_0_ps2_avalon_ps2_slave_write),       //                   .write
		.writedata   (mm_interconnect_0_ps2_avalon_ps2_slave_writedata),   //                   .writedata
		.readdata    (mm_interconnect_0_ps2_avalon_ps2_slave_readdata),    //                   .readdata
		.waitrequest (mm_interconnect_0_ps2_avalon_ps2_slave_waitrequest), //                   .waitrequest
		.irq         (irq_mapper_receiver0_irq),                           //          interrupt.irq
		.PS2_CLK     (ps2_o_CLK),                                          // external_interface.export
		.PS2_DAT     (ps2_o_DAT)                                           //                   .export
	);

	CodecAudio_sysid sysid (
		.clock    (pll_0_outclk0_clk),                              //           clk.clk
		.reset_n  (~rst_controller_reset_out_reset),                //         reset.reset_n
		.readdata (mm_interconnect_0_sysid_control_slave_readdata), // control_slave.readdata
		.address  (mm_interconnect_0_sysid_control_slave_address)   //              .address
	);

	CodecAudio_timer0 timer0 (
		.clk        (pll_0_outclk0_clk),                      //   clk.clk
		.reset_n    (~rst_controller_reset_out_reset),        // reset.reset_n
		.address    (mm_interconnect_0_timer0_s1_address),    //    s1.address
		.writedata  (mm_interconnect_0_timer0_s1_writedata),  //      .writedata
		.readdata   (mm_interconnect_0_timer0_s1_readdata),   //      .readdata
		.chipselect (mm_interconnect_0_timer0_s1_chipselect), //      .chipselect
		.write_n    (~mm_interconnect_0_timer0_s1_write),     //      .write_n
		.irq        (irq_mapper_receiver2_irq)                //   irq.irq
	);

	CodecAudio_timer1 timer1 (
		.clk        (pll_0_outclk0_clk),                      //   clk.clk
		.reset_n    (~rst_controller_reset_out_reset),        // reset.reset_n
		.address    (mm_interconnect_0_timer1_s1_address),    //    s1.address
		.writedata  (mm_interconnect_0_timer1_s1_writedata),  //      .writedata
		.readdata   (mm_interconnect_0_timer1_s1_readdata),   //      .readdata
		.chipselect (mm_interconnect_0_timer1_s1_chipselect), //      .chipselect
		.write_n    (~mm_interconnect_0_timer1_s1_write),     //      .write_n
		.irq        (irq_mapper_receiver3_irq)                //   irq.irq
	);

	CodecAudio_mm_interconnect_0 mm_interconnect_0 (
		.dac_pll_audio_clk_clk                                     (dac_pll_audio_clk_clk),                                                       //                             dac_pll_audio_clk.clk
		.pll_0_outclk0_clk                                         (pll_0_outclk0_clk),                                                           //                                 pll_0_outclk0.clk
		.audio_reset_reset_bridge_in_reset_reset                   (rst_controller_001_reset_out_reset),                                          //             audio_reset_reset_bridge_in_reset.reset
		.cpu_reset_reset_bridge_in_reset_reset                     (rst_controller_reset_out_reset),                                              //               cpu_reset_reset_bridge_in_reset.reset
		.cpu_data_master_address                                   (cpu_data_master_address),                                                     //                               cpu_data_master.address
		.cpu_data_master_waitrequest                               (cpu_data_master_waitrequest),                                                 //                                              .waitrequest
		.cpu_data_master_byteenable                                (cpu_data_master_byteenable),                                                  //                                              .byteenable
		.cpu_data_master_read                                      (cpu_data_master_read),                                                        //                                              .read
		.cpu_data_master_readdata                                  (cpu_data_master_readdata),                                                    //                                              .readdata
		.cpu_data_master_write                                     (cpu_data_master_write),                                                       //                                              .write
		.cpu_data_master_writedata                                 (cpu_data_master_writedata),                                                   //                                              .writedata
		.cpu_data_master_debugaccess                               (cpu_data_master_debugaccess),                                                 //                                              .debugaccess
		.cpu_instruction_master_address                            (cpu_instruction_master_address),                                              //                        cpu_instruction_master.address
		.cpu_instruction_master_waitrequest                        (cpu_instruction_master_waitrequest),                                          //                                              .waitrequest
		.cpu_instruction_master_read                               (cpu_instruction_master_read),                                                 //                                              .read
		.cpu_instruction_master_readdata                           (cpu_instruction_master_readdata),                                             //                                              .readdata
		.audio_avalon_audio_slave_address                          (mm_interconnect_0_audio_avalon_audio_slave_address),                          //                      audio_avalon_audio_slave.address
		.audio_avalon_audio_slave_write                            (mm_interconnect_0_audio_avalon_audio_slave_write),                            //                                              .write
		.audio_avalon_audio_slave_read                             (mm_interconnect_0_audio_avalon_audio_slave_read),                             //                                              .read
		.audio_avalon_audio_slave_readdata                         (mm_interconnect_0_audio_avalon_audio_slave_readdata),                         //                                              .readdata
		.audio_avalon_audio_slave_writedata                        (mm_interconnect_0_audio_avalon_audio_slave_writedata),                        //                                              .writedata
		.audio_avalon_audio_slave_chipselect                       (mm_interconnect_0_audio_avalon_audio_slave_chipselect),                       //                                              .chipselect
		.audio_and_video_config_avalon_av_config_slave_address     (mm_interconnect_0_audio_and_video_config_avalon_av_config_slave_address),     // audio_and_video_config_avalon_av_config_slave.address
		.audio_and_video_config_avalon_av_config_slave_write       (mm_interconnect_0_audio_and_video_config_avalon_av_config_slave_write),       //                                              .write
		.audio_and_video_config_avalon_av_config_slave_read        (mm_interconnect_0_audio_and_video_config_avalon_av_config_slave_read),        //                                              .read
		.audio_and_video_config_avalon_av_config_slave_readdata    (mm_interconnect_0_audio_and_video_config_avalon_av_config_slave_readdata),    //                                              .readdata
		.audio_and_video_config_avalon_av_config_slave_writedata   (mm_interconnect_0_audio_and_video_config_avalon_av_config_slave_writedata),   //                                              .writedata
		.audio_and_video_config_avalon_av_config_slave_byteenable  (mm_interconnect_0_audio_and_video_config_avalon_av_config_slave_byteenable),  //                                              .byteenable
		.audio_and_video_config_avalon_av_config_slave_waitrequest (mm_interconnect_0_audio_and_video_config_avalon_av_config_slave_waitrequest), //                                              .waitrequest
		.cpu_debug_mem_slave_address                               (mm_interconnect_0_cpu_debug_mem_slave_address),                               //                           cpu_debug_mem_slave.address
		.cpu_debug_mem_slave_write                                 (mm_interconnect_0_cpu_debug_mem_slave_write),                                 //                                              .write
		.cpu_debug_mem_slave_read                                  (mm_interconnect_0_cpu_debug_mem_slave_read),                                  //                                              .read
		.cpu_debug_mem_slave_readdata                              (mm_interconnect_0_cpu_debug_mem_slave_readdata),                              //                                              .readdata
		.cpu_debug_mem_slave_writedata                             (mm_interconnect_0_cpu_debug_mem_slave_writedata),                             //                                              .writedata
		.cpu_debug_mem_slave_byteenable                            (mm_interconnect_0_cpu_debug_mem_slave_byteenable),                            //                                              .byteenable
		.cpu_debug_mem_slave_waitrequest                           (mm_interconnect_0_cpu_debug_mem_slave_waitrequest),                           //                                              .waitrequest
		.cpu_debug_mem_slave_debugaccess                           (mm_interconnect_0_cpu_debug_mem_slave_debugaccess),                           //                                              .debugaccess
		.DataFromAccMat_s1_address                                 (mm_interconnect_0_datafromaccmat_s1_address),                                 //                             DataFromAccMat_s1.address
		.DataFromAccMat_s1_readdata                                (mm_interconnect_0_datafromaccmat_s1_readdata),                                //                                              .readdata
		.DataToAccMat_s1_address                                   (mm_interconnect_0_datatoaccmat_s1_address),                                   //                               DataToAccMat_s1.address
		.DataToAccMat_s1_write                                     (mm_interconnect_0_datatoaccmat_s1_write),                                     //                                              .write
		.DataToAccMat_s1_readdata                                  (mm_interconnect_0_datatoaccmat_s1_readdata),                                  //                                              .readdata
		.DataToAccMat_s1_writedata                                 (mm_interconnect_0_datatoaccmat_s1_writedata),                                 //                                              .writedata
		.DataToAccMat_s1_chipselect                                (mm_interconnect_0_datatoaccmat_s1_chipselect),                                //                                              .chipselect
		.jtag_uart_0_avalon_jtag_slave_address                     (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address),                     //                 jtag_uart_0_avalon_jtag_slave.address
		.jtag_uart_0_avalon_jtag_slave_write                       (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write),                       //                                              .write
		.jtag_uart_0_avalon_jtag_slave_read                        (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read),                        //                                              .read
		.jtag_uart_0_avalon_jtag_slave_readdata                    (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata),                    //                                              .readdata
		.jtag_uart_0_avalon_jtag_slave_writedata                   (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata),                   //                                              .writedata
		.jtag_uart_0_avalon_jtag_slave_waitrequest                 (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest),                 //                                              .waitrequest
		.jtag_uart_0_avalon_jtag_slave_chipselect                  (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect),                  //                                              .chipselect
		.onchipmem_s1_address                                      (mm_interconnect_0_onchipmem_s1_address),                                      //                                  onchipmem_s1.address
		.onchipmem_s1_write                                        (mm_interconnect_0_onchipmem_s1_write),                                        //                                              .write
		.onchipmem_s1_readdata                                     (mm_interconnect_0_onchipmem_s1_readdata),                                     //                                              .readdata
		.onchipmem_s1_writedata                                    (mm_interconnect_0_onchipmem_s1_writedata),                                    //                                              .writedata
		.onchipmem_s1_byteenable                                   (mm_interconnect_0_onchipmem_s1_byteenable),                                   //                                              .byteenable
		.onchipmem_s1_chipselect                                   (mm_interconnect_0_onchipmem_s1_chipselect),                                   //                                              .chipselect
		.onchipmem_s1_clken                                        (mm_interconnect_0_onchipmem_s1_clken),                                        //                                              .clken
		.ps2_avalon_ps2_slave_address                              (mm_interconnect_0_ps2_avalon_ps2_slave_address),                              //                          ps2_avalon_ps2_slave.address
		.ps2_avalon_ps2_slave_write                                (mm_interconnect_0_ps2_avalon_ps2_slave_write),                                //                                              .write
		.ps2_avalon_ps2_slave_read                                 (mm_interconnect_0_ps2_avalon_ps2_slave_read),                                 //                                              .read
		.ps2_avalon_ps2_slave_readdata                             (mm_interconnect_0_ps2_avalon_ps2_slave_readdata),                             //                                              .readdata
		.ps2_avalon_ps2_slave_writedata                            (mm_interconnect_0_ps2_avalon_ps2_slave_writedata),                            //                                              .writedata
		.ps2_avalon_ps2_slave_byteenable                           (mm_interconnect_0_ps2_avalon_ps2_slave_byteenable),                           //                                              .byteenable
		.ps2_avalon_ps2_slave_waitrequest                          (mm_interconnect_0_ps2_avalon_ps2_slave_waitrequest),                          //                                              .waitrequest
		.ps2_avalon_ps2_slave_chipselect                           (mm_interconnect_0_ps2_avalon_ps2_slave_chipselect),                           //                                              .chipselect
		.sysid_control_slave_address                               (mm_interconnect_0_sysid_control_slave_address),                               //                           sysid_control_slave.address
		.sysid_control_slave_readdata                              (mm_interconnect_0_sysid_control_slave_readdata),                              //                                              .readdata
		.timer0_s1_address                                         (mm_interconnect_0_timer0_s1_address),                                         //                                     timer0_s1.address
		.timer0_s1_write                                           (mm_interconnect_0_timer0_s1_write),                                           //                                              .write
		.timer0_s1_readdata                                        (mm_interconnect_0_timer0_s1_readdata),                                        //                                              .readdata
		.timer0_s1_writedata                                       (mm_interconnect_0_timer0_s1_writedata),                                       //                                              .writedata
		.timer0_s1_chipselect                                      (mm_interconnect_0_timer0_s1_chipselect),                                      //                                              .chipselect
		.timer1_s1_address                                         (mm_interconnect_0_timer1_s1_address),                                         //                                     timer1_s1.address
		.timer1_s1_write                                           (mm_interconnect_0_timer1_s1_write),                                           //                                              .write
		.timer1_s1_readdata                                        (mm_interconnect_0_timer1_s1_readdata),                                        //                                              .readdata
		.timer1_s1_writedata                                       (mm_interconnect_0_timer1_s1_writedata),                                       //                                              .writedata
		.timer1_s1_chipselect                                      (mm_interconnect_0_timer1_s1_chipselect),                                      //                                              .chipselect
		.ToggleAccMat_s1_address                                   (mm_interconnect_0_toggleaccmat_s1_address),                                   //                               ToggleAccMat_s1.address
		.ToggleAccMat_s1_write                                     (mm_interconnect_0_toggleaccmat_s1_write),                                     //                                              .write
		.ToggleAccMat_s1_readdata                                  (mm_interconnect_0_toggleaccmat_s1_readdata),                                  //                                              .readdata
		.ToggleAccMat_s1_writedata                                 (mm_interconnect_0_toggleaccmat_s1_writedata),                                 //                                              .writedata
		.ToggleAccMat_s1_chipselect                                (mm_interconnect_0_toggleaccmat_s1_chipselect)                                 //                                              .chipselect
	);

	CodecAudio_irq_mapper irq_mapper (
		.clk           (pll_0_outclk0_clk),              //       clk.clk
		.reset         (rst_controller_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),       // receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq),       // receiver1.irq
		.receiver2_irq (irq_mapper_receiver2_irq),       // receiver2.irq
		.receiver3_irq (irq_mapper_receiver3_irq),       // receiver3.irq
		.receiver4_irq (irq_mapper_receiver4_irq),       // receiver4.irq
		.sender_irq    (cpu_irq_irq)                     //    sender.irq
	);

	altera_irq_clock_crosser #(
		.IRQ_WIDTH (1)
	) irq_synchronizer (
		.receiver_clk   (dac_pll_audio_clk_clk),              //       receiver_clk.clk
		.sender_clk     (pll_0_outclk0_clk),                  //         sender_clk.clk
		.receiver_reset (rst_controller_001_reset_out_reset), // receiver_clk_reset.reset
		.sender_reset   (rst_controller_reset_out_reset),     //   sender_clk_reset.reset
		.receiver_irq   (irq_synchronizer_receiver_irq),      //           receiver.irq
		.sender_irq     (irq_mapper_receiver1_irq)            //             sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.clk            (pll_0_outclk0_clk),                  //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (dac_pll_reset_source_reset),         // reset_in0.reset
		.clk            (dac_pll_audio_clk_clk),              //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule

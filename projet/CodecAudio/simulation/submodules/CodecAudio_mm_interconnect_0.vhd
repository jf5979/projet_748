-- CodecAudio_mm_interconnect_0.vhd

-- This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 15.1 185

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CodecAudio_mm_interconnect_0 is
	port (
		dac_pll_audio_clk_clk                                     : in  std_logic                     := '0';             --                             dac_pll_audio_clk.clk
		pll_0_outclk0_clk                                         : in  std_logic                     := '0';             --                                 pll_0_outclk0.clk
		audio_reset_reset_bridge_in_reset_reset                   : in  std_logic                     := '0';             --             audio_reset_reset_bridge_in_reset.reset
		cpu_reset_reset_bridge_in_reset_reset                     : in  std_logic                     := '0';             --               cpu_reset_reset_bridge_in_reset.reset
		cpu_data_master_address                                   : in  std_logic_vector(19 downto 0) := (others => '0'); --                               cpu_data_master.address
		cpu_data_master_waitrequest                               : out std_logic;                                        --                                              .waitrequest
		cpu_data_master_byteenable                                : in  std_logic_vector(3 downto 0)  := (others => '0'); --                                              .byteenable
		cpu_data_master_read                                      : in  std_logic                     := '0';             --                                              .read
		cpu_data_master_readdata                                  : out std_logic_vector(31 downto 0);                    --                                              .readdata
		cpu_data_master_write                                     : in  std_logic                     := '0';             --                                              .write
		cpu_data_master_writedata                                 : in  std_logic_vector(31 downto 0) := (others => '0'); --                                              .writedata
		cpu_data_master_debugaccess                               : in  std_logic                     := '0';             --                                              .debugaccess
		cpu_instruction_master_address                            : in  std_logic_vector(19 downto 0) := (others => '0'); --                        cpu_instruction_master.address
		cpu_instruction_master_waitrequest                        : out std_logic;                                        --                                              .waitrequest
		cpu_instruction_master_read                               : in  std_logic                     := '0';             --                                              .read
		cpu_instruction_master_readdata                           : out std_logic_vector(31 downto 0);                    --                                              .readdata
		audio_avalon_audio_slave_address                          : out std_logic_vector(1 downto 0);                     --                      audio_avalon_audio_slave.address
		audio_avalon_audio_slave_write                            : out std_logic;                                        --                                              .write
		audio_avalon_audio_slave_read                             : out std_logic;                                        --                                              .read
		audio_avalon_audio_slave_readdata                         : in  std_logic_vector(31 downto 0) := (others => '0'); --                                              .readdata
		audio_avalon_audio_slave_writedata                        : out std_logic_vector(31 downto 0);                    --                                              .writedata
		audio_avalon_audio_slave_chipselect                       : out std_logic;                                        --                                              .chipselect
		audio_and_video_config_avalon_av_config_slave_address     : out std_logic_vector(1 downto 0);                     -- audio_and_video_config_avalon_av_config_slave.address
		audio_and_video_config_avalon_av_config_slave_write       : out std_logic;                                        --                                              .write
		audio_and_video_config_avalon_av_config_slave_read        : out std_logic;                                        --                                              .read
		audio_and_video_config_avalon_av_config_slave_readdata    : in  std_logic_vector(31 downto 0) := (others => '0'); --                                              .readdata
		audio_and_video_config_avalon_av_config_slave_writedata   : out std_logic_vector(31 downto 0);                    --                                              .writedata
		audio_and_video_config_avalon_av_config_slave_byteenable  : out std_logic_vector(3 downto 0);                     --                                              .byteenable
		audio_and_video_config_avalon_av_config_slave_waitrequest : in  std_logic                     := '0';             --                                              .waitrequest
		cpu_debug_mem_slave_address                               : out std_logic_vector(8 downto 0);                     --                           cpu_debug_mem_slave.address
		cpu_debug_mem_slave_write                                 : out std_logic;                                        --                                              .write
		cpu_debug_mem_slave_read                                  : out std_logic;                                        --                                              .read
		cpu_debug_mem_slave_readdata                              : in  std_logic_vector(31 downto 0) := (others => '0'); --                                              .readdata
		cpu_debug_mem_slave_writedata                             : out std_logic_vector(31 downto 0);                    --                                              .writedata
		cpu_debug_mem_slave_byteenable                            : out std_logic_vector(3 downto 0);                     --                                              .byteenable
		cpu_debug_mem_slave_waitrequest                           : in  std_logic                     := '0';             --                                              .waitrequest
		cpu_debug_mem_slave_debugaccess                           : out std_logic;                                        --                                              .debugaccess
		DataFromAccMat_s1_address                                 : out std_logic_vector(1 downto 0);                     --                             DataFromAccMat_s1.address
		DataFromAccMat_s1_readdata                                : in  std_logic_vector(31 downto 0) := (others => '0'); --                                              .readdata
		DataToAccMat_s1_address                                   : out std_logic_vector(1 downto 0);                     --                               DataToAccMat_s1.address
		DataToAccMat_s1_write                                     : out std_logic;                                        --                                              .write
		DataToAccMat_s1_readdata                                  : in  std_logic_vector(31 downto 0) := (others => '0'); --                                              .readdata
		DataToAccMat_s1_writedata                                 : out std_logic_vector(31 downto 0);                    --                                              .writedata
		DataToAccMat_s1_chipselect                                : out std_logic;                                        --                                              .chipselect
		jtag_uart_0_avalon_jtag_slave_address                     : out std_logic_vector(0 downto 0);                     --                 jtag_uart_0_avalon_jtag_slave.address
		jtag_uart_0_avalon_jtag_slave_write                       : out std_logic;                                        --                                              .write
		jtag_uart_0_avalon_jtag_slave_read                        : out std_logic;                                        --                                              .read
		jtag_uart_0_avalon_jtag_slave_readdata                    : in  std_logic_vector(31 downto 0) := (others => '0'); --                                              .readdata
		jtag_uart_0_avalon_jtag_slave_writedata                   : out std_logic_vector(31 downto 0);                    --                                              .writedata
		jtag_uart_0_avalon_jtag_slave_waitrequest                 : in  std_logic                     := '0';             --                                              .waitrequest
		jtag_uart_0_avalon_jtag_slave_chipselect                  : out std_logic;                                        --                                              .chipselect
		onchipmem_s1_address                                      : out std_logic_vector(15 downto 0);                    --                                  onchipmem_s1.address
		onchipmem_s1_write                                        : out std_logic;                                        --                                              .write
		onchipmem_s1_readdata                                     : in  std_logic_vector(31 downto 0) := (others => '0'); --                                              .readdata
		onchipmem_s1_writedata                                    : out std_logic_vector(31 downto 0);                    --                                              .writedata
		onchipmem_s1_byteenable                                   : out std_logic_vector(3 downto 0);                     --                                              .byteenable
		onchipmem_s1_chipselect                                   : out std_logic;                                        --                                              .chipselect
		onchipmem_s1_clken                                        : out std_logic;                                        --                                              .clken
		ps2_avalon_ps2_slave_address                              : out std_logic_vector(0 downto 0);                     --                          ps2_avalon_ps2_slave.address
		ps2_avalon_ps2_slave_write                                : out std_logic;                                        --                                              .write
		ps2_avalon_ps2_slave_read                                 : out std_logic;                                        --                                              .read
		ps2_avalon_ps2_slave_readdata                             : in  std_logic_vector(31 downto 0) := (others => '0'); --                                              .readdata
		ps2_avalon_ps2_slave_writedata                            : out std_logic_vector(31 downto 0);                    --                                              .writedata
		ps2_avalon_ps2_slave_byteenable                           : out std_logic_vector(3 downto 0);                     --                                              .byteenable
		ps2_avalon_ps2_slave_waitrequest                          : in  std_logic                     := '0';             --                                              .waitrequest
		ps2_avalon_ps2_slave_chipselect                           : out std_logic;                                        --                                              .chipselect
		sysid_control_slave_address                               : out std_logic_vector(0 downto 0);                     --                           sysid_control_slave.address
		sysid_control_slave_readdata                              : in  std_logic_vector(31 downto 0) := (others => '0'); --                                              .readdata
		timer0_s1_address                                         : out std_logic_vector(2 downto 0);                     --                                     timer0_s1.address
		timer0_s1_write                                           : out std_logic;                                        --                                              .write
		timer0_s1_readdata                                        : in  std_logic_vector(15 downto 0) := (others => '0'); --                                              .readdata
		timer0_s1_writedata                                       : out std_logic_vector(15 downto 0);                    --                                              .writedata
		timer0_s1_chipselect                                      : out std_logic;                                        --                                              .chipselect
		timer1_s1_address                                         : out std_logic_vector(2 downto 0);                     --                                     timer1_s1.address
		timer1_s1_write                                           : out std_logic;                                        --                                              .write
		timer1_s1_readdata                                        : in  std_logic_vector(15 downto 0) := (others => '0'); --                                              .readdata
		timer1_s1_writedata                                       : out std_logic_vector(15 downto 0);                    --                                              .writedata
		timer1_s1_chipselect                                      : out std_logic;                                        --                                              .chipselect
		ToggleAccMat_s1_address                                   : out std_logic_vector(1 downto 0);                     --                               ToggleAccMat_s1.address
		ToggleAccMat_s1_write                                     : out std_logic;                                        --                                              .write
		ToggleAccMat_s1_readdata                                  : in  std_logic_vector(31 downto 0) := (others => '0'); --                                              .readdata
		ToggleAccMat_s1_writedata                                 : out std_logic_vector(31 downto 0);                    --                                              .writedata
		ToggleAccMat_s1_chipselect                                : out std_logic                                         --                                              .chipselect
	);
end entity CodecAudio_mm_interconnect_0;

architecture rtl of CodecAudio_mm_interconnect_0 is
	component altera_merlin_master_agent is
		generic (
			PKT_ORI_BURST_SIZE_H      : integer := 116;
			PKT_ORI_BURST_SIZE_L      : integer := 114;
			PKT_RESPONSE_STATUS_H     : integer := 113;
			PKT_RESPONSE_STATUS_L     : integer := 112;
			PKT_QOS_H                 : integer := 111;
			PKT_QOS_L                 : integer := 108;
			PKT_DATA_SIDEBAND_H       : integer := 107;
			PKT_DATA_SIDEBAND_L       : integer := 100;
			PKT_ADDR_SIDEBAND_H       : integer := 99;
			PKT_ADDR_SIDEBAND_L       : integer := 95;
			PKT_BURST_TYPE_H          : integer := 94;
			PKT_BURST_TYPE_L          : integer := 93;
			PKT_CACHE_H               : integer := 92;
			PKT_CACHE_L               : integer := 89;
			PKT_THREAD_ID_H           : integer := 88;
			PKT_THREAD_ID_L           : integer := 87;
			PKT_BURST_SIZE_H          : integer := 86;
			PKT_BURST_SIZE_L          : integer := 84;
			PKT_TRANS_EXCLUSIVE       : integer := 83;
			PKT_TRANS_LOCK            : integer := 82;
			PKT_BEGIN_BURST           : integer := 81;
			PKT_PROTECTION_H          : integer := 80;
			PKT_PROTECTION_L          : integer := 80;
			PKT_BURSTWRAP_H           : integer := 79;
			PKT_BURSTWRAP_L           : integer := 77;
			PKT_BYTE_CNT_H            : integer := 76;
			PKT_BYTE_CNT_L            : integer := 74;
			PKT_ADDR_H                : integer := 73;
			PKT_ADDR_L                : integer := 42;
			PKT_TRANS_COMPRESSED_READ : integer := 41;
			PKT_TRANS_POSTED          : integer := 40;
			PKT_TRANS_WRITE           : integer := 39;
			PKT_TRANS_READ            : integer := 38;
			PKT_DATA_H                : integer := 37;
			PKT_DATA_L                : integer := 6;
			PKT_BYTEEN_H              : integer := 5;
			PKT_BYTEEN_L              : integer := 2;
			PKT_SRC_ID_H              : integer := 1;
			PKT_SRC_ID_L              : integer := 1;
			PKT_DEST_ID_H             : integer := 0;
			PKT_DEST_ID_L             : integer := 0;
			ST_DATA_W                 : integer := 115;
			ST_CHANNEL_W              : integer := 1;
			AV_BURSTCOUNT_W           : integer := 3;
			SUPPRESS_0_BYTEEN_RSP     : integer := 1;
			ID                        : integer := 1;
			BURSTWRAP_VALUE           : integer := 4;
			CACHE_VALUE               : integer := 0;
			SECURE_ACCESS_BIT         : integer := 1;
			USE_READRESPONSE          : integer := 0;
			USE_WRITERESPONSE         : integer := 0
		);
		port (
			clk                   : in  std_logic                     := 'X';             -- clk
			reset                 : in  std_logic                     := 'X';             -- reset
			av_address            : in  std_logic_vector(19 downto 0) := (others => 'X'); -- address
			av_write              : in  std_logic                     := 'X';             -- write
			av_read               : in  std_logic                     := 'X';             -- read
			av_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			av_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			av_waitrequest        : out std_logic;                                        -- waitrequest
			av_readdatavalid      : out std_logic;                                        -- readdatavalid
			av_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			av_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			av_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_lock               : in  std_logic                     := 'X';             -- lock
			cp_valid              : out std_logic;                                        -- valid
			cp_data               : out std_logic_vector(97 downto 0);                    -- data
			cp_startofpacket      : out std_logic;                                        -- startofpacket
			cp_endofpacket        : out std_logic;                                        -- endofpacket
			cp_ready              : in  std_logic                     := 'X';             -- ready
			rp_valid              : in  std_logic                     := 'X';             -- valid
			rp_data               : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			rp_channel            : in  std_logic_vector(11 downto 0) := (others => 'X'); -- channel
			rp_startofpacket      : in  std_logic                     := 'X';             -- startofpacket
			rp_endofpacket        : in  std_logic                     := 'X';             -- endofpacket
			rp_ready              : out std_logic;                                        -- ready
			av_response           : out std_logic_vector(1 downto 0);                     -- response
			av_writeresponsevalid : out std_logic                                         -- writeresponsevalid
		);
	end component altera_merlin_master_agent;

	component altera_merlin_slave_agent is
		generic (
			PKT_ORI_BURST_SIZE_H      : integer := 90;
			PKT_ORI_BURST_SIZE_L      : integer := 88;
			PKT_RESPONSE_STATUS_H     : integer := 87;
			PKT_RESPONSE_STATUS_L     : integer := 86;
			PKT_BURST_SIZE_H          : integer := 85;
			PKT_BURST_SIZE_L          : integer := 83;
			PKT_TRANS_LOCK            : integer := 82;
			PKT_BEGIN_BURST           : integer := 81;
			PKT_PROTECTION_H          : integer := 80;
			PKT_PROTECTION_L          : integer := 80;
			PKT_BURSTWRAP_H           : integer := 79;
			PKT_BURSTWRAP_L           : integer := 77;
			PKT_BYTE_CNT_H            : integer := 76;
			PKT_BYTE_CNT_L            : integer := 74;
			PKT_ADDR_H                : integer := 73;
			PKT_ADDR_L                : integer := 42;
			PKT_TRANS_COMPRESSED_READ : integer := 41;
			PKT_TRANS_POSTED          : integer := 40;
			PKT_TRANS_WRITE           : integer := 39;
			PKT_TRANS_READ            : integer := 38;
			PKT_DATA_H                : integer := 37;
			PKT_DATA_L                : integer := 6;
			PKT_BYTEEN_H              : integer := 5;
			PKT_BYTEEN_L              : integer := 2;
			PKT_SRC_ID_H              : integer := 1;
			PKT_SRC_ID_L              : integer := 1;
			PKT_DEST_ID_H             : integer := 0;
			PKT_DEST_ID_L             : integer := 0;
			PKT_SYMBOL_W              : integer := 8;
			ST_CHANNEL_W              : integer := 8;
			ST_DATA_W                 : integer := 96;
			AVS_BURSTCOUNT_W          : integer := 4;
			SUPPRESS_0_BYTEEN_CMD     : integer := 1;
			PREVENT_FIFO_OVERFLOW     : integer := 0;
			USE_READRESPONSE          : integer := 0;
			USE_WRITERESPONSE         : integer := 0;
			ECC_ENABLE                : integer := 0
		);
		port (
			clk                     : in  std_logic                     := 'X';             -- clk
			reset                   : in  std_logic                     := 'X';             -- reset
			m0_address              : out std_logic_vector(19 downto 0);                    -- address
			m0_burstcount           : out std_logic_vector(2 downto 0);                     -- burstcount
			m0_byteenable           : out std_logic_vector(3 downto 0);                     -- byteenable
			m0_debugaccess          : out std_logic;                                        -- debugaccess
			m0_lock                 : out std_logic;                                        -- lock
			m0_readdata             : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			m0_readdatavalid        : in  std_logic                     := 'X';             -- readdatavalid
			m0_read                 : out std_logic;                                        -- read
			m0_waitrequest          : in  std_logic                     := 'X';             -- waitrequest
			m0_writedata            : out std_logic_vector(31 downto 0);                    -- writedata
			m0_write                : out std_logic;                                        -- write
			rp_endofpacket          : out std_logic;                                        -- endofpacket
			rp_ready                : in  std_logic                     := 'X';             -- ready
			rp_valid                : out std_logic;                                        -- valid
			rp_data                 : out std_logic_vector(97 downto 0);                    -- data
			rp_startofpacket        : out std_logic;                                        -- startofpacket
			cp_ready                : out std_logic;                                        -- ready
			cp_valid                : in  std_logic                     := 'X';             -- valid
			cp_data                 : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			cp_startofpacket        : in  std_logic                     := 'X';             -- startofpacket
			cp_endofpacket          : in  std_logic                     := 'X';             -- endofpacket
			cp_channel              : in  std_logic_vector(11 downto 0) := (others => 'X'); -- channel
			rf_sink_ready           : out std_logic;                                        -- ready
			rf_sink_valid           : in  std_logic                     := 'X';             -- valid
			rf_sink_startofpacket   : in  std_logic                     := 'X';             -- startofpacket
			rf_sink_endofpacket     : in  std_logic                     := 'X';             -- endofpacket
			rf_sink_data            : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			rf_source_ready         : in  std_logic                     := 'X';             -- ready
			rf_source_valid         : out std_logic;                                        -- valid
			rf_source_startofpacket : out std_logic;                                        -- startofpacket
			rf_source_endofpacket   : out std_logic;                                        -- endofpacket
			rf_source_data          : out std_logic_vector(98 downto 0);                    -- data
			rdata_fifo_sink_ready   : out std_logic;                                        -- ready
			rdata_fifo_sink_valid   : in  std_logic                     := 'X';             -- valid
			rdata_fifo_sink_data    : in  std_logic_vector(33 downto 0) := (others => 'X'); -- data
			rdata_fifo_sink_error   : in  std_logic                     := 'X';             -- error
			rdata_fifo_src_ready    : in  std_logic                     := 'X';             -- ready
			rdata_fifo_src_valid    : out std_logic;                                        -- valid
			rdata_fifo_src_data     : out std_logic_vector(33 downto 0);                    -- data
			m0_response             : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			m0_writeresponsevalid   : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component altera_merlin_slave_agent;

	component CodecAudio_mm_interconnect_0_audio_avalon_audio_slave_agent_rsp_fifo is
		port (
			clk               : in  std_logic                     := 'X';             -- clk
			reset             : in  std_logic                     := 'X';             -- reset
			in_data           : in  std_logic_vector(98 downto 0) := (others => 'X'); -- data
			in_valid          : in  std_logic                     := 'X';             -- valid
			in_ready          : out std_logic;                                        -- ready
			in_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			in_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			out_data          : out std_logic_vector(98 downto 0);                    -- data
			out_valid         : out std_logic;                                        -- valid
			out_ready         : in  std_logic                     := 'X';             -- ready
			out_startofpacket : out std_logic;                                        -- startofpacket
			out_endofpacket   : out std_logic                                         -- endofpacket
		);
	end component CodecAudio_mm_interconnect_0_audio_avalon_audio_slave_agent_rsp_fifo;

	component CodecAudio_mm_interconnect_0_audio_avalon_audio_slave_agent_rdata_fifo is
		port (
			clk       : in  std_logic                     := 'X';             -- clk
			reset     : in  std_logic                     := 'X';             -- reset
			in_data   : in  std_logic_vector(33 downto 0) := (others => 'X'); -- data
			in_valid  : in  std_logic                     := 'X';             -- valid
			in_ready  : out std_logic;                                        -- ready
			out_data  : out std_logic_vector(33 downto 0);                    -- data
			out_valid : out std_logic;                                        -- valid
			out_ready : in  std_logic                     := 'X'              -- ready
		);
	end component CodecAudio_mm_interconnect_0_audio_avalon_audio_slave_agent_rdata_fifo;

	component CodecAudio_mm_interconnect_0_router is
		port (
			sink_ready         : out std_logic;                                        -- ready
			sink_valid         : in  std_logic                     := 'X';             -- valid
			sink_data          : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			src_ready          : in  std_logic                     := 'X';             -- ready
			src_valid          : out std_logic;                                        -- valid
			src_data           : out std_logic_vector(97 downto 0);                    -- data
			src_channel        : out std_logic_vector(11 downto 0);                    -- channel
			src_startofpacket  : out std_logic;                                        -- startofpacket
			src_endofpacket    : out std_logic                                         -- endofpacket
		);
	end component CodecAudio_mm_interconnect_0_router;

	component CodecAudio_mm_interconnect_0_router_001 is
		port (
			sink_ready         : out std_logic;                                        -- ready
			sink_valid         : in  std_logic                     := 'X';             -- valid
			sink_data          : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			src_ready          : in  std_logic                     := 'X';             -- ready
			src_valid          : out std_logic;                                        -- valid
			src_data           : out std_logic_vector(97 downto 0);                    -- data
			src_channel        : out std_logic_vector(11 downto 0);                    -- channel
			src_startofpacket  : out std_logic;                                        -- startofpacket
			src_endofpacket    : out std_logic                                         -- endofpacket
		);
	end component CodecAudio_mm_interconnect_0_router_001;

	component CodecAudio_mm_interconnect_0_router_002 is
		port (
			sink_ready         : out std_logic;                                        -- ready
			sink_valid         : in  std_logic                     := 'X';             -- valid
			sink_data          : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			src_ready          : in  std_logic                     := 'X';             -- ready
			src_valid          : out std_logic;                                        -- valid
			src_data           : out std_logic_vector(97 downto 0);                    -- data
			src_channel        : out std_logic_vector(11 downto 0);                    -- channel
			src_startofpacket  : out std_logic;                                        -- startofpacket
			src_endofpacket    : out std_logic                                         -- endofpacket
		);
	end component CodecAudio_mm_interconnect_0_router_002;

	component CodecAudio_mm_interconnect_0_router_007 is
		port (
			sink_ready         : out std_logic;                                        -- ready
			sink_valid         : in  std_logic                     := 'X';             -- valid
			sink_data          : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			src_ready          : in  std_logic                     := 'X';             -- ready
			src_valid          : out std_logic;                                        -- valid
			src_data           : out std_logic_vector(97 downto 0);                    -- data
			src_channel        : out std_logic_vector(11 downto 0);                    -- channel
			src_startofpacket  : out std_logic;                                        -- startofpacket
			src_endofpacket    : out std_logic                                         -- endofpacket
		);
	end component CodecAudio_mm_interconnect_0_router_007;

	component CodecAudio_mm_interconnect_0_cmd_demux is
		port (
			clk                 : in  std_logic                     := 'X';             -- clk
			reset               : in  std_logic                     := 'X';             -- reset
			sink_ready          : out std_logic;                                        -- ready
			sink_channel        : in  std_logic_vector(11 downto 0) := (others => 'X'); -- channel
			sink_data           : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			sink_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			sink_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			sink_valid          : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- valid
			src0_ready          : in  std_logic                     := 'X';             -- ready
			src0_valid          : out std_logic;                                        -- valid
			src0_data           : out std_logic_vector(97 downto 0);                    -- data
			src0_channel        : out std_logic_vector(11 downto 0);                    -- channel
			src0_startofpacket  : out std_logic;                                        -- startofpacket
			src0_endofpacket    : out std_logic;                                        -- endofpacket
			src1_ready          : in  std_logic                     := 'X';             -- ready
			src1_valid          : out std_logic;                                        -- valid
			src1_data           : out std_logic_vector(97 downto 0);                    -- data
			src1_channel        : out std_logic_vector(11 downto 0);                    -- channel
			src1_startofpacket  : out std_logic;                                        -- startofpacket
			src1_endofpacket    : out std_logic;                                        -- endofpacket
			src2_ready          : in  std_logic                     := 'X';             -- ready
			src2_valid          : out std_logic;                                        -- valid
			src2_data           : out std_logic_vector(97 downto 0);                    -- data
			src2_channel        : out std_logic_vector(11 downto 0);                    -- channel
			src2_startofpacket  : out std_logic;                                        -- startofpacket
			src2_endofpacket    : out std_logic;                                        -- endofpacket
			src3_ready          : in  std_logic                     := 'X';             -- ready
			src3_valid          : out std_logic;                                        -- valid
			src3_data           : out std_logic_vector(97 downto 0);                    -- data
			src3_channel        : out std_logic_vector(11 downto 0);                    -- channel
			src3_startofpacket  : out std_logic;                                        -- startofpacket
			src3_endofpacket    : out std_logic;                                        -- endofpacket
			src4_ready          : in  std_logic                     := 'X';             -- ready
			src4_valid          : out std_logic;                                        -- valid
			src4_data           : out std_logic_vector(97 downto 0);                    -- data
			src4_channel        : out std_logic_vector(11 downto 0);                    -- channel
			src4_startofpacket  : out std_logic;                                        -- startofpacket
			src4_endofpacket    : out std_logic;                                        -- endofpacket
			src5_ready          : in  std_logic                     := 'X';             -- ready
			src5_valid          : out std_logic;                                        -- valid
			src5_data           : out std_logic_vector(97 downto 0);                    -- data
			src5_channel        : out std_logic_vector(11 downto 0);                    -- channel
			src5_startofpacket  : out std_logic;                                        -- startofpacket
			src5_endofpacket    : out std_logic;                                        -- endofpacket
			src6_ready          : in  std_logic                     := 'X';             -- ready
			src6_valid          : out std_logic;                                        -- valid
			src6_data           : out std_logic_vector(97 downto 0);                    -- data
			src6_channel        : out std_logic_vector(11 downto 0);                    -- channel
			src6_startofpacket  : out std_logic;                                        -- startofpacket
			src6_endofpacket    : out std_logic;                                        -- endofpacket
			src7_ready          : in  std_logic                     := 'X';             -- ready
			src7_valid          : out std_logic;                                        -- valid
			src7_data           : out std_logic_vector(97 downto 0);                    -- data
			src7_channel        : out std_logic_vector(11 downto 0);                    -- channel
			src7_startofpacket  : out std_logic;                                        -- startofpacket
			src7_endofpacket    : out std_logic;                                        -- endofpacket
			src8_ready          : in  std_logic                     := 'X';             -- ready
			src8_valid          : out std_logic;                                        -- valid
			src8_data           : out std_logic_vector(97 downto 0);                    -- data
			src8_channel        : out std_logic_vector(11 downto 0);                    -- channel
			src8_startofpacket  : out std_logic;                                        -- startofpacket
			src8_endofpacket    : out std_logic;                                        -- endofpacket
			src9_ready          : in  std_logic                     := 'X';             -- ready
			src9_valid          : out std_logic;                                        -- valid
			src9_data           : out std_logic_vector(97 downto 0);                    -- data
			src9_channel        : out std_logic_vector(11 downto 0);                    -- channel
			src9_startofpacket  : out std_logic;                                        -- startofpacket
			src9_endofpacket    : out std_logic;                                        -- endofpacket
			src10_ready         : in  std_logic                     := 'X';             -- ready
			src10_valid         : out std_logic;                                        -- valid
			src10_data          : out std_logic_vector(97 downto 0);                    -- data
			src10_channel       : out std_logic_vector(11 downto 0);                    -- channel
			src10_startofpacket : out std_logic;                                        -- startofpacket
			src10_endofpacket   : out std_logic;                                        -- endofpacket
			src11_ready         : in  std_logic                     := 'X';             -- ready
			src11_valid         : out std_logic;                                        -- valid
			src11_data          : out std_logic_vector(97 downto 0);                    -- data
			src11_channel       : out std_logic_vector(11 downto 0);                    -- channel
			src11_startofpacket : out std_logic;                                        -- startofpacket
			src11_endofpacket   : out std_logic                                         -- endofpacket
		);
	end component CodecAudio_mm_interconnect_0_cmd_demux;

	component CodecAudio_mm_interconnect_0_cmd_demux_001 is
		port (
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			sink_ready         : out std_logic;                                        -- ready
			sink_channel       : in  std_logic_vector(11 downto 0) := (others => 'X'); -- channel
			sink_data          : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			sink_valid         : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- valid
			src0_ready         : in  std_logic                     := 'X';             -- ready
			src0_valid         : out std_logic;                                        -- valid
			src0_data          : out std_logic_vector(97 downto 0);                    -- data
			src0_channel       : out std_logic_vector(11 downto 0);                    -- channel
			src0_startofpacket : out std_logic;                                        -- startofpacket
			src0_endofpacket   : out std_logic;                                        -- endofpacket
			src1_ready         : in  std_logic                     := 'X';             -- ready
			src1_valid         : out std_logic;                                        -- valid
			src1_data          : out std_logic_vector(97 downto 0);                    -- data
			src1_channel       : out std_logic_vector(11 downto 0);                    -- channel
			src1_startofpacket : out std_logic;                                        -- startofpacket
			src1_endofpacket   : out std_logic                                         -- endofpacket
		);
	end component CodecAudio_mm_interconnect_0_cmd_demux_001;

	component CodecAudio_mm_interconnect_0_cmd_mux is
		port (
			clk                 : in  std_logic                     := 'X';             -- clk
			reset               : in  std_logic                     := 'X';             -- reset
			src_ready           : in  std_logic                     := 'X';             -- ready
			src_valid           : out std_logic;                                        -- valid
			src_data            : out std_logic_vector(97 downto 0);                    -- data
			src_channel         : out std_logic_vector(11 downto 0);                    -- channel
			src_startofpacket   : out std_logic;                                        -- startofpacket
			src_endofpacket     : out std_logic;                                        -- endofpacket
			sink0_ready         : out std_logic;                                        -- ready
			sink0_valid         : in  std_logic                     := 'X';             -- valid
			sink0_channel       : in  std_logic_vector(11 downto 0) := (others => 'X'); -- channel
			sink0_data          : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			sink0_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink0_endofpacket   : in  std_logic                     := 'X'              -- endofpacket
		);
	end component CodecAudio_mm_interconnect_0_cmd_mux;

	component CodecAudio_mm_interconnect_0_cmd_mux_005 is
		port (
			clk                 : in  std_logic                     := 'X';             -- clk
			reset               : in  std_logic                     := 'X';             -- reset
			src_ready           : in  std_logic                     := 'X';             -- ready
			src_valid           : out std_logic;                                        -- valid
			src_data            : out std_logic_vector(97 downto 0);                    -- data
			src_channel         : out std_logic_vector(11 downto 0);                    -- channel
			src_startofpacket   : out std_logic;                                        -- startofpacket
			src_endofpacket     : out std_logic;                                        -- endofpacket
			sink0_ready         : out std_logic;                                        -- ready
			sink0_valid         : in  std_logic                     := 'X';             -- valid
			sink0_channel       : in  std_logic_vector(11 downto 0) := (others => 'X'); -- channel
			sink0_data          : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			sink0_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink0_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			sink1_ready         : out std_logic;                                        -- ready
			sink1_valid         : in  std_logic                     := 'X';             -- valid
			sink1_channel       : in  std_logic_vector(11 downto 0) := (others => 'X'); -- channel
			sink1_data          : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			sink1_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink1_endofpacket   : in  std_logic                     := 'X'              -- endofpacket
		);
	end component CodecAudio_mm_interconnect_0_cmd_mux_005;

	component CodecAudio_mm_interconnect_0_rsp_demux is
		port (
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			sink_ready         : out std_logic;                                        -- ready
			sink_channel       : in  std_logic_vector(11 downto 0) := (others => 'X'); -- channel
			sink_data          : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			sink_valid         : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- valid
			src0_ready         : in  std_logic                     := 'X';             -- ready
			src0_valid         : out std_logic;                                        -- valid
			src0_data          : out std_logic_vector(97 downto 0);                    -- data
			src0_channel       : out std_logic_vector(11 downto 0);                    -- channel
			src0_startofpacket : out std_logic;                                        -- startofpacket
			src0_endofpacket   : out std_logic                                         -- endofpacket
		);
	end component CodecAudio_mm_interconnect_0_rsp_demux;

	component CodecAudio_mm_interconnect_0_rsp_demux_001 is
		port (
			clk                : in  std_logic                     := 'X';             -- clk
			reset              : in  std_logic                     := 'X';             -- reset
			sink_ready         : out std_logic;                                        -- ready
			sink_channel       : in  std_logic_vector(11 downto 0) := (others => 'X'); -- channel
			sink_data          : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			sink_valid         : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- valid
			src0_ready         : in  std_logic                     := 'X';             -- ready
			src0_valid         : out std_logic;                                        -- valid
			src0_data          : out std_logic_vector(97 downto 0);                    -- data
			src0_channel       : out std_logic_vector(11 downto 0);                    -- channel
			src0_startofpacket : out std_logic;                                        -- startofpacket
			src0_endofpacket   : out std_logic                                         -- endofpacket
		);
	end component CodecAudio_mm_interconnect_0_rsp_demux_001;

	component CodecAudio_mm_interconnect_0_rsp_mux is
		port (
			clk                  : in  std_logic                     := 'X';             -- clk
			reset                : in  std_logic                     := 'X';             -- reset
			src_ready            : in  std_logic                     := 'X';             -- ready
			src_valid            : out std_logic;                                        -- valid
			src_data             : out std_logic_vector(97 downto 0);                    -- data
			src_channel          : out std_logic_vector(11 downto 0);                    -- channel
			src_startofpacket    : out std_logic;                                        -- startofpacket
			src_endofpacket      : out std_logic;                                        -- endofpacket
			sink0_ready          : out std_logic;                                        -- ready
			sink0_valid          : in  std_logic                     := 'X';             -- valid
			sink0_channel        : in  std_logic_vector(11 downto 0) := (others => 'X'); -- channel
			sink0_data           : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			sink0_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			sink0_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			sink1_ready          : out std_logic;                                        -- ready
			sink1_valid          : in  std_logic                     := 'X';             -- valid
			sink1_channel        : in  std_logic_vector(11 downto 0) := (others => 'X'); -- channel
			sink1_data           : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			sink1_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			sink1_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			sink2_ready          : out std_logic;                                        -- ready
			sink2_valid          : in  std_logic                     := 'X';             -- valid
			sink2_channel        : in  std_logic_vector(11 downto 0) := (others => 'X'); -- channel
			sink2_data           : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			sink2_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			sink2_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			sink3_ready          : out std_logic;                                        -- ready
			sink3_valid          : in  std_logic                     := 'X';             -- valid
			sink3_channel        : in  std_logic_vector(11 downto 0) := (others => 'X'); -- channel
			sink3_data           : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			sink3_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			sink3_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			sink4_ready          : out std_logic;                                        -- ready
			sink4_valid          : in  std_logic                     := 'X';             -- valid
			sink4_channel        : in  std_logic_vector(11 downto 0) := (others => 'X'); -- channel
			sink4_data           : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			sink4_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			sink4_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			sink5_ready          : out std_logic;                                        -- ready
			sink5_valid          : in  std_logic                     := 'X';             -- valid
			sink5_channel        : in  std_logic_vector(11 downto 0) := (others => 'X'); -- channel
			sink5_data           : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			sink5_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			sink5_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			sink6_ready          : out std_logic;                                        -- ready
			sink6_valid          : in  std_logic                     := 'X';             -- valid
			sink6_channel        : in  std_logic_vector(11 downto 0) := (others => 'X'); -- channel
			sink6_data           : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			sink6_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			sink6_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			sink7_ready          : out std_logic;                                        -- ready
			sink7_valid          : in  std_logic                     := 'X';             -- valid
			sink7_channel        : in  std_logic_vector(11 downto 0) := (others => 'X'); -- channel
			sink7_data           : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			sink7_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			sink7_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			sink8_ready          : out std_logic;                                        -- ready
			sink8_valid          : in  std_logic                     := 'X';             -- valid
			sink8_channel        : in  std_logic_vector(11 downto 0) := (others => 'X'); -- channel
			sink8_data           : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			sink8_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			sink8_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			sink9_ready          : out std_logic;                                        -- ready
			sink9_valid          : in  std_logic                     := 'X';             -- valid
			sink9_channel        : in  std_logic_vector(11 downto 0) := (others => 'X'); -- channel
			sink9_data           : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			sink9_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			sink9_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			sink10_ready         : out std_logic;                                        -- ready
			sink10_valid         : in  std_logic                     := 'X';             -- valid
			sink10_channel       : in  std_logic_vector(11 downto 0) := (others => 'X'); -- channel
			sink10_data          : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			sink10_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink10_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			sink11_ready         : out std_logic;                                        -- ready
			sink11_valid         : in  std_logic                     := 'X';             -- valid
			sink11_channel       : in  std_logic_vector(11 downto 0) := (others => 'X'); -- channel
			sink11_data          : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			sink11_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink11_endofpacket   : in  std_logic                     := 'X'              -- endofpacket
		);
	end component CodecAudio_mm_interconnect_0_rsp_mux;

	component CodecAudio_mm_interconnect_0_rsp_mux_001 is
		port (
			clk                 : in  std_logic                     := 'X';             -- clk
			reset               : in  std_logic                     := 'X';             -- reset
			src_ready           : in  std_logic                     := 'X';             -- ready
			src_valid           : out std_logic;                                        -- valid
			src_data            : out std_logic_vector(97 downto 0);                    -- data
			src_channel         : out std_logic_vector(11 downto 0);                    -- channel
			src_startofpacket   : out std_logic;                                        -- startofpacket
			src_endofpacket     : out std_logic;                                        -- endofpacket
			sink0_ready         : out std_logic;                                        -- ready
			sink0_valid         : in  std_logic                     := 'X';             -- valid
			sink0_channel       : in  std_logic_vector(11 downto 0) := (others => 'X'); -- channel
			sink0_data          : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			sink0_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink0_endofpacket   : in  std_logic                     := 'X';             -- endofpacket
			sink1_ready         : out std_logic;                                        -- ready
			sink1_valid         : in  std_logic                     := 'X';             -- valid
			sink1_channel       : in  std_logic_vector(11 downto 0) := (others => 'X'); -- channel
			sink1_data          : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			sink1_startofpacket : in  std_logic                     := 'X';             -- startofpacket
			sink1_endofpacket   : in  std_logic                     := 'X'              -- endofpacket
		);
	end component CodecAudio_mm_interconnect_0_rsp_mux_001;

	component altera_avalon_st_handshake_clock_crosser is
		generic (
			DATA_WIDTH          : integer := 8;
			BITS_PER_SYMBOL     : integer := 8;
			USE_PACKETS         : integer := 0;
			USE_CHANNEL         : integer := 0;
			CHANNEL_WIDTH       : integer := 1;
			USE_ERROR           : integer := 0;
			ERROR_WIDTH         : integer := 1;
			VALID_SYNC_DEPTH    : integer := 2;
			READY_SYNC_DEPTH    : integer := 2;
			USE_OUTPUT_PIPELINE : integer := 1
		);
		port (
			in_clk            : in  std_logic                     := 'X';             -- clk
			in_reset          : in  std_logic                     := 'X';             -- reset
			out_clk           : in  std_logic                     := 'X';             -- clk
			out_reset         : in  std_logic                     := 'X';             -- reset
			in_ready          : out std_logic;                                        -- ready
			in_valid          : in  std_logic                     := 'X';             -- valid
			in_startofpacket  : in  std_logic                     := 'X';             -- startofpacket
			in_endofpacket    : in  std_logic                     := 'X';             -- endofpacket
			in_channel        : in  std_logic_vector(11 downto 0) := (others => 'X'); -- channel
			in_data           : in  std_logic_vector(97 downto 0) := (others => 'X'); -- data
			out_ready         : in  std_logic                     := 'X';             -- ready
			out_valid         : out std_logic;                                        -- valid
			out_startofpacket : out std_logic;                                        -- startofpacket
			out_endofpacket   : out std_logic;                                        -- endofpacket
			out_channel       : out std_logic_vector(11 downto 0);                    -- channel
			out_data          : out std_logic_vector(97 downto 0);                    -- data
			in_empty          : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- empty
			in_error          : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- error
			out_empty         : out std_logic_vector(0 downto 0);                     -- empty
			out_error         : out std_logic_vector(0 downto 0)                      -- error
		);
	end component altera_avalon_st_handshake_clock_crosser;

	component CodecAudio_mm_interconnect_0_avalon_st_adapter is
		generic (
			inBitsPerSymbol : integer := 8;
			inUsePackets    : integer := 0;
			inDataWidth     : integer := 8;
			inChannelWidth  : integer := 3;
			inErrorWidth    : integer := 2;
			inUseEmptyPort  : integer := 0;
			inUseValid      : integer := 1;
			inUseReady      : integer := 1;
			inReadyLatency  : integer := 0;
			outDataWidth    : integer := 32;
			outChannelWidth : integer := 3;
			outErrorWidth   : integer := 2;
			outUseEmptyPort : integer := 0;
			outUseValid     : integer := 1;
			outUseReady     : integer := 1;
			outReadyLatency : integer := 0
		);
		port (
			in_clk_0_clk   : in  std_logic                     := 'X';             -- clk
			in_rst_0_reset : in  std_logic                     := 'X';             -- reset
			in_0_data      : in  std_logic_vector(33 downto 0) := (others => 'X'); -- data
			in_0_valid     : in  std_logic                     := 'X';             -- valid
			in_0_ready     : out std_logic;                                        -- ready
			out_0_data     : out std_logic_vector(33 downto 0);                    -- data
			out_0_valid    : out std_logic;                                        -- valid
			out_0_ready    : in  std_logic                     := 'X';             -- ready
			out_0_error    : out std_logic_vector(0 downto 0)                      -- error
		);
	end component CodecAudio_mm_interconnect_0_avalon_st_adapter;

	component codecaudio_mm_interconnect_0_audio_avalon_audio_slave_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : in  std_logic_vector(19 downto 0) := (others => 'X'); -- address
			uav_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read               : in  std_logic                     := 'X';             -- read
			uav_write              : in  std_logic                     := 'X';             -- write
			uav_waitrequest        : out std_logic;                                        -- waitrequest
			uav_readdatavalid      : out std_logic;                                        -- readdatavalid
			uav_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock               : in  std_logic                     := 'X';             -- lock
			uav_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_address             : out std_logic_vector(1 downto 0);                     -- address
			av_write               : out std_logic;                                        -- write
			av_read                : out std_logic;                                        -- read
			av_readdata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			av_writedata           : out std_logic_vector(31 downto 0);                    -- writedata
			av_chipselect          : out std_logic;                                        -- chipselect
			av_begintransfer       : out std_logic;                                        -- begintransfer
			av_beginbursttransfer  : out std_logic;                                        -- beginbursttransfer
			av_burstcount          : out std_logic_vector(0 downto 0);                     -- burstcount
			av_byteenable          : out std_logic_vector(3 downto 0);                     -- byteenable
			av_readdatavalid       : in  std_logic                     := 'X';             -- readdatavalid
			av_waitrequest         : in  std_logic                     := 'X';             -- waitrequest
			av_writebyteenable     : out std_logic_vector(3 downto 0);                     -- writebyteenable
			av_lock                : out std_logic;                                        -- lock
			av_clken               : out std_logic;                                        -- clken
			uav_clken              : in  std_logic                     := 'X';             -- clken
			av_debugaccess         : out std_logic;                                        -- debugaccess
			av_outputenable        : out std_logic;                                        -- outputenable
			uav_response           : out std_logic_vector(1 downto 0);                     -- response
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponsevalid : out std_logic;                                        -- writeresponsevalid
			av_writeresponsevalid  : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component codecaudio_mm_interconnect_0_audio_avalon_audio_slave_translator;

	component codecaudio_mm_interconnect_0_audio_and_video_config_avalon_av_config_slave_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : in  std_logic_vector(19 downto 0) := (others => 'X'); -- address
			uav_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read               : in  std_logic                     := 'X';             -- read
			uav_write              : in  std_logic                     := 'X';             -- write
			uav_waitrequest        : out std_logic;                                        -- waitrequest
			uav_readdatavalid      : out std_logic;                                        -- readdatavalid
			uav_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock               : in  std_logic                     := 'X';             -- lock
			uav_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_address             : out std_logic_vector(1 downto 0);                     -- address
			av_write               : out std_logic;                                        -- write
			av_read                : out std_logic;                                        -- read
			av_readdata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			av_writedata           : out std_logic_vector(31 downto 0);                    -- writedata
			av_byteenable          : out std_logic_vector(3 downto 0);                     -- byteenable
			av_waitrequest         : in  std_logic                     := 'X';             -- waitrequest
			av_begintransfer       : out std_logic;                                        -- begintransfer
			av_beginbursttransfer  : out std_logic;                                        -- beginbursttransfer
			av_burstcount          : out std_logic_vector(0 downto 0);                     -- burstcount
			av_readdatavalid       : in  std_logic                     := 'X';             -- readdatavalid
			av_writebyteenable     : out std_logic_vector(3 downto 0);                     -- writebyteenable
			av_lock                : out std_logic;                                        -- lock
			av_chipselect          : out std_logic;                                        -- chipselect
			av_clken               : out std_logic;                                        -- clken
			uav_clken              : in  std_logic                     := 'X';             -- clken
			av_debugaccess         : out std_logic;                                        -- debugaccess
			av_outputenable        : out std_logic;                                        -- outputenable
			uav_response           : out std_logic_vector(1 downto 0);                     -- response
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponsevalid : out std_logic;                                        -- writeresponsevalid
			av_writeresponsevalid  : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component codecaudio_mm_interconnect_0_audio_and_video_config_avalon_av_config_slave_translator;

	component codecaudio_mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : in  std_logic_vector(19 downto 0) := (others => 'X'); -- address
			uav_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read               : in  std_logic                     := 'X';             -- read
			uav_write              : in  std_logic                     := 'X';             -- write
			uav_waitrequest        : out std_logic;                                        -- waitrequest
			uav_readdatavalid      : out std_logic;                                        -- readdatavalid
			uav_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock               : in  std_logic                     := 'X';             -- lock
			uav_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_address             : out std_logic_vector(0 downto 0);                     -- address
			av_write               : out std_logic;                                        -- write
			av_read                : out std_logic;                                        -- read
			av_readdata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			av_writedata           : out std_logic_vector(31 downto 0);                    -- writedata
			av_waitrequest         : in  std_logic                     := 'X';             -- waitrequest
			av_chipselect          : out std_logic;                                        -- chipselect
			av_begintransfer       : out std_logic;                                        -- begintransfer
			av_beginbursttransfer  : out std_logic;                                        -- beginbursttransfer
			av_burstcount          : out std_logic_vector(0 downto 0);                     -- burstcount
			av_byteenable          : out std_logic_vector(0 downto 0);                     -- byteenable
			av_readdatavalid       : in  std_logic                     := 'X';             -- readdatavalid
			av_writebyteenable     : out std_logic_vector(0 downto 0);                     -- writebyteenable
			av_lock                : out std_logic;                                        -- lock
			av_clken               : out std_logic;                                        -- clken
			uav_clken              : in  std_logic                     := 'X';             -- clken
			av_debugaccess         : out std_logic;                                        -- debugaccess
			av_outputenable        : out std_logic;                                        -- outputenable
			uav_response           : out std_logic_vector(1 downto 0);                     -- response
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponsevalid : out std_logic;                                        -- writeresponsevalid
			av_writeresponsevalid  : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component codecaudio_mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_translator;

	component codecaudio_mm_interconnect_0_ps2_avalon_ps2_slave_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : in  std_logic_vector(19 downto 0) := (others => 'X'); -- address
			uav_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read               : in  std_logic                     := 'X';             -- read
			uav_write              : in  std_logic                     := 'X';             -- write
			uav_waitrequest        : out std_logic;                                        -- waitrequest
			uav_readdatavalid      : out std_logic;                                        -- readdatavalid
			uav_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock               : in  std_logic                     := 'X';             -- lock
			uav_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_address             : out std_logic_vector(0 downto 0);                     -- address
			av_write               : out std_logic;                                        -- write
			av_read                : out std_logic;                                        -- read
			av_readdata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			av_writedata           : out std_logic_vector(31 downto 0);                    -- writedata
			av_byteenable          : out std_logic_vector(3 downto 0);                     -- byteenable
			av_waitrequest         : in  std_logic                     := 'X';             -- waitrequest
			av_chipselect          : out std_logic;                                        -- chipselect
			av_begintransfer       : out std_logic;                                        -- begintransfer
			av_beginbursttransfer  : out std_logic;                                        -- beginbursttransfer
			av_burstcount          : out std_logic_vector(0 downto 0);                     -- burstcount
			av_readdatavalid       : in  std_logic                     := 'X';             -- readdatavalid
			av_writebyteenable     : out std_logic_vector(3 downto 0);                     -- writebyteenable
			av_lock                : out std_logic;                                        -- lock
			av_clken               : out std_logic;                                        -- clken
			uav_clken              : in  std_logic                     := 'X';             -- clken
			av_debugaccess         : out std_logic;                                        -- debugaccess
			av_outputenable        : out std_logic;                                        -- outputenable
			uav_response           : out std_logic_vector(1 downto 0);                     -- response
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponsevalid : out std_logic;                                        -- writeresponsevalid
			av_writeresponsevalid  : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component codecaudio_mm_interconnect_0_ps2_avalon_ps2_slave_translator;

	component codecaudio_mm_interconnect_0_sysid_control_slave_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : in  std_logic_vector(19 downto 0) := (others => 'X'); -- address
			uav_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read               : in  std_logic                     := 'X';             -- read
			uav_write              : in  std_logic                     := 'X';             -- write
			uav_waitrequest        : out std_logic;                                        -- waitrequest
			uav_readdatavalid      : out std_logic;                                        -- readdatavalid
			uav_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock               : in  std_logic                     := 'X';             -- lock
			uav_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_address             : out std_logic_vector(0 downto 0);                     -- address
			av_readdata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			av_write               : out std_logic;                                        -- write
			av_read                : out std_logic;                                        -- read
			av_writedata           : out std_logic_vector(31 downto 0);                    -- writedata
			av_begintransfer       : out std_logic;                                        -- begintransfer
			av_beginbursttransfer  : out std_logic;                                        -- beginbursttransfer
			av_burstcount          : out std_logic_vector(0 downto 0);                     -- burstcount
			av_byteenable          : out std_logic_vector(3 downto 0);                     -- byteenable
			av_readdatavalid       : in  std_logic                     := 'X';             -- readdatavalid
			av_waitrequest         : in  std_logic                     := 'X';             -- waitrequest
			av_writebyteenable     : out std_logic_vector(3 downto 0);                     -- writebyteenable
			av_lock                : out std_logic;                                        -- lock
			av_chipselect          : out std_logic;                                        -- chipselect
			av_clken               : out std_logic;                                        -- clken
			uav_clken              : in  std_logic                     := 'X';             -- clken
			av_debugaccess         : out std_logic;                                        -- debugaccess
			av_outputenable        : out std_logic;                                        -- outputenable
			uav_response           : out std_logic_vector(1 downto 0);                     -- response
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponsevalid : out std_logic;                                        -- writeresponsevalid
			av_writeresponsevalid  : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component codecaudio_mm_interconnect_0_sysid_control_slave_translator;

	component codecaudio_mm_interconnect_0_cpu_debug_mem_slave_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : in  std_logic_vector(19 downto 0) := (others => 'X'); -- address
			uav_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read               : in  std_logic                     := 'X';             -- read
			uav_write              : in  std_logic                     := 'X';             -- write
			uav_waitrequest        : out std_logic;                                        -- waitrequest
			uav_readdatavalid      : out std_logic;                                        -- readdatavalid
			uav_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock               : in  std_logic                     := 'X';             -- lock
			uav_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_address             : out std_logic_vector(8 downto 0);                     -- address
			av_write               : out std_logic;                                        -- write
			av_read                : out std_logic;                                        -- read
			av_readdata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			av_writedata           : out std_logic_vector(31 downto 0);                    -- writedata
			av_byteenable          : out std_logic_vector(3 downto 0);                     -- byteenable
			av_waitrequest         : in  std_logic                     := 'X';             -- waitrequest
			av_debugaccess         : out std_logic;                                        -- debugaccess
			av_begintransfer       : out std_logic;                                        -- begintransfer
			av_beginbursttransfer  : out std_logic;                                        -- beginbursttransfer
			av_burstcount          : out std_logic_vector(0 downto 0);                     -- burstcount
			av_readdatavalid       : in  std_logic                     := 'X';             -- readdatavalid
			av_writebyteenable     : out std_logic_vector(3 downto 0);                     -- writebyteenable
			av_lock                : out std_logic;                                        -- lock
			av_chipselect          : out std_logic;                                        -- chipselect
			av_clken               : out std_logic;                                        -- clken
			uav_clken              : in  std_logic                     := 'X';             -- clken
			av_outputenable        : out std_logic;                                        -- outputenable
			uav_response           : out std_logic_vector(1 downto 0);                     -- response
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponsevalid : out std_logic;                                        -- writeresponsevalid
			av_writeresponsevalid  : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component codecaudio_mm_interconnect_0_cpu_debug_mem_slave_translator;

	component codecaudio_mm_interconnect_0_onchipmem_s1_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : in  std_logic_vector(19 downto 0) := (others => 'X'); -- address
			uav_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read               : in  std_logic                     := 'X';             -- read
			uav_write              : in  std_logic                     := 'X';             -- write
			uav_waitrequest        : out std_logic;                                        -- waitrequest
			uav_readdatavalid      : out std_logic;                                        -- readdatavalid
			uav_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock               : in  std_logic                     := 'X';             -- lock
			uav_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_address             : out std_logic_vector(15 downto 0);                    -- address
			av_write               : out std_logic;                                        -- write
			av_readdata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			av_writedata           : out std_logic_vector(31 downto 0);                    -- writedata
			av_byteenable          : out std_logic_vector(3 downto 0);                     -- byteenable
			av_chipselect          : out std_logic;                                        -- chipselect
			av_clken               : out std_logic;                                        -- clken
			av_read                : out std_logic;                                        -- read
			av_begintransfer       : out std_logic;                                        -- begintransfer
			av_beginbursttransfer  : out std_logic;                                        -- beginbursttransfer
			av_burstcount          : out std_logic_vector(0 downto 0);                     -- burstcount
			av_readdatavalid       : in  std_logic                     := 'X';             -- readdatavalid
			av_waitrequest         : in  std_logic                     := 'X';             -- waitrequest
			av_writebyteenable     : out std_logic_vector(3 downto 0);                     -- writebyteenable
			av_lock                : out std_logic;                                        -- lock
			uav_clken              : in  std_logic                     := 'X';             -- clken
			av_debugaccess         : out std_logic;                                        -- debugaccess
			av_outputenable        : out std_logic;                                        -- outputenable
			uav_response           : out std_logic_vector(1 downto 0);                     -- response
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponsevalid : out std_logic;                                        -- writeresponsevalid
			av_writeresponsevalid  : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component codecaudio_mm_interconnect_0_onchipmem_s1_translator;

	component codecaudio_mm_interconnect_0_timer0_s1_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : in  std_logic_vector(19 downto 0) := (others => 'X'); -- address
			uav_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read               : in  std_logic                     := 'X';             -- read
			uav_write              : in  std_logic                     := 'X';             -- write
			uav_waitrequest        : out std_logic;                                        -- waitrequest
			uav_readdatavalid      : out std_logic;                                        -- readdatavalid
			uav_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock               : in  std_logic                     := 'X';             -- lock
			uav_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_address             : out std_logic_vector(2 downto 0);                     -- address
			av_write               : out std_logic;                                        -- write
			av_readdata            : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			av_writedata           : out std_logic_vector(15 downto 0);                    -- writedata
			av_chipselect          : out std_logic;                                        -- chipselect
			av_read                : out std_logic;                                        -- read
			av_begintransfer       : out std_logic;                                        -- begintransfer
			av_beginbursttransfer  : out std_logic;                                        -- beginbursttransfer
			av_burstcount          : out std_logic_vector(0 downto 0);                     -- burstcount
			av_byteenable          : out std_logic_vector(0 downto 0);                     -- byteenable
			av_readdatavalid       : in  std_logic                     := 'X';             -- readdatavalid
			av_waitrequest         : in  std_logic                     := 'X';             -- waitrequest
			av_writebyteenable     : out std_logic_vector(0 downto 0);                     -- writebyteenable
			av_lock                : out std_logic;                                        -- lock
			av_clken               : out std_logic;                                        -- clken
			uav_clken              : in  std_logic                     := 'X';             -- clken
			av_debugaccess         : out std_logic;                                        -- debugaccess
			av_outputenable        : out std_logic;                                        -- outputenable
			uav_response           : out std_logic_vector(1 downto 0);                     -- response
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponsevalid : out std_logic;                                        -- writeresponsevalid
			av_writeresponsevalid  : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component codecaudio_mm_interconnect_0_timer0_s1_translator;

	component codecaudio_mm_interconnect_0_toggleaccmat_s1_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : in  std_logic_vector(19 downto 0) := (others => 'X'); -- address
			uav_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read               : in  std_logic                     := 'X';             -- read
			uav_write              : in  std_logic                     := 'X';             -- write
			uav_waitrequest        : out std_logic;                                        -- waitrequest
			uav_readdatavalid      : out std_logic;                                        -- readdatavalid
			uav_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock               : in  std_logic                     := 'X';             -- lock
			uav_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_address             : out std_logic_vector(1 downto 0);                     -- address
			av_write               : out std_logic;                                        -- write
			av_readdata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			av_writedata           : out std_logic_vector(31 downto 0);                    -- writedata
			av_chipselect          : out std_logic;                                        -- chipselect
			av_read                : out std_logic;                                        -- read
			av_begintransfer       : out std_logic;                                        -- begintransfer
			av_beginbursttransfer  : out std_logic;                                        -- beginbursttransfer
			av_burstcount          : out std_logic_vector(0 downto 0);                     -- burstcount
			av_byteenable          : out std_logic_vector(0 downto 0);                     -- byteenable
			av_readdatavalid       : in  std_logic                     := 'X';             -- readdatavalid
			av_waitrequest         : in  std_logic                     := 'X';             -- waitrequest
			av_writebyteenable     : out std_logic_vector(0 downto 0);                     -- writebyteenable
			av_lock                : out std_logic;                                        -- lock
			av_clken               : out std_logic;                                        -- clken
			uav_clken              : in  std_logic                     := 'X';             -- clken
			av_debugaccess         : out std_logic;                                        -- debugaccess
			av_outputenable        : out std_logic;                                        -- outputenable
			uav_response           : out std_logic_vector(1 downto 0);                     -- response
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponsevalid : out std_logic;                                        -- writeresponsevalid
			av_writeresponsevalid  : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component codecaudio_mm_interconnect_0_toggleaccmat_s1_translator;

	component codecaudio_mm_interconnect_0_datafromaccmat_s1_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : in  std_logic_vector(19 downto 0) := (others => 'X'); -- address
			uav_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read               : in  std_logic                     := 'X';             -- read
			uav_write              : in  std_logic                     := 'X';             -- write
			uav_waitrequest        : out std_logic;                                        -- waitrequest
			uav_readdatavalid      : out std_logic;                                        -- readdatavalid
			uav_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock               : in  std_logic                     := 'X';             -- lock
			uav_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_address             : out std_logic_vector(1 downto 0);                     -- address
			av_readdata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			av_write               : out std_logic;                                        -- write
			av_read                : out std_logic;                                        -- read
			av_writedata           : out std_logic_vector(31 downto 0);                    -- writedata
			av_begintransfer       : out std_logic;                                        -- begintransfer
			av_beginbursttransfer  : out std_logic;                                        -- beginbursttransfer
			av_burstcount          : out std_logic_vector(0 downto 0);                     -- burstcount
			av_byteenable          : out std_logic_vector(0 downto 0);                     -- byteenable
			av_readdatavalid       : in  std_logic                     := 'X';             -- readdatavalid
			av_waitrequest         : in  std_logic                     := 'X';             -- waitrequest
			av_writebyteenable     : out std_logic_vector(0 downto 0);                     -- writebyteenable
			av_lock                : out std_logic;                                        -- lock
			av_chipselect          : out std_logic;                                        -- chipselect
			av_clken               : out std_logic;                                        -- clken
			uav_clken              : in  std_logic                     := 'X';             -- clken
			av_debugaccess         : out std_logic;                                        -- debugaccess
			av_outputenable        : out std_logic;                                        -- outputenable
			uav_response           : out std_logic_vector(1 downto 0);                     -- response
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponsevalid : out std_logic;                                        -- writeresponsevalid
			av_writeresponsevalid  : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component codecaudio_mm_interconnect_0_datafromaccmat_s1_translator;

	component codecaudio_mm_interconnect_0_cpu_data_master_translator is
		generic (
			AV_ADDRESS_W                : integer := 32;
			AV_DATA_W                   : integer := 32;
			AV_BURSTCOUNT_W             : integer := 4;
			AV_BYTEENABLE_W             : integer := 4;
			UAV_ADDRESS_W               : integer := 38;
			UAV_BURSTCOUNT_W            : integer := 10;
			USE_READ                    : integer := 1;
			USE_WRITE                   : integer := 1;
			USE_BEGINBURSTTRANSFER      : integer := 0;
			USE_BEGINTRANSFER           : integer := 0;
			USE_CHIPSELECT              : integer := 0;
			USE_BURSTCOUNT              : integer := 1;
			USE_READDATAVALID           : integer := 1;
			USE_WAITREQUEST             : integer := 1;
			USE_READRESPONSE            : integer := 0;
			USE_WRITERESPONSE           : integer := 0;
			AV_SYMBOLS_PER_WORD         : integer := 4;
			AV_ADDRESS_SYMBOLS          : integer := 0;
			AV_BURSTCOUNT_SYMBOLS       : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR  : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR : integer := 0;
			AV_LINEWRAPBURSTS           : integer := 0;
			AV_REGISTERINCOMINGSIGNALS  : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : out std_logic_vector(19 downto 0);                    -- address
			uav_burstcount         : out std_logic_vector(2 downto 0);                     -- burstcount
			uav_read               : out std_logic;                                        -- read
			uav_write              : out std_logic;                                        -- write
			uav_waitrequest        : in  std_logic                     := 'X';             -- waitrequest
			uav_readdatavalid      : in  std_logic                     := 'X';             -- readdatavalid
			uav_byteenable         : out std_logic_vector(3 downto 0);                     -- byteenable
			uav_readdata           : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			uav_writedata          : out std_logic_vector(31 downto 0);                    -- writedata
			uav_lock               : out std_logic;                                        -- lock
			uav_debugaccess        : out std_logic;                                        -- debugaccess
			av_address             : in  std_logic_vector(19 downto 0) := (others => 'X'); -- address
			av_waitrequest         : out std_logic;                                        -- waitrequest
			av_byteenable          : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			av_read                : in  std_logic                     := 'X';             -- read
			av_readdata            : out std_logic_vector(31 downto 0);                    -- readdata
			av_write               : in  std_logic                     := 'X';             -- write
			av_writedata           : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			av_debugaccess         : in  std_logic                     := 'X';             -- debugaccess
			av_burstcount          : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- burstcount
			av_beginbursttransfer  : in  std_logic                     := 'X';             -- beginbursttransfer
			av_begintransfer       : in  std_logic                     := 'X';             -- begintransfer
			av_chipselect          : in  std_logic                     := 'X';             -- chipselect
			av_readdatavalid       : out std_logic;                                        -- readdatavalid
			av_lock                : in  std_logic                     := 'X';             -- lock
			uav_clken              : out std_logic;                                        -- clken
			av_clken               : in  std_logic                     := 'X';             -- clken
			uav_response           : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			av_response            : out std_logic_vector(1 downto 0);                     -- response
			uav_writeresponsevalid : in  std_logic                     := 'X';             -- writeresponsevalid
			av_writeresponsevalid  : out std_logic                                         -- writeresponsevalid
		);
	end component codecaudio_mm_interconnect_0_cpu_data_master_translator;

	component codecaudio_mm_interconnect_0_cpu_instruction_master_translator is
		generic (
			AV_ADDRESS_W                : integer := 32;
			AV_DATA_W                   : integer := 32;
			AV_BURSTCOUNT_W             : integer := 4;
			AV_BYTEENABLE_W             : integer := 4;
			UAV_ADDRESS_W               : integer := 38;
			UAV_BURSTCOUNT_W            : integer := 10;
			USE_READ                    : integer := 1;
			USE_WRITE                   : integer := 1;
			USE_BEGINBURSTTRANSFER      : integer := 0;
			USE_BEGINTRANSFER           : integer := 0;
			USE_CHIPSELECT              : integer := 0;
			USE_BURSTCOUNT              : integer := 1;
			USE_READDATAVALID           : integer := 1;
			USE_WAITREQUEST             : integer := 1;
			USE_READRESPONSE            : integer := 0;
			USE_WRITERESPONSE           : integer := 0;
			AV_SYMBOLS_PER_WORD         : integer := 4;
			AV_ADDRESS_SYMBOLS          : integer := 0;
			AV_BURSTCOUNT_SYMBOLS       : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR  : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR : integer := 0;
			AV_LINEWRAPBURSTS           : integer := 0;
			AV_REGISTERINCOMINGSIGNALS  : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : out std_logic_vector(19 downto 0);                    -- address
			uav_burstcount         : out std_logic_vector(2 downto 0);                     -- burstcount
			uav_read               : out std_logic;                                        -- read
			uav_write              : out std_logic;                                        -- write
			uav_waitrequest        : in  std_logic                     := 'X';             -- waitrequest
			uav_readdatavalid      : in  std_logic                     := 'X';             -- readdatavalid
			uav_byteenable         : out std_logic_vector(3 downto 0);                     -- byteenable
			uav_readdata           : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			uav_writedata          : out std_logic_vector(31 downto 0);                    -- writedata
			uav_lock               : out std_logic;                                        -- lock
			uav_debugaccess        : out std_logic;                                        -- debugaccess
			av_address             : in  std_logic_vector(19 downto 0) := (others => 'X'); -- address
			av_waitrequest         : out std_logic;                                        -- waitrequest
			av_read                : in  std_logic                     := 'X';             -- read
			av_readdata            : out std_logic_vector(31 downto 0);                    -- readdata
			av_burstcount          : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- burstcount
			av_byteenable          : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			av_beginbursttransfer  : in  std_logic                     := 'X';             -- beginbursttransfer
			av_begintransfer       : in  std_logic                     := 'X';             -- begintransfer
			av_chipselect          : in  std_logic                     := 'X';             -- chipselect
			av_readdatavalid       : out std_logic;                                        -- readdatavalid
			av_write               : in  std_logic                     := 'X';             -- write
			av_writedata           : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			av_lock                : in  std_logic                     := 'X';             -- lock
			av_debugaccess         : in  std_logic                     := 'X';             -- debugaccess
			uav_clken              : out std_logic;                                        -- clken
			av_clken               : in  std_logic                     := 'X';             -- clken
			uav_response           : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			av_response            : out std_logic_vector(1 downto 0);                     -- response
			uav_writeresponsevalid : in  std_logic                     := 'X';             -- writeresponsevalid
			av_writeresponsevalid  : out std_logic                                         -- writeresponsevalid
		);
	end component codecaudio_mm_interconnect_0_cpu_instruction_master_translator;

	signal cpu_data_master_translator_avalon_universal_master_0_waitrequest               : std_logic;                     -- cpu_data_master_agent:av_waitrequest -> cpu_data_master_translator:uav_waitrequest
	signal cpu_data_master_translator_avalon_universal_master_0_readdata                  : std_logic_vector(31 downto 0); -- cpu_data_master_agent:av_readdata -> cpu_data_master_translator:uav_readdata
	signal cpu_data_master_translator_avalon_universal_master_0_debugaccess               : std_logic;                     -- cpu_data_master_translator:uav_debugaccess -> cpu_data_master_agent:av_debugaccess
	signal cpu_data_master_translator_avalon_universal_master_0_address                   : std_logic_vector(19 downto 0); -- cpu_data_master_translator:uav_address -> cpu_data_master_agent:av_address
	signal cpu_data_master_translator_avalon_universal_master_0_read                      : std_logic;                     -- cpu_data_master_translator:uav_read -> cpu_data_master_agent:av_read
	signal cpu_data_master_translator_avalon_universal_master_0_byteenable                : std_logic_vector(3 downto 0);  -- cpu_data_master_translator:uav_byteenable -> cpu_data_master_agent:av_byteenable
	signal cpu_data_master_translator_avalon_universal_master_0_readdatavalid             : std_logic;                     -- cpu_data_master_agent:av_readdatavalid -> cpu_data_master_translator:uav_readdatavalid
	signal cpu_data_master_translator_avalon_universal_master_0_lock                      : std_logic;                     -- cpu_data_master_translator:uav_lock -> cpu_data_master_agent:av_lock
	signal cpu_data_master_translator_avalon_universal_master_0_write                     : std_logic;                     -- cpu_data_master_translator:uav_write -> cpu_data_master_agent:av_write
	signal cpu_data_master_translator_avalon_universal_master_0_writedata                 : std_logic_vector(31 downto 0); -- cpu_data_master_translator:uav_writedata -> cpu_data_master_agent:av_writedata
	signal cpu_data_master_translator_avalon_universal_master_0_burstcount                : std_logic_vector(2 downto 0);  -- cpu_data_master_translator:uav_burstcount -> cpu_data_master_agent:av_burstcount
	signal rsp_mux_src_valid                                                              : std_logic;                     -- rsp_mux:src_valid -> cpu_data_master_agent:rp_valid
	signal rsp_mux_src_data                                                               : std_logic_vector(97 downto 0); -- rsp_mux:src_data -> cpu_data_master_agent:rp_data
	signal rsp_mux_src_ready                                                              : std_logic;                     -- cpu_data_master_agent:rp_ready -> rsp_mux:src_ready
	signal rsp_mux_src_channel                                                            : std_logic_vector(11 downto 0); -- rsp_mux:src_channel -> cpu_data_master_agent:rp_channel
	signal rsp_mux_src_startofpacket                                                      : std_logic;                     -- rsp_mux:src_startofpacket -> cpu_data_master_agent:rp_startofpacket
	signal rsp_mux_src_endofpacket                                                        : std_logic;                     -- rsp_mux:src_endofpacket -> cpu_data_master_agent:rp_endofpacket
	signal cpu_instruction_master_translator_avalon_universal_master_0_waitrequest        : std_logic;                     -- cpu_instruction_master_agent:av_waitrequest -> cpu_instruction_master_translator:uav_waitrequest
	signal cpu_instruction_master_translator_avalon_universal_master_0_readdata           : std_logic_vector(31 downto 0); -- cpu_instruction_master_agent:av_readdata -> cpu_instruction_master_translator:uav_readdata
	signal cpu_instruction_master_translator_avalon_universal_master_0_debugaccess        : std_logic;                     -- cpu_instruction_master_translator:uav_debugaccess -> cpu_instruction_master_agent:av_debugaccess
	signal cpu_instruction_master_translator_avalon_universal_master_0_address            : std_logic_vector(19 downto 0); -- cpu_instruction_master_translator:uav_address -> cpu_instruction_master_agent:av_address
	signal cpu_instruction_master_translator_avalon_universal_master_0_read               : std_logic;                     -- cpu_instruction_master_translator:uav_read -> cpu_instruction_master_agent:av_read
	signal cpu_instruction_master_translator_avalon_universal_master_0_byteenable         : std_logic_vector(3 downto 0);  -- cpu_instruction_master_translator:uav_byteenable -> cpu_instruction_master_agent:av_byteenable
	signal cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid      : std_logic;                     -- cpu_instruction_master_agent:av_readdatavalid -> cpu_instruction_master_translator:uav_readdatavalid
	signal cpu_instruction_master_translator_avalon_universal_master_0_lock               : std_logic;                     -- cpu_instruction_master_translator:uav_lock -> cpu_instruction_master_agent:av_lock
	signal cpu_instruction_master_translator_avalon_universal_master_0_write              : std_logic;                     -- cpu_instruction_master_translator:uav_write -> cpu_instruction_master_agent:av_write
	signal cpu_instruction_master_translator_avalon_universal_master_0_writedata          : std_logic_vector(31 downto 0); -- cpu_instruction_master_translator:uav_writedata -> cpu_instruction_master_agent:av_writedata
	signal cpu_instruction_master_translator_avalon_universal_master_0_burstcount         : std_logic_vector(2 downto 0);  -- cpu_instruction_master_translator:uav_burstcount -> cpu_instruction_master_agent:av_burstcount
	signal rsp_mux_001_src_valid                                                          : std_logic;                     -- rsp_mux_001:src_valid -> cpu_instruction_master_agent:rp_valid
	signal rsp_mux_001_src_data                                                           : std_logic_vector(97 downto 0); -- rsp_mux_001:src_data -> cpu_instruction_master_agent:rp_data
	signal rsp_mux_001_src_ready                                                          : std_logic;                     -- cpu_instruction_master_agent:rp_ready -> rsp_mux_001:src_ready
	signal rsp_mux_001_src_channel                                                        : std_logic_vector(11 downto 0); -- rsp_mux_001:src_channel -> cpu_instruction_master_agent:rp_channel
	signal rsp_mux_001_src_startofpacket                                                  : std_logic;                     -- rsp_mux_001:src_startofpacket -> cpu_instruction_master_agent:rp_startofpacket
	signal rsp_mux_001_src_endofpacket                                                    : std_logic;                     -- rsp_mux_001:src_endofpacket -> cpu_instruction_master_agent:rp_endofpacket
	signal audio_avalon_audio_slave_agent_m0_readdata                                     : std_logic_vector(31 downto 0); -- audio_avalon_audio_slave_translator:uav_readdata -> audio_avalon_audio_slave_agent:m0_readdata
	signal audio_avalon_audio_slave_agent_m0_waitrequest                                  : std_logic;                     -- audio_avalon_audio_slave_translator:uav_waitrequest -> audio_avalon_audio_slave_agent:m0_waitrequest
	signal audio_avalon_audio_slave_agent_m0_debugaccess                                  : std_logic;                     -- audio_avalon_audio_slave_agent:m0_debugaccess -> audio_avalon_audio_slave_translator:uav_debugaccess
	signal audio_avalon_audio_slave_agent_m0_address                                      : std_logic_vector(19 downto 0); -- audio_avalon_audio_slave_agent:m0_address -> audio_avalon_audio_slave_translator:uav_address
	signal audio_avalon_audio_slave_agent_m0_byteenable                                   : std_logic_vector(3 downto 0);  -- audio_avalon_audio_slave_agent:m0_byteenable -> audio_avalon_audio_slave_translator:uav_byteenable
	signal audio_avalon_audio_slave_agent_m0_read                                         : std_logic;                     -- audio_avalon_audio_slave_agent:m0_read -> audio_avalon_audio_slave_translator:uav_read
	signal audio_avalon_audio_slave_agent_m0_readdatavalid                                : std_logic;                     -- audio_avalon_audio_slave_translator:uav_readdatavalid -> audio_avalon_audio_slave_agent:m0_readdatavalid
	signal audio_avalon_audio_slave_agent_m0_lock                                         : std_logic;                     -- audio_avalon_audio_slave_agent:m0_lock -> audio_avalon_audio_slave_translator:uav_lock
	signal audio_avalon_audio_slave_agent_m0_writedata                                    : std_logic_vector(31 downto 0); -- audio_avalon_audio_slave_agent:m0_writedata -> audio_avalon_audio_slave_translator:uav_writedata
	signal audio_avalon_audio_slave_agent_m0_write                                        : std_logic;                     -- audio_avalon_audio_slave_agent:m0_write -> audio_avalon_audio_slave_translator:uav_write
	signal audio_avalon_audio_slave_agent_m0_burstcount                                   : std_logic_vector(2 downto 0);  -- audio_avalon_audio_slave_agent:m0_burstcount -> audio_avalon_audio_slave_translator:uav_burstcount
	signal audio_avalon_audio_slave_agent_rf_source_valid                                 : std_logic;                     -- audio_avalon_audio_slave_agent:rf_source_valid -> audio_avalon_audio_slave_agent_rsp_fifo:in_valid
	signal audio_avalon_audio_slave_agent_rf_source_data                                  : std_logic_vector(98 downto 0); -- audio_avalon_audio_slave_agent:rf_source_data -> audio_avalon_audio_slave_agent_rsp_fifo:in_data
	signal audio_avalon_audio_slave_agent_rf_source_ready                                 : std_logic;                     -- audio_avalon_audio_slave_agent_rsp_fifo:in_ready -> audio_avalon_audio_slave_agent:rf_source_ready
	signal audio_avalon_audio_slave_agent_rf_source_startofpacket                         : std_logic;                     -- audio_avalon_audio_slave_agent:rf_source_startofpacket -> audio_avalon_audio_slave_agent_rsp_fifo:in_startofpacket
	signal audio_avalon_audio_slave_agent_rf_source_endofpacket                           : std_logic;                     -- audio_avalon_audio_slave_agent:rf_source_endofpacket -> audio_avalon_audio_slave_agent_rsp_fifo:in_endofpacket
	signal audio_avalon_audio_slave_agent_rsp_fifo_out_valid                              : std_logic;                     -- audio_avalon_audio_slave_agent_rsp_fifo:out_valid -> audio_avalon_audio_slave_agent:rf_sink_valid
	signal audio_avalon_audio_slave_agent_rsp_fifo_out_data                               : std_logic_vector(98 downto 0); -- audio_avalon_audio_slave_agent_rsp_fifo:out_data -> audio_avalon_audio_slave_agent:rf_sink_data
	signal audio_avalon_audio_slave_agent_rsp_fifo_out_ready                              : std_logic;                     -- audio_avalon_audio_slave_agent:rf_sink_ready -> audio_avalon_audio_slave_agent_rsp_fifo:out_ready
	signal audio_avalon_audio_slave_agent_rsp_fifo_out_startofpacket                      : std_logic;                     -- audio_avalon_audio_slave_agent_rsp_fifo:out_startofpacket -> audio_avalon_audio_slave_agent:rf_sink_startofpacket
	signal audio_avalon_audio_slave_agent_rsp_fifo_out_endofpacket                        : std_logic;                     -- audio_avalon_audio_slave_agent_rsp_fifo:out_endofpacket -> audio_avalon_audio_slave_agent:rf_sink_endofpacket
	signal audio_avalon_audio_slave_agent_rdata_fifo_src_valid                            : std_logic;                     -- audio_avalon_audio_slave_agent:rdata_fifo_src_valid -> audio_avalon_audio_slave_agent_rdata_fifo:in_valid
	signal audio_avalon_audio_slave_agent_rdata_fifo_src_data                             : std_logic_vector(33 downto 0); -- audio_avalon_audio_slave_agent:rdata_fifo_src_data -> audio_avalon_audio_slave_agent_rdata_fifo:in_data
	signal audio_avalon_audio_slave_agent_rdata_fifo_src_ready                            : std_logic;                     -- audio_avalon_audio_slave_agent_rdata_fifo:in_ready -> audio_avalon_audio_slave_agent:rdata_fifo_src_ready
	signal cmd_mux_src_valid                                                              : std_logic;                     -- cmd_mux:src_valid -> audio_avalon_audio_slave_agent:cp_valid
	signal cmd_mux_src_data                                                               : std_logic_vector(97 downto 0); -- cmd_mux:src_data -> audio_avalon_audio_slave_agent:cp_data
	signal cmd_mux_src_ready                                                              : std_logic;                     -- audio_avalon_audio_slave_agent:cp_ready -> cmd_mux:src_ready
	signal cmd_mux_src_channel                                                            : std_logic_vector(11 downto 0); -- cmd_mux:src_channel -> audio_avalon_audio_slave_agent:cp_channel
	signal cmd_mux_src_startofpacket                                                      : std_logic;                     -- cmd_mux:src_startofpacket -> audio_avalon_audio_slave_agent:cp_startofpacket
	signal cmd_mux_src_endofpacket                                                        : std_logic;                     -- cmd_mux:src_endofpacket -> audio_avalon_audio_slave_agent:cp_endofpacket
	signal audio_and_video_config_avalon_av_config_slave_agent_m0_readdata                : std_logic_vector(31 downto 0); -- audio_and_video_config_avalon_av_config_slave_translator:uav_readdata -> audio_and_video_config_avalon_av_config_slave_agent:m0_readdata
	signal audio_and_video_config_avalon_av_config_slave_agent_m0_waitrequest             : std_logic;                     -- audio_and_video_config_avalon_av_config_slave_translator:uav_waitrequest -> audio_and_video_config_avalon_av_config_slave_agent:m0_waitrequest
	signal audio_and_video_config_avalon_av_config_slave_agent_m0_debugaccess             : std_logic;                     -- audio_and_video_config_avalon_av_config_slave_agent:m0_debugaccess -> audio_and_video_config_avalon_av_config_slave_translator:uav_debugaccess
	signal audio_and_video_config_avalon_av_config_slave_agent_m0_address                 : std_logic_vector(19 downto 0); -- audio_and_video_config_avalon_av_config_slave_agent:m0_address -> audio_and_video_config_avalon_av_config_slave_translator:uav_address
	signal audio_and_video_config_avalon_av_config_slave_agent_m0_byteenable              : std_logic_vector(3 downto 0);  -- audio_and_video_config_avalon_av_config_slave_agent:m0_byteenable -> audio_and_video_config_avalon_av_config_slave_translator:uav_byteenable
	signal audio_and_video_config_avalon_av_config_slave_agent_m0_read                    : std_logic;                     -- audio_and_video_config_avalon_av_config_slave_agent:m0_read -> audio_and_video_config_avalon_av_config_slave_translator:uav_read
	signal audio_and_video_config_avalon_av_config_slave_agent_m0_readdatavalid           : std_logic;                     -- audio_and_video_config_avalon_av_config_slave_translator:uav_readdatavalid -> audio_and_video_config_avalon_av_config_slave_agent:m0_readdatavalid
	signal audio_and_video_config_avalon_av_config_slave_agent_m0_lock                    : std_logic;                     -- audio_and_video_config_avalon_av_config_slave_agent:m0_lock -> audio_and_video_config_avalon_av_config_slave_translator:uav_lock
	signal audio_and_video_config_avalon_av_config_slave_agent_m0_writedata               : std_logic_vector(31 downto 0); -- audio_and_video_config_avalon_av_config_slave_agent:m0_writedata -> audio_and_video_config_avalon_av_config_slave_translator:uav_writedata
	signal audio_and_video_config_avalon_av_config_slave_agent_m0_write                   : std_logic;                     -- audio_and_video_config_avalon_av_config_slave_agent:m0_write -> audio_and_video_config_avalon_av_config_slave_translator:uav_write
	signal audio_and_video_config_avalon_av_config_slave_agent_m0_burstcount              : std_logic_vector(2 downto 0);  -- audio_and_video_config_avalon_av_config_slave_agent:m0_burstcount -> audio_and_video_config_avalon_av_config_slave_translator:uav_burstcount
	signal audio_and_video_config_avalon_av_config_slave_agent_rf_source_valid            : std_logic;                     -- audio_and_video_config_avalon_av_config_slave_agent:rf_source_valid -> audio_and_video_config_avalon_av_config_slave_agent_rsp_fifo:in_valid
	signal audio_and_video_config_avalon_av_config_slave_agent_rf_source_data             : std_logic_vector(98 downto 0); -- audio_and_video_config_avalon_av_config_slave_agent:rf_source_data -> audio_and_video_config_avalon_av_config_slave_agent_rsp_fifo:in_data
	signal audio_and_video_config_avalon_av_config_slave_agent_rf_source_ready            : std_logic;                     -- audio_and_video_config_avalon_av_config_slave_agent_rsp_fifo:in_ready -> audio_and_video_config_avalon_av_config_slave_agent:rf_source_ready
	signal audio_and_video_config_avalon_av_config_slave_agent_rf_source_startofpacket    : std_logic;                     -- audio_and_video_config_avalon_av_config_slave_agent:rf_source_startofpacket -> audio_and_video_config_avalon_av_config_slave_agent_rsp_fifo:in_startofpacket
	signal audio_and_video_config_avalon_av_config_slave_agent_rf_source_endofpacket      : std_logic;                     -- audio_and_video_config_avalon_av_config_slave_agent:rf_source_endofpacket -> audio_and_video_config_avalon_av_config_slave_agent_rsp_fifo:in_endofpacket
	signal audio_and_video_config_avalon_av_config_slave_agent_rsp_fifo_out_valid         : std_logic;                     -- audio_and_video_config_avalon_av_config_slave_agent_rsp_fifo:out_valid -> audio_and_video_config_avalon_av_config_slave_agent:rf_sink_valid
	signal audio_and_video_config_avalon_av_config_slave_agent_rsp_fifo_out_data          : std_logic_vector(98 downto 0); -- audio_and_video_config_avalon_av_config_slave_agent_rsp_fifo:out_data -> audio_and_video_config_avalon_av_config_slave_agent:rf_sink_data
	signal audio_and_video_config_avalon_av_config_slave_agent_rsp_fifo_out_ready         : std_logic;                     -- audio_and_video_config_avalon_av_config_slave_agent:rf_sink_ready -> audio_and_video_config_avalon_av_config_slave_agent_rsp_fifo:out_ready
	signal audio_and_video_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket : std_logic;                     -- audio_and_video_config_avalon_av_config_slave_agent_rsp_fifo:out_startofpacket -> audio_and_video_config_avalon_av_config_slave_agent:rf_sink_startofpacket
	signal audio_and_video_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket   : std_logic;                     -- audio_and_video_config_avalon_av_config_slave_agent_rsp_fifo:out_endofpacket -> audio_and_video_config_avalon_av_config_slave_agent:rf_sink_endofpacket
	signal cmd_mux_001_src_valid                                                          : std_logic;                     -- cmd_mux_001:src_valid -> audio_and_video_config_avalon_av_config_slave_agent:cp_valid
	signal cmd_mux_001_src_data                                                           : std_logic_vector(97 downto 0); -- cmd_mux_001:src_data -> audio_and_video_config_avalon_av_config_slave_agent:cp_data
	signal cmd_mux_001_src_ready                                                          : std_logic;                     -- audio_and_video_config_avalon_av_config_slave_agent:cp_ready -> cmd_mux_001:src_ready
	signal cmd_mux_001_src_channel                                                        : std_logic_vector(11 downto 0); -- cmd_mux_001:src_channel -> audio_and_video_config_avalon_av_config_slave_agent:cp_channel
	signal cmd_mux_001_src_startofpacket                                                  : std_logic;                     -- cmd_mux_001:src_startofpacket -> audio_and_video_config_avalon_av_config_slave_agent:cp_startofpacket
	signal cmd_mux_001_src_endofpacket                                                    : std_logic;                     -- cmd_mux_001:src_endofpacket -> audio_and_video_config_avalon_av_config_slave_agent:cp_endofpacket
	signal jtag_uart_0_avalon_jtag_slave_agent_m0_readdata                                : std_logic_vector(31 downto 0); -- jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	signal jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest                             : std_logic;                     -- jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	signal jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess                             : std_logic;                     -- jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	signal jtag_uart_0_avalon_jtag_slave_agent_m0_address                                 : std_logic_vector(19 downto 0); -- jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	signal jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable                              : std_logic_vector(3 downto 0);  -- jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	signal jtag_uart_0_avalon_jtag_slave_agent_m0_read                                    : std_logic;                     -- jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	signal jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid                           : std_logic;                     -- jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	signal jtag_uart_0_avalon_jtag_slave_agent_m0_lock                                    : std_logic;                     -- jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	signal jtag_uart_0_avalon_jtag_slave_agent_m0_writedata                               : std_logic_vector(31 downto 0); -- jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	signal jtag_uart_0_avalon_jtag_slave_agent_m0_write                                   : std_logic;                     -- jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	signal jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount                              : std_logic_vector(2 downto 0);  -- jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	signal jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid                            : std_logic;                     -- jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	signal jtag_uart_0_avalon_jtag_slave_agent_rf_source_data                             : std_logic_vector(98 downto 0); -- jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	signal jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready                            : std_logic;                     -- jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	signal jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket                    : std_logic;                     -- jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	signal jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket                      : std_logic;                     -- jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	signal jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid                         : std_logic;                     -- jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	signal jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data                          : std_logic_vector(98 downto 0); -- jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	signal jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready                         : std_logic;                     -- jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	signal jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket                 : std_logic;                     -- jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	signal jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket                   : std_logic;                     -- jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	signal cmd_mux_002_src_valid                                                          : std_logic;                     -- cmd_mux_002:src_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	signal cmd_mux_002_src_data                                                           : std_logic_vector(97 downto 0); -- cmd_mux_002:src_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	signal cmd_mux_002_src_ready                                                          : std_logic;                     -- jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> cmd_mux_002:src_ready
	signal cmd_mux_002_src_channel                                                        : std_logic_vector(11 downto 0); -- cmd_mux_002:src_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	signal cmd_mux_002_src_startofpacket                                                  : std_logic;                     -- cmd_mux_002:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	signal cmd_mux_002_src_endofpacket                                                    : std_logic;                     -- cmd_mux_002:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	signal ps2_avalon_ps2_slave_agent_m0_readdata                                         : std_logic_vector(31 downto 0); -- ps2_avalon_ps2_slave_translator:uav_readdata -> ps2_avalon_ps2_slave_agent:m0_readdata
	signal ps2_avalon_ps2_slave_agent_m0_waitrequest                                      : std_logic;                     -- ps2_avalon_ps2_slave_translator:uav_waitrequest -> ps2_avalon_ps2_slave_agent:m0_waitrequest
	signal ps2_avalon_ps2_slave_agent_m0_debugaccess                                      : std_logic;                     -- ps2_avalon_ps2_slave_agent:m0_debugaccess -> ps2_avalon_ps2_slave_translator:uav_debugaccess
	signal ps2_avalon_ps2_slave_agent_m0_address                                          : std_logic_vector(19 downto 0); -- ps2_avalon_ps2_slave_agent:m0_address -> ps2_avalon_ps2_slave_translator:uav_address
	signal ps2_avalon_ps2_slave_agent_m0_byteenable                                       : std_logic_vector(3 downto 0);  -- ps2_avalon_ps2_slave_agent:m0_byteenable -> ps2_avalon_ps2_slave_translator:uav_byteenable
	signal ps2_avalon_ps2_slave_agent_m0_read                                             : std_logic;                     -- ps2_avalon_ps2_slave_agent:m0_read -> ps2_avalon_ps2_slave_translator:uav_read
	signal ps2_avalon_ps2_slave_agent_m0_readdatavalid                                    : std_logic;                     -- ps2_avalon_ps2_slave_translator:uav_readdatavalid -> ps2_avalon_ps2_slave_agent:m0_readdatavalid
	signal ps2_avalon_ps2_slave_agent_m0_lock                                             : std_logic;                     -- ps2_avalon_ps2_slave_agent:m0_lock -> ps2_avalon_ps2_slave_translator:uav_lock
	signal ps2_avalon_ps2_slave_agent_m0_writedata                                        : std_logic_vector(31 downto 0); -- ps2_avalon_ps2_slave_agent:m0_writedata -> ps2_avalon_ps2_slave_translator:uav_writedata
	signal ps2_avalon_ps2_slave_agent_m0_write                                            : std_logic;                     -- ps2_avalon_ps2_slave_agent:m0_write -> ps2_avalon_ps2_slave_translator:uav_write
	signal ps2_avalon_ps2_slave_agent_m0_burstcount                                       : std_logic_vector(2 downto 0);  -- ps2_avalon_ps2_slave_agent:m0_burstcount -> ps2_avalon_ps2_slave_translator:uav_burstcount
	signal ps2_avalon_ps2_slave_agent_rf_source_valid                                     : std_logic;                     -- ps2_avalon_ps2_slave_agent:rf_source_valid -> ps2_avalon_ps2_slave_agent_rsp_fifo:in_valid
	signal ps2_avalon_ps2_slave_agent_rf_source_data                                      : std_logic_vector(98 downto 0); -- ps2_avalon_ps2_slave_agent:rf_source_data -> ps2_avalon_ps2_slave_agent_rsp_fifo:in_data
	signal ps2_avalon_ps2_slave_agent_rf_source_ready                                     : std_logic;                     -- ps2_avalon_ps2_slave_agent_rsp_fifo:in_ready -> ps2_avalon_ps2_slave_agent:rf_source_ready
	signal ps2_avalon_ps2_slave_agent_rf_source_startofpacket                             : std_logic;                     -- ps2_avalon_ps2_slave_agent:rf_source_startofpacket -> ps2_avalon_ps2_slave_agent_rsp_fifo:in_startofpacket
	signal ps2_avalon_ps2_slave_agent_rf_source_endofpacket                               : std_logic;                     -- ps2_avalon_ps2_slave_agent:rf_source_endofpacket -> ps2_avalon_ps2_slave_agent_rsp_fifo:in_endofpacket
	signal ps2_avalon_ps2_slave_agent_rsp_fifo_out_valid                                  : std_logic;                     -- ps2_avalon_ps2_slave_agent_rsp_fifo:out_valid -> ps2_avalon_ps2_slave_agent:rf_sink_valid
	signal ps2_avalon_ps2_slave_agent_rsp_fifo_out_data                                   : std_logic_vector(98 downto 0); -- ps2_avalon_ps2_slave_agent_rsp_fifo:out_data -> ps2_avalon_ps2_slave_agent:rf_sink_data
	signal ps2_avalon_ps2_slave_agent_rsp_fifo_out_ready                                  : std_logic;                     -- ps2_avalon_ps2_slave_agent:rf_sink_ready -> ps2_avalon_ps2_slave_agent_rsp_fifo:out_ready
	signal ps2_avalon_ps2_slave_agent_rsp_fifo_out_startofpacket                          : std_logic;                     -- ps2_avalon_ps2_slave_agent_rsp_fifo:out_startofpacket -> ps2_avalon_ps2_slave_agent:rf_sink_startofpacket
	signal ps2_avalon_ps2_slave_agent_rsp_fifo_out_endofpacket                            : std_logic;                     -- ps2_avalon_ps2_slave_agent_rsp_fifo:out_endofpacket -> ps2_avalon_ps2_slave_agent:rf_sink_endofpacket
	signal cmd_mux_003_src_valid                                                          : std_logic;                     -- cmd_mux_003:src_valid -> ps2_avalon_ps2_slave_agent:cp_valid
	signal cmd_mux_003_src_data                                                           : std_logic_vector(97 downto 0); -- cmd_mux_003:src_data -> ps2_avalon_ps2_slave_agent:cp_data
	signal cmd_mux_003_src_ready                                                          : std_logic;                     -- ps2_avalon_ps2_slave_agent:cp_ready -> cmd_mux_003:src_ready
	signal cmd_mux_003_src_channel                                                        : std_logic_vector(11 downto 0); -- cmd_mux_003:src_channel -> ps2_avalon_ps2_slave_agent:cp_channel
	signal cmd_mux_003_src_startofpacket                                                  : std_logic;                     -- cmd_mux_003:src_startofpacket -> ps2_avalon_ps2_slave_agent:cp_startofpacket
	signal cmd_mux_003_src_endofpacket                                                    : std_logic;                     -- cmd_mux_003:src_endofpacket -> ps2_avalon_ps2_slave_agent:cp_endofpacket
	signal sysid_control_slave_agent_m0_readdata                                          : std_logic_vector(31 downto 0); -- sysid_control_slave_translator:uav_readdata -> sysid_control_slave_agent:m0_readdata
	signal sysid_control_slave_agent_m0_waitrequest                                       : std_logic;                     -- sysid_control_slave_translator:uav_waitrequest -> sysid_control_slave_agent:m0_waitrequest
	signal sysid_control_slave_agent_m0_debugaccess                                       : std_logic;                     -- sysid_control_slave_agent:m0_debugaccess -> sysid_control_slave_translator:uav_debugaccess
	signal sysid_control_slave_agent_m0_address                                           : std_logic_vector(19 downto 0); -- sysid_control_slave_agent:m0_address -> sysid_control_slave_translator:uav_address
	signal sysid_control_slave_agent_m0_byteenable                                        : std_logic_vector(3 downto 0);  -- sysid_control_slave_agent:m0_byteenable -> sysid_control_slave_translator:uav_byteenable
	signal sysid_control_slave_agent_m0_read                                              : std_logic;                     -- sysid_control_slave_agent:m0_read -> sysid_control_slave_translator:uav_read
	signal sysid_control_slave_agent_m0_readdatavalid                                     : std_logic;                     -- sysid_control_slave_translator:uav_readdatavalid -> sysid_control_slave_agent:m0_readdatavalid
	signal sysid_control_slave_agent_m0_lock                                              : std_logic;                     -- sysid_control_slave_agent:m0_lock -> sysid_control_slave_translator:uav_lock
	signal sysid_control_slave_agent_m0_writedata                                         : std_logic_vector(31 downto 0); -- sysid_control_slave_agent:m0_writedata -> sysid_control_slave_translator:uav_writedata
	signal sysid_control_slave_agent_m0_write                                             : std_logic;                     -- sysid_control_slave_agent:m0_write -> sysid_control_slave_translator:uav_write
	signal sysid_control_slave_agent_m0_burstcount                                        : std_logic_vector(2 downto 0);  -- sysid_control_slave_agent:m0_burstcount -> sysid_control_slave_translator:uav_burstcount
	signal sysid_control_slave_agent_rf_source_valid                                      : std_logic;                     -- sysid_control_slave_agent:rf_source_valid -> sysid_control_slave_agent_rsp_fifo:in_valid
	signal sysid_control_slave_agent_rf_source_data                                       : std_logic_vector(98 downto 0); -- sysid_control_slave_agent:rf_source_data -> sysid_control_slave_agent_rsp_fifo:in_data
	signal sysid_control_slave_agent_rf_source_ready                                      : std_logic;                     -- sysid_control_slave_agent_rsp_fifo:in_ready -> sysid_control_slave_agent:rf_source_ready
	signal sysid_control_slave_agent_rf_source_startofpacket                              : std_logic;                     -- sysid_control_slave_agent:rf_source_startofpacket -> sysid_control_slave_agent_rsp_fifo:in_startofpacket
	signal sysid_control_slave_agent_rf_source_endofpacket                                : std_logic;                     -- sysid_control_slave_agent:rf_source_endofpacket -> sysid_control_slave_agent_rsp_fifo:in_endofpacket
	signal sysid_control_slave_agent_rsp_fifo_out_valid                                   : std_logic;                     -- sysid_control_slave_agent_rsp_fifo:out_valid -> sysid_control_slave_agent:rf_sink_valid
	signal sysid_control_slave_agent_rsp_fifo_out_data                                    : std_logic_vector(98 downto 0); -- sysid_control_slave_agent_rsp_fifo:out_data -> sysid_control_slave_agent:rf_sink_data
	signal sysid_control_slave_agent_rsp_fifo_out_ready                                   : std_logic;                     -- sysid_control_slave_agent:rf_sink_ready -> sysid_control_slave_agent_rsp_fifo:out_ready
	signal sysid_control_slave_agent_rsp_fifo_out_startofpacket                           : std_logic;                     -- sysid_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_control_slave_agent:rf_sink_startofpacket
	signal sysid_control_slave_agent_rsp_fifo_out_endofpacket                             : std_logic;                     -- sysid_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_control_slave_agent:rf_sink_endofpacket
	signal cmd_mux_004_src_valid                                                          : std_logic;                     -- cmd_mux_004:src_valid -> sysid_control_slave_agent:cp_valid
	signal cmd_mux_004_src_data                                                           : std_logic_vector(97 downto 0); -- cmd_mux_004:src_data -> sysid_control_slave_agent:cp_data
	signal cmd_mux_004_src_ready                                                          : std_logic;                     -- sysid_control_slave_agent:cp_ready -> cmd_mux_004:src_ready
	signal cmd_mux_004_src_channel                                                        : std_logic_vector(11 downto 0); -- cmd_mux_004:src_channel -> sysid_control_slave_agent:cp_channel
	signal cmd_mux_004_src_startofpacket                                                  : std_logic;                     -- cmd_mux_004:src_startofpacket -> sysid_control_slave_agent:cp_startofpacket
	signal cmd_mux_004_src_endofpacket                                                    : std_logic;                     -- cmd_mux_004:src_endofpacket -> sysid_control_slave_agent:cp_endofpacket
	signal cpu_debug_mem_slave_agent_m0_readdata                                          : std_logic_vector(31 downto 0); -- cpu_debug_mem_slave_translator:uav_readdata -> cpu_debug_mem_slave_agent:m0_readdata
	signal cpu_debug_mem_slave_agent_m0_waitrequest                                       : std_logic;                     -- cpu_debug_mem_slave_translator:uav_waitrequest -> cpu_debug_mem_slave_agent:m0_waitrequest
	signal cpu_debug_mem_slave_agent_m0_debugaccess                                       : std_logic;                     -- cpu_debug_mem_slave_agent:m0_debugaccess -> cpu_debug_mem_slave_translator:uav_debugaccess
	signal cpu_debug_mem_slave_agent_m0_address                                           : std_logic_vector(19 downto 0); -- cpu_debug_mem_slave_agent:m0_address -> cpu_debug_mem_slave_translator:uav_address
	signal cpu_debug_mem_slave_agent_m0_byteenable                                        : std_logic_vector(3 downto 0);  -- cpu_debug_mem_slave_agent:m0_byteenable -> cpu_debug_mem_slave_translator:uav_byteenable
	signal cpu_debug_mem_slave_agent_m0_read                                              : std_logic;                     -- cpu_debug_mem_slave_agent:m0_read -> cpu_debug_mem_slave_translator:uav_read
	signal cpu_debug_mem_slave_agent_m0_readdatavalid                                     : std_logic;                     -- cpu_debug_mem_slave_translator:uav_readdatavalid -> cpu_debug_mem_slave_agent:m0_readdatavalid
	signal cpu_debug_mem_slave_agent_m0_lock                                              : std_logic;                     -- cpu_debug_mem_slave_agent:m0_lock -> cpu_debug_mem_slave_translator:uav_lock
	signal cpu_debug_mem_slave_agent_m0_writedata                                         : std_logic_vector(31 downto 0); -- cpu_debug_mem_slave_agent:m0_writedata -> cpu_debug_mem_slave_translator:uav_writedata
	signal cpu_debug_mem_slave_agent_m0_write                                             : std_logic;                     -- cpu_debug_mem_slave_agent:m0_write -> cpu_debug_mem_slave_translator:uav_write
	signal cpu_debug_mem_slave_agent_m0_burstcount                                        : std_logic_vector(2 downto 0);  -- cpu_debug_mem_slave_agent:m0_burstcount -> cpu_debug_mem_slave_translator:uav_burstcount
	signal cpu_debug_mem_slave_agent_rf_source_valid                                      : std_logic;                     -- cpu_debug_mem_slave_agent:rf_source_valid -> cpu_debug_mem_slave_agent_rsp_fifo:in_valid
	signal cpu_debug_mem_slave_agent_rf_source_data                                       : std_logic_vector(98 downto 0); -- cpu_debug_mem_slave_agent:rf_source_data -> cpu_debug_mem_slave_agent_rsp_fifo:in_data
	signal cpu_debug_mem_slave_agent_rf_source_ready                                      : std_logic;                     -- cpu_debug_mem_slave_agent_rsp_fifo:in_ready -> cpu_debug_mem_slave_agent:rf_source_ready
	signal cpu_debug_mem_slave_agent_rf_source_startofpacket                              : std_logic;                     -- cpu_debug_mem_slave_agent:rf_source_startofpacket -> cpu_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	signal cpu_debug_mem_slave_agent_rf_source_endofpacket                                : std_logic;                     -- cpu_debug_mem_slave_agent:rf_source_endofpacket -> cpu_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	signal cpu_debug_mem_slave_agent_rsp_fifo_out_valid                                   : std_logic;                     -- cpu_debug_mem_slave_agent_rsp_fifo:out_valid -> cpu_debug_mem_slave_agent:rf_sink_valid
	signal cpu_debug_mem_slave_agent_rsp_fifo_out_data                                    : std_logic_vector(98 downto 0); -- cpu_debug_mem_slave_agent_rsp_fifo:out_data -> cpu_debug_mem_slave_agent:rf_sink_data
	signal cpu_debug_mem_slave_agent_rsp_fifo_out_ready                                   : std_logic;                     -- cpu_debug_mem_slave_agent:rf_sink_ready -> cpu_debug_mem_slave_agent_rsp_fifo:out_ready
	signal cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket                           : std_logic;                     -- cpu_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> cpu_debug_mem_slave_agent:rf_sink_startofpacket
	signal cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket                             : std_logic;                     -- cpu_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> cpu_debug_mem_slave_agent:rf_sink_endofpacket
	signal cmd_mux_005_src_valid                                                          : std_logic;                     -- cmd_mux_005:src_valid -> cpu_debug_mem_slave_agent:cp_valid
	signal cmd_mux_005_src_data                                                           : std_logic_vector(97 downto 0); -- cmd_mux_005:src_data -> cpu_debug_mem_slave_agent:cp_data
	signal cmd_mux_005_src_ready                                                          : std_logic;                     -- cpu_debug_mem_slave_agent:cp_ready -> cmd_mux_005:src_ready
	signal cmd_mux_005_src_channel                                                        : std_logic_vector(11 downto 0); -- cmd_mux_005:src_channel -> cpu_debug_mem_slave_agent:cp_channel
	signal cmd_mux_005_src_startofpacket                                                  : std_logic;                     -- cmd_mux_005:src_startofpacket -> cpu_debug_mem_slave_agent:cp_startofpacket
	signal cmd_mux_005_src_endofpacket                                                    : std_logic;                     -- cmd_mux_005:src_endofpacket -> cpu_debug_mem_slave_agent:cp_endofpacket
	signal onchipmem_s1_agent_m0_readdata                                                 : std_logic_vector(31 downto 0); -- onchipmem_s1_translator:uav_readdata -> onchipmem_s1_agent:m0_readdata
	signal onchipmem_s1_agent_m0_waitrequest                                              : std_logic;                     -- onchipmem_s1_translator:uav_waitrequest -> onchipmem_s1_agent:m0_waitrequest
	signal onchipmem_s1_agent_m0_debugaccess                                              : std_logic;                     -- onchipmem_s1_agent:m0_debugaccess -> onchipmem_s1_translator:uav_debugaccess
	signal onchipmem_s1_agent_m0_address                                                  : std_logic_vector(19 downto 0); -- onchipmem_s1_agent:m0_address -> onchipmem_s1_translator:uav_address
	signal onchipmem_s1_agent_m0_byteenable                                               : std_logic_vector(3 downto 0);  -- onchipmem_s1_agent:m0_byteenable -> onchipmem_s1_translator:uav_byteenable
	signal onchipmem_s1_agent_m0_read                                                     : std_logic;                     -- onchipmem_s1_agent:m0_read -> onchipmem_s1_translator:uav_read
	signal onchipmem_s1_agent_m0_readdatavalid                                            : std_logic;                     -- onchipmem_s1_translator:uav_readdatavalid -> onchipmem_s1_agent:m0_readdatavalid
	signal onchipmem_s1_agent_m0_lock                                                     : std_logic;                     -- onchipmem_s1_agent:m0_lock -> onchipmem_s1_translator:uav_lock
	signal onchipmem_s1_agent_m0_writedata                                                : std_logic_vector(31 downto 0); -- onchipmem_s1_agent:m0_writedata -> onchipmem_s1_translator:uav_writedata
	signal onchipmem_s1_agent_m0_write                                                    : std_logic;                     -- onchipmem_s1_agent:m0_write -> onchipmem_s1_translator:uav_write
	signal onchipmem_s1_agent_m0_burstcount                                               : std_logic_vector(2 downto 0);  -- onchipmem_s1_agent:m0_burstcount -> onchipmem_s1_translator:uav_burstcount
	signal onchipmem_s1_agent_rf_source_valid                                             : std_logic;                     -- onchipmem_s1_agent:rf_source_valid -> onchipmem_s1_agent_rsp_fifo:in_valid
	signal onchipmem_s1_agent_rf_source_data                                              : std_logic_vector(98 downto 0); -- onchipmem_s1_agent:rf_source_data -> onchipmem_s1_agent_rsp_fifo:in_data
	signal onchipmem_s1_agent_rf_source_ready                                             : std_logic;                     -- onchipmem_s1_agent_rsp_fifo:in_ready -> onchipmem_s1_agent:rf_source_ready
	signal onchipmem_s1_agent_rf_source_startofpacket                                     : std_logic;                     -- onchipmem_s1_agent:rf_source_startofpacket -> onchipmem_s1_agent_rsp_fifo:in_startofpacket
	signal onchipmem_s1_agent_rf_source_endofpacket                                       : std_logic;                     -- onchipmem_s1_agent:rf_source_endofpacket -> onchipmem_s1_agent_rsp_fifo:in_endofpacket
	signal onchipmem_s1_agent_rsp_fifo_out_valid                                          : std_logic;                     -- onchipmem_s1_agent_rsp_fifo:out_valid -> onchipmem_s1_agent:rf_sink_valid
	signal onchipmem_s1_agent_rsp_fifo_out_data                                           : std_logic_vector(98 downto 0); -- onchipmem_s1_agent_rsp_fifo:out_data -> onchipmem_s1_agent:rf_sink_data
	signal onchipmem_s1_agent_rsp_fifo_out_ready                                          : std_logic;                     -- onchipmem_s1_agent:rf_sink_ready -> onchipmem_s1_agent_rsp_fifo:out_ready
	signal onchipmem_s1_agent_rsp_fifo_out_startofpacket                                  : std_logic;                     -- onchipmem_s1_agent_rsp_fifo:out_startofpacket -> onchipmem_s1_agent:rf_sink_startofpacket
	signal onchipmem_s1_agent_rsp_fifo_out_endofpacket                                    : std_logic;                     -- onchipmem_s1_agent_rsp_fifo:out_endofpacket -> onchipmem_s1_agent:rf_sink_endofpacket
	signal cmd_mux_006_src_valid                                                          : std_logic;                     -- cmd_mux_006:src_valid -> onchipmem_s1_agent:cp_valid
	signal cmd_mux_006_src_data                                                           : std_logic_vector(97 downto 0); -- cmd_mux_006:src_data -> onchipmem_s1_agent:cp_data
	signal cmd_mux_006_src_ready                                                          : std_logic;                     -- onchipmem_s1_agent:cp_ready -> cmd_mux_006:src_ready
	signal cmd_mux_006_src_channel                                                        : std_logic_vector(11 downto 0); -- cmd_mux_006:src_channel -> onchipmem_s1_agent:cp_channel
	signal cmd_mux_006_src_startofpacket                                                  : std_logic;                     -- cmd_mux_006:src_startofpacket -> onchipmem_s1_agent:cp_startofpacket
	signal cmd_mux_006_src_endofpacket                                                    : std_logic;                     -- cmd_mux_006:src_endofpacket -> onchipmem_s1_agent:cp_endofpacket
	signal timer0_s1_agent_m0_readdata                                                    : std_logic_vector(31 downto 0); -- timer0_s1_translator:uav_readdata -> timer0_s1_agent:m0_readdata
	signal timer0_s1_agent_m0_waitrequest                                                 : std_logic;                     -- timer0_s1_translator:uav_waitrequest -> timer0_s1_agent:m0_waitrequest
	signal timer0_s1_agent_m0_debugaccess                                                 : std_logic;                     -- timer0_s1_agent:m0_debugaccess -> timer0_s1_translator:uav_debugaccess
	signal timer0_s1_agent_m0_address                                                     : std_logic_vector(19 downto 0); -- timer0_s1_agent:m0_address -> timer0_s1_translator:uav_address
	signal timer0_s1_agent_m0_byteenable                                                  : std_logic_vector(3 downto 0);  -- timer0_s1_agent:m0_byteenable -> timer0_s1_translator:uav_byteenable
	signal timer0_s1_agent_m0_read                                                        : std_logic;                     -- timer0_s1_agent:m0_read -> timer0_s1_translator:uav_read
	signal timer0_s1_agent_m0_readdatavalid                                               : std_logic;                     -- timer0_s1_translator:uav_readdatavalid -> timer0_s1_agent:m0_readdatavalid
	signal timer0_s1_agent_m0_lock                                                        : std_logic;                     -- timer0_s1_agent:m0_lock -> timer0_s1_translator:uav_lock
	signal timer0_s1_agent_m0_writedata                                                   : std_logic_vector(31 downto 0); -- timer0_s1_agent:m0_writedata -> timer0_s1_translator:uav_writedata
	signal timer0_s1_agent_m0_write                                                       : std_logic;                     -- timer0_s1_agent:m0_write -> timer0_s1_translator:uav_write
	signal timer0_s1_agent_m0_burstcount                                                  : std_logic_vector(2 downto 0);  -- timer0_s1_agent:m0_burstcount -> timer0_s1_translator:uav_burstcount
	signal timer0_s1_agent_rf_source_valid                                                : std_logic;                     -- timer0_s1_agent:rf_source_valid -> timer0_s1_agent_rsp_fifo:in_valid
	signal timer0_s1_agent_rf_source_data                                                 : std_logic_vector(98 downto 0); -- timer0_s1_agent:rf_source_data -> timer0_s1_agent_rsp_fifo:in_data
	signal timer0_s1_agent_rf_source_ready                                                : std_logic;                     -- timer0_s1_agent_rsp_fifo:in_ready -> timer0_s1_agent:rf_source_ready
	signal timer0_s1_agent_rf_source_startofpacket                                        : std_logic;                     -- timer0_s1_agent:rf_source_startofpacket -> timer0_s1_agent_rsp_fifo:in_startofpacket
	signal timer0_s1_agent_rf_source_endofpacket                                          : std_logic;                     -- timer0_s1_agent:rf_source_endofpacket -> timer0_s1_agent_rsp_fifo:in_endofpacket
	signal timer0_s1_agent_rsp_fifo_out_valid                                             : std_logic;                     -- timer0_s1_agent_rsp_fifo:out_valid -> timer0_s1_agent:rf_sink_valid
	signal timer0_s1_agent_rsp_fifo_out_data                                              : std_logic_vector(98 downto 0); -- timer0_s1_agent_rsp_fifo:out_data -> timer0_s1_agent:rf_sink_data
	signal timer0_s1_agent_rsp_fifo_out_ready                                             : std_logic;                     -- timer0_s1_agent:rf_sink_ready -> timer0_s1_agent_rsp_fifo:out_ready
	signal timer0_s1_agent_rsp_fifo_out_startofpacket                                     : std_logic;                     -- timer0_s1_agent_rsp_fifo:out_startofpacket -> timer0_s1_agent:rf_sink_startofpacket
	signal timer0_s1_agent_rsp_fifo_out_endofpacket                                       : std_logic;                     -- timer0_s1_agent_rsp_fifo:out_endofpacket -> timer0_s1_agent:rf_sink_endofpacket
	signal cmd_mux_007_src_valid                                                          : std_logic;                     -- cmd_mux_007:src_valid -> timer0_s1_agent:cp_valid
	signal cmd_mux_007_src_data                                                           : std_logic_vector(97 downto 0); -- cmd_mux_007:src_data -> timer0_s1_agent:cp_data
	signal cmd_mux_007_src_ready                                                          : std_logic;                     -- timer0_s1_agent:cp_ready -> cmd_mux_007:src_ready
	signal cmd_mux_007_src_channel                                                        : std_logic_vector(11 downto 0); -- cmd_mux_007:src_channel -> timer0_s1_agent:cp_channel
	signal cmd_mux_007_src_startofpacket                                                  : std_logic;                     -- cmd_mux_007:src_startofpacket -> timer0_s1_agent:cp_startofpacket
	signal cmd_mux_007_src_endofpacket                                                    : std_logic;                     -- cmd_mux_007:src_endofpacket -> timer0_s1_agent:cp_endofpacket
	signal timer1_s1_agent_m0_readdata                                                    : std_logic_vector(31 downto 0); -- timer1_s1_translator:uav_readdata -> timer1_s1_agent:m0_readdata
	signal timer1_s1_agent_m0_waitrequest                                                 : std_logic;                     -- timer1_s1_translator:uav_waitrequest -> timer1_s1_agent:m0_waitrequest
	signal timer1_s1_agent_m0_debugaccess                                                 : std_logic;                     -- timer1_s1_agent:m0_debugaccess -> timer1_s1_translator:uav_debugaccess
	signal timer1_s1_agent_m0_address                                                     : std_logic_vector(19 downto 0); -- timer1_s1_agent:m0_address -> timer1_s1_translator:uav_address
	signal timer1_s1_agent_m0_byteenable                                                  : std_logic_vector(3 downto 0);  -- timer1_s1_agent:m0_byteenable -> timer1_s1_translator:uav_byteenable
	signal timer1_s1_agent_m0_read                                                        : std_logic;                     -- timer1_s1_agent:m0_read -> timer1_s1_translator:uav_read
	signal timer1_s1_agent_m0_readdatavalid                                               : std_logic;                     -- timer1_s1_translator:uav_readdatavalid -> timer1_s1_agent:m0_readdatavalid
	signal timer1_s1_agent_m0_lock                                                        : std_logic;                     -- timer1_s1_agent:m0_lock -> timer1_s1_translator:uav_lock
	signal timer1_s1_agent_m0_writedata                                                   : std_logic_vector(31 downto 0); -- timer1_s1_agent:m0_writedata -> timer1_s1_translator:uav_writedata
	signal timer1_s1_agent_m0_write                                                       : std_logic;                     -- timer1_s1_agent:m0_write -> timer1_s1_translator:uav_write
	signal timer1_s1_agent_m0_burstcount                                                  : std_logic_vector(2 downto 0);  -- timer1_s1_agent:m0_burstcount -> timer1_s1_translator:uav_burstcount
	signal timer1_s1_agent_rf_source_valid                                                : std_logic;                     -- timer1_s1_agent:rf_source_valid -> timer1_s1_agent_rsp_fifo:in_valid
	signal timer1_s1_agent_rf_source_data                                                 : std_logic_vector(98 downto 0); -- timer1_s1_agent:rf_source_data -> timer1_s1_agent_rsp_fifo:in_data
	signal timer1_s1_agent_rf_source_ready                                                : std_logic;                     -- timer1_s1_agent_rsp_fifo:in_ready -> timer1_s1_agent:rf_source_ready
	signal timer1_s1_agent_rf_source_startofpacket                                        : std_logic;                     -- timer1_s1_agent:rf_source_startofpacket -> timer1_s1_agent_rsp_fifo:in_startofpacket
	signal timer1_s1_agent_rf_source_endofpacket                                          : std_logic;                     -- timer1_s1_agent:rf_source_endofpacket -> timer1_s1_agent_rsp_fifo:in_endofpacket
	signal timer1_s1_agent_rsp_fifo_out_valid                                             : std_logic;                     -- timer1_s1_agent_rsp_fifo:out_valid -> timer1_s1_agent:rf_sink_valid
	signal timer1_s1_agent_rsp_fifo_out_data                                              : std_logic_vector(98 downto 0); -- timer1_s1_agent_rsp_fifo:out_data -> timer1_s1_agent:rf_sink_data
	signal timer1_s1_agent_rsp_fifo_out_ready                                             : std_logic;                     -- timer1_s1_agent:rf_sink_ready -> timer1_s1_agent_rsp_fifo:out_ready
	signal timer1_s1_agent_rsp_fifo_out_startofpacket                                     : std_logic;                     -- timer1_s1_agent_rsp_fifo:out_startofpacket -> timer1_s1_agent:rf_sink_startofpacket
	signal timer1_s1_agent_rsp_fifo_out_endofpacket                                       : std_logic;                     -- timer1_s1_agent_rsp_fifo:out_endofpacket -> timer1_s1_agent:rf_sink_endofpacket
	signal cmd_mux_008_src_valid                                                          : std_logic;                     -- cmd_mux_008:src_valid -> timer1_s1_agent:cp_valid
	signal cmd_mux_008_src_data                                                           : std_logic_vector(97 downto 0); -- cmd_mux_008:src_data -> timer1_s1_agent:cp_data
	signal cmd_mux_008_src_ready                                                          : std_logic;                     -- timer1_s1_agent:cp_ready -> cmd_mux_008:src_ready
	signal cmd_mux_008_src_channel                                                        : std_logic_vector(11 downto 0); -- cmd_mux_008:src_channel -> timer1_s1_agent:cp_channel
	signal cmd_mux_008_src_startofpacket                                                  : std_logic;                     -- cmd_mux_008:src_startofpacket -> timer1_s1_agent:cp_startofpacket
	signal cmd_mux_008_src_endofpacket                                                    : std_logic;                     -- cmd_mux_008:src_endofpacket -> timer1_s1_agent:cp_endofpacket
	signal toggleaccmat_s1_agent_m0_readdata                                              : std_logic_vector(31 downto 0); -- ToggleAccMat_s1_translator:uav_readdata -> ToggleAccMat_s1_agent:m0_readdata
	signal toggleaccmat_s1_agent_m0_waitrequest                                           : std_logic;                     -- ToggleAccMat_s1_translator:uav_waitrequest -> ToggleAccMat_s1_agent:m0_waitrequest
	signal toggleaccmat_s1_agent_m0_debugaccess                                           : std_logic;                     -- ToggleAccMat_s1_agent:m0_debugaccess -> ToggleAccMat_s1_translator:uav_debugaccess
	signal toggleaccmat_s1_agent_m0_address                                               : std_logic_vector(19 downto 0); -- ToggleAccMat_s1_agent:m0_address -> ToggleAccMat_s1_translator:uav_address
	signal toggleaccmat_s1_agent_m0_byteenable                                            : std_logic_vector(3 downto 0);  -- ToggleAccMat_s1_agent:m0_byteenable -> ToggleAccMat_s1_translator:uav_byteenable
	signal toggleaccmat_s1_agent_m0_read                                                  : std_logic;                     -- ToggleAccMat_s1_agent:m0_read -> ToggleAccMat_s1_translator:uav_read
	signal toggleaccmat_s1_agent_m0_readdatavalid                                         : std_logic;                     -- ToggleAccMat_s1_translator:uav_readdatavalid -> ToggleAccMat_s1_agent:m0_readdatavalid
	signal toggleaccmat_s1_agent_m0_lock                                                  : std_logic;                     -- ToggleAccMat_s1_agent:m0_lock -> ToggleAccMat_s1_translator:uav_lock
	signal toggleaccmat_s1_agent_m0_writedata                                             : std_logic_vector(31 downto 0); -- ToggleAccMat_s1_agent:m0_writedata -> ToggleAccMat_s1_translator:uav_writedata
	signal toggleaccmat_s1_agent_m0_write                                                 : std_logic;                     -- ToggleAccMat_s1_agent:m0_write -> ToggleAccMat_s1_translator:uav_write
	signal toggleaccmat_s1_agent_m0_burstcount                                            : std_logic_vector(2 downto 0);  -- ToggleAccMat_s1_agent:m0_burstcount -> ToggleAccMat_s1_translator:uav_burstcount
	signal toggleaccmat_s1_agent_rf_source_valid                                          : std_logic;                     -- ToggleAccMat_s1_agent:rf_source_valid -> ToggleAccMat_s1_agent_rsp_fifo:in_valid
	signal toggleaccmat_s1_agent_rf_source_data                                           : std_logic_vector(98 downto 0); -- ToggleAccMat_s1_agent:rf_source_data -> ToggleAccMat_s1_agent_rsp_fifo:in_data
	signal toggleaccmat_s1_agent_rf_source_ready                                          : std_logic;                     -- ToggleAccMat_s1_agent_rsp_fifo:in_ready -> ToggleAccMat_s1_agent:rf_source_ready
	signal toggleaccmat_s1_agent_rf_source_startofpacket                                  : std_logic;                     -- ToggleAccMat_s1_agent:rf_source_startofpacket -> ToggleAccMat_s1_agent_rsp_fifo:in_startofpacket
	signal toggleaccmat_s1_agent_rf_source_endofpacket                                    : std_logic;                     -- ToggleAccMat_s1_agent:rf_source_endofpacket -> ToggleAccMat_s1_agent_rsp_fifo:in_endofpacket
	signal toggleaccmat_s1_agent_rsp_fifo_out_valid                                       : std_logic;                     -- ToggleAccMat_s1_agent_rsp_fifo:out_valid -> ToggleAccMat_s1_agent:rf_sink_valid
	signal toggleaccmat_s1_agent_rsp_fifo_out_data                                        : std_logic_vector(98 downto 0); -- ToggleAccMat_s1_agent_rsp_fifo:out_data -> ToggleAccMat_s1_agent:rf_sink_data
	signal toggleaccmat_s1_agent_rsp_fifo_out_ready                                       : std_logic;                     -- ToggleAccMat_s1_agent:rf_sink_ready -> ToggleAccMat_s1_agent_rsp_fifo:out_ready
	signal toggleaccmat_s1_agent_rsp_fifo_out_startofpacket                               : std_logic;                     -- ToggleAccMat_s1_agent_rsp_fifo:out_startofpacket -> ToggleAccMat_s1_agent:rf_sink_startofpacket
	signal toggleaccmat_s1_agent_rsp_fifo_out_endofpacket                                 : std_logic;                     -- ToggleAccMat_s1_agent_rsp_fifo:out_endofpacket -> ToggleAccMat_s1_agent:rf_sink_endofpacket
	signal cmd_mux_009_src_valid                                                          : std_logic;                     -- cmd_mux_009:src_valid -> ToggleAccMat_s1_agent:cp_valid
	signal cmd_mux_009_src_data                                                           : std_logic_vector(97 downto 0); -- cmd_mux_009:src_data -> ToggleAccMat_s1_agent:cp_data
	signal cmd_mux_009_src_ready                                                          : std_logic;                     -- ToggleAccMat_s1_agent:cp_ready -> cmd_mux_009:src_ready
	signal cmd_mux_009_src_channel                                                        : std_logic_vector(11 downto 0); -- cmd_mux_009:src_channel -> ToggleAccMat_s1_agent:cp_channel
	signal cmd_mux_009_src_startofpacket                                                  : std_logic;                     -- cmd_mux_009:src_startofpacket -> ToggleAccMat_s1_agent:cp_startofpacket
	signal cmd_mux_009_src_endofpacket                                                    : std_logic;                     -- cmd_mux_009:src_endofpacket -> ToggleAccMat_s1_agent:cp_endofpacket
	signal datatoaccmat_s1_agent_m0_readdata                                              : std_logic_vector(31 downto 0); -- DataToAccMat_s1_translator:uav_readdata -> DataToAccMat_s1_agent:m0_readdata
	signal datatoaccmat_s1_agent_m0_waitrequest                                           : std_logic;                     -- DataToAccMat_s1_translator:uav_waitrequest -> DataToAccMat_s1_agent:m0_waitrequest
	signal datatoaccmat_s1_agent_m0_debugaccess                                           : std_logic;                     -- DataToAccMat_s1_agent:m0_debugaccess -> DataToAccMat_s1_translator:uav_debugaccess
	signal datatoaccmat_s1_agent_m0_address                                               : std_logic_vector(19 downto 0); -- DataToAccMat_s1_agent:m0_address -> DataToAccMat_s1_translator:uav_address
	signal datatoaccmat_s1_agent_m0_byteenable                                            : std_logic_vector(3 downto 0);  -- DataToAccMat_s1_agent:m0_byteenable -> DataToAccMat_s1_translator:uav_byteenable
	signal datatoaccmat_s1_agent_m0_read                                                  : std_logic;                     -- DataToAccMat_s1_agent:m0_read -> DataToAccMat_s1_translator:uav_read
	signal datatoaccmat_s1_agent_m0_readdatavalid                                         : std_logic;                     -- DataToAccMat_s1_translator:uav_readdatavalid -> DataToAccMat_s1_agent:m0_readdatavalid
	signal datatoaccmat_s1_agent_m0_lock                                                  : std_logic;                     -- DataToAccMat_s1_agent:m0_lock -> DataToAccMat_s1_translator:uav_lock
	signal datatoaccmat_s1_agent_m0_writedata                                             : std_logic_vector(31 downto 0); -- DataToAccMat_s1_agent:m0_writedata -> DataToAccMat_s1_translator:uav_writedata
	signal datatoaccmat_s1_agent_m0_write                                                 : std_logic;                     -- DataToAccMat_s1_agent:m0_write -> DataToAccMat_s1_translator:uav_write
	signal datatoaccmat_s1_agent_m0_burstcount                                            : std_logic_vector(2 downto 0);  -- DataToAccMat_s1_agent:m0_burstcount -> DataToAccMat_s1_translator:uav_burstcount
	signal datatoaccmat_s1_agent_rf_source_valid                                          : std_logic;                     -- DataToAccMat_s1_agent:rf_source_valid -> DataToAccMat_s1_agent_rsp_fifo:in_valid
	signal datatoaccmat_s1_agent_rf_source_data                                           : std_logic_vector(98 downto 0); -- DataToAccMat_s1_agent:rf_source_data -> DataToAccMat_s1_agent_rsp_fifo:in_data
	signal datatoaccmat_s1_agent_rf_source_ready                                          : std_logic;                     -- DataToAccMat_s1_agent_rsp_fifo:in_ready -> DataToAccMat_s1_agent:rf_source_ready
	signal datatoaccmat_s1_agent_rf_source_startofpacket                                  : std_logic;                     -- DataToAccMat_s1_agent:rf_source_startofpacket -> DataToAccMat_s1_agent_rsp_fifo:in_startofpacket
	signal datatoaccmat_s1_agent_rf_source_endofpacket                                    : std_logic;                     -- DataToAccMat_s1_agent:rf_source_endofpacket -> DataToAccMat_s1_agent_rsp_fifo:in_endofpacket
	signal datatoaccmat_s1_agent_rsp_fifo_out_valid                                       : std_logic;                     -- DataToAccMat_s1_agent_rsp_fifo:out_valid -> DataToAccMat_s1_agent:rf_sink_valid
	signal datatoaccmat_s1_agent_rsp_fifo_out_data                                        : std_logic_vector(98 downto 0); -- DataToAccMat_s1_agent_rsp_fifo:out_data -> DataToAccMat_s1_agent:rf_sink_data
	signal datatoaccmat_s1_agent_rsp_fifo_out_ready                                       : std_logic;                     -- DataToAccMat_s1_agent:rf_sink_ready -> DataToAccMat_s1_agent_rsp_fifo:out_ready
	signal datatoaccmat_s1_agent_rsp_fifo_out_startofpacket                               : std_logic;                     -- DataToAccMat_s1_agent_rsp_fifo:out_startofpacket -> DataToAccMat_s1_agent:rf_sink_startofpacket
	signal datatoaccmat_s1_agent_rsp_fifo_out_endofpacket                                 : std_logic;                     -- DataToAccMat_s1_agent_rsp_fifo:out_endofpacket -> DataToAccMat_s1_agent:rf_sink_endofpacket
	signal cmd_mux_010_src_valid                                                          : std_logic;                     -- cmd_mux_010:src_valid -> DataToAccMat_s1_agent:cp_valid
	signal cmd_mux_010_src_data                                                           : std_logic_vector(97 downto 0); -- cmd_mux_010:src_data -> DataToAccMat_s1_agent:cp_data
	signal cmd_mux_010_src_ready                                                          : std_logic;                     -- DataToAccMat_s1_agent:cp_ready -> cmd_mux_010:src_ready
	signal cmd_mux_010_src_channel                                                        : std_logic_vector(11 downto 0); -- cmd_mux_010:src_channel -> DataToAccMat_s1_agent:cp_channel
	signal cmd_mux_010_src_startofpacket                                                  : std_logic;                     -- cmd_mux_010:src_startofpacket -> DataToAccMat_s1_agent:cp_startofpacket
	signal cmd_mux_010_src_endofpacket                                                    : std_logic;                     -- cmd_mux_010:src_endofpacket -> DataToAccMat_s1_agent:cp_endofpacket
	signal datafromaccmat_s1_agent_m0_readdata                                            : std_logic_vector(31 downto 0); -- DataFromAccMat_s1_translator:uav_readdata -> DataFromAccMat_s1_agent:m0_readdata
	signal datafromaccmat_s1_agent_m0_waitrequest                                         : std_logic;                     -- DataFromAccMat_s1_translator:uav_waitrequest -> DataFromAccMat_s1_agent:m0_waitrequest
	signal datafromaccmat_s1_agent_m0_debugaccess                                         : std_logic;                     -- DataFromAccMat_s1_agent:m0_debugaccess -> DataFromAccMat_s1_translator:uav_debugaccess
	signal datafromaccmat_s1_agent_m0_address                                             : std_logic_vector(19 downto 0); -- DataFromAccMat_s1_agent:m0_address -> DataFromAccMat_s1_translator:uav_address
	signal datafromaccmat_s1_agent_m0_byteenable                                          : std_logic_vector(3 downto 0);  -- DataFromAccMat_s1_agent:m0_byteenable -> DataFromAccMat_s1_translator:uav_byteenable
	signal datafromaccmat_s1_agent_m0_read                                                : std_logic;                     -- DataFromAccMat_s1_agent:m0_read -> DataFromAccMat_s1_translator:uav_read
	signal datafromaccmat_s1_agent_m0_readdatavalid                                       : std_logic;                     -- DataFromAccMat_s1_translator:uav_readdatavalid -> DataFromAccMat_s1_agent:m0_readdatavalid
	signal datafromaccmat_s1_agent_m0_lock                                                : std_logic;                     -- DataFromAccMat_s1_agent:m0_lock -> DataFromAccMat_s1_translator:uav_lock
	signal datafromaccmat_s1_agent_m0_writedata                                           : std_logic_vector(31 downto 0); -- DataFromAccMat_s1_agent:m0_writedata -> DataFromAccMat_s1_translator:uav_writedata
	signal datafromaccmat_s1_agent_m0_write                                               : std_logic;                     -- DataFromAccMat_s1_agent:m0_write -> DataFromAccMat_s1_translator:uav_write
	signal datafromaccmat_s1_agent_m0_burstcount                                          : std_logic_vector(2 downto 0);  -- DataFromAccMat_s1_agent:m0_burstcount -> DataFromAccMat_s1_translator:uav_burstcount
	signal datafromaccmat_s1_agent_rf_source_valid                                        : std_logic;                     -- DataFromAccMat_s1_agent:rf_source_valid -> DataFromAccMat_s1_agent_rsp_fifo:in_valid
	signal datafromaccmat_s1_agent_rf_source_data                                         : std_logic_vector(98 downto 0); -- DataFromAccMat_s1_agent:rf_source_data -> DataFromAccMat_s1_agent_rsp_fifo:in_data
	signal datafromaccmat_s1_agent_rf_source_ready                                        : std_logic;                     -- DataFromAccMat_s1_agent_rsp_fifo:in_ready -> DataFromAccMat_s1_agent:rf_source_ready
	signal datafromaccmat_s1_agent_rf_source_startofpacket                                : std_logic;                     -- DataFromAccMat_s1_agent:rf_source_startofpacket -> DataFromAccMat_s1_agent_rsp_fifo:in_startofpacket
	signal datafromaccmat_s1_agent_rf_source_endofpacket                                  : std_logic;                     -- DataFromAccMat_s1_agent:rf_source_endofpacket -> DataFromAccMat_s1_agent_rsp_fifo:in_endofpacket
	signal datafromaccmat_s1_agent_rsp_fifo_out_valid                                     : std_logic;                     -- DataFromAccMat_s1_agent_rsp_fifo:out_valid -> DataFromAccMat_s1_agent:rf_sink_valid
	signal datafromaccmat_s1_agent_rsp_fifo_out_data                                      : std_logic_vector(98 downto 0); -- DataFromAccMat_s1_agent_rsp_fifo:out_data -> DataFromAccMat_s1_agent:rf_sink_data
	signal datafromaccmat_s1_agent_rsp_fifo_out_ready                                     : std_logic;                     -- DataFromAccMat_s1_agent:rf_sink_ready -> DataFromAccMat_s1_agent_rsp_fifo:out_ready
	signal datafromaccmat_s1_agent_rsp_fifo_out_startofpacket                             : std_logic;                     -- DataFromAccMat_s1_agent_rsp_fifo:out_startofpacket -> DataFromAccMat_s1_agent:rf_sink_startofpacket
	signal datafromaccmat_s1_agent_rsp_fifo_out_endofpacket                               : std_logic;                     -- DataFromAccMat_s1_agent_rsp_fifo:out_endofpacket -> DataFromAccMat_s1_agent:rf_sink_endofpacket
	signal cmd_mux_011_src_valid                                                          : std_logic;                     -- cmd_mux_011:src_valid -> DataFromAccMat_s1_agent:cp_valid
	signal cmd_mux_011_src_data                                                           : std_logic_vector(97 downto 0); -- cmd_mux_011:src_data -> DataFromAccMat_s1_agent:cp_data
	signal cmd_mux_011_src_ready                                                          : std_logic;                     -- DataFromAccMat_s1_agent:cp_ready -> cmd_mux_011:src_ready
	signal cmd_mux_011_src_channel                                                        : std_logic_vector(11 downto 0); -- cmd_mux_011:src_channel -> DataFromAccMat_s1_agent:cp_channel
	signal cmd_mux_011_src_startofpacket                                                  : std_logic;                     -- cmd_mux_011:src_startofpacket -> DataFromAccMat_s1_agent:cp_startofpacket
	signal cmd_mux_011_src_endofpacket                                                    : std_logic;                     -- cmd_mux_011:src_endofpacket -> DataFromAccMat_s1_agent:cp_endofpacket
	signal cpu_data_master_agent_cp_valid                                                 : std_logic;                     -- cpu_data_master_agent:cp_valid -> router:sink_valid
	signal cpu_data_master_agent_cp_data                                                  : std_logic_vector(97 downto 0); -- cpu_data_master_agent:cp_data -> router:sink_data
	signal cpu_data_master_agent_cp_ready                                                 : std_logic;                     -- router:sink_ready -> cpu_data_master_agent:cp_ready
	signal cpu_data_master_agent_cp_startofpacket                                         : std_logic;                     -- cpu_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	signal cpu_data_master_agent_cp_endofpacket                                           : std_logic;                     -- cpu_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	signal router_src_valid                                                               : std_logic;                     -- router:src_valid -> cmd_demux:sink_valid
	signal router_src_data                                                                : std_logic_vector(97 downto 0); -- router:src_data -> cmd_demux:sink_data
	signal router_src_ready                                                               : std_logic;                     -- cmd_demux:sink_ready -> router:src_ready
	signal router_src_channel                                                             : std_logic_vector(11 downto 0); -- router:src_channel -> cmd_demux:sink_channel
	signal router_src_startofpacket                                                       : std_logic;                     -- router:src_startofpacket -> cmd_demux:sink_startofpacket
	signal router_src_endofpacket                                                         : std_logic;                     -- router:src_endofpacket -> cmd_demux:sink_endofpacket
	signal cpu_instruction_master_agent_cp_valid                                          : std_logic;                     -- cpu_instruction_master_agent:cp_valid -> router_001:sink_valid
	signal cpu_instruction_master_agent_cp_data                                           : std_logic_vector(97 downto 0); -- cpu_instruction_master_agent:cp_data -> router_001:sink_data
	signal cpu_instruction_master_agent_cp_ready                                          : std_logic;                     -- router_001:sink_ready -> cpu_instruction_master_agent:cp_ready
	signal cpu_instruction_master_agent_cp_startofpacket                                  : std_logic;                     -- cpu_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	signal cpu_instruction_master_agent_cp_endofpacket                                    : std_logic;                     -- cpu_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	signal router_001_src_valid                                                           : std_logic;                     -- router_001:src_valid -> cmd_demux_001:sink_valid
	signal router_001_src_data                                                            : std_logic_vector(97 downto 0); -- router_001:src_data -> cmd_demux_001:sink_data
	signal router_001_src_ready                                                           : std_logic;                     -- cmd_demux_001:sink_ready -> router_001:src_ready
	signal router_001_src_channel                                                         : std_logic_vector(11 downto 0); -- router_001:src_channel -> cmd_demux_001:sink_channel
	signal router_001_src_startofpacket                                                   : std_logic;                     -- router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	signal router_001_src_endofpacket                                                     : std_logic;                     -- router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	signal audio_avalon_audio_slave_agent_rp_valid                                        : std_logic;                     -- audio_avalon_audio_slave_agent:rp_valid -> router_002:sink_valid
	signal audio_avalon_audio_slave_agent_rp_data                                         : std_logic_vector(97 downto 0); -- audio_avalon_audio_slave_agent:rp_data -> router_002:sink_data
	signal audio_avalon_audio_slave_agent_rp_ready                                        : std_logic;                     -- router_002:sink_ready -> audio_avalon_audio_slave_agent:rp_ready
	signal audio_avalon_audio_slave_agent_rp_startofpacket                                : std_logic;                     -- audio_avalon_audio_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	signal audio_avalon_audio_slave_agent_rp_endofpacket                                  : std_logic;                     -- audio_avalon_audio_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	signal router_002_src_valid                                                           : std_logic;                     -- router_002:src_valid -> rsp_demux:sink_valid
	signal router_002_src_data                                                            : std_logic_vector(97 downto 0); -- router_002:src_data -> rsp_demux:sink_data
	signal router_002_src_ready                                                           : std_logic;                     -- rsp_demux:sink_ready -> router_002:src_ready
	signal router_002_src_channel                                                         : std_logic_vector(11 downto 0); -- router_002:src_channel -> rsp_demux:sink_channel
	signal router_002_src_startofpacket                                                   : std_logic;                     -- router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	signal router_002_src_endofpacket                                                     : std_logic;                     -- router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	signal audio_and_video_config_avalon_av_config_slave_agent_rp_valid                   : std_logic;                     -- audio_and_video_config_avalon_av_config_slave_agent:rp_valid -> router_003:sink_valid
	signal audio_and_video_config_avalon_av_config_slave_agent_rp_data                    : std_logic_vector(97 downto 0); -- audio_and_video_config_avalon_av_config_slave_agent:rp_data -> router_003:sink_data
	signal audio_and_video_config_avalon_av_config_slave_agent_rp_ready                   : std_logic;                     -- router_003:sink_ready -> audio_and_video_config_avalon_av_config_slave_agent:rp_ready
	signal audio_and_video_config_avalon_av_config_slave_agent_rp_startofpacket           : std_logic;                     -- audio_and_video_config_avalon_av_config_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	signal audio_and_video_config_avalon_av_config_slave_agent_rp_endofpacket             : std_logic;                     -- audio_and_video_config_avalon_av_config_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	signal router_003_src_valid                                                           : std_logic;                     -- router_003:src_valid -> rsp_demux_001:sink_valid
	signal router_003_src_data                                                            : std_logic_vector(97 downto 0); -- router_003:src_data -> rsp_demux_001:sink_data
	signal router_003_src_ready                                                           : std_logic;                     -- rsp_demux_001:sink_ready -> router_003:src_ready
	signal router_003_src_channel                                                         : std_logic_vector(11 downto 0); -- router_003:src_channel -> rsp_demux_001:sink_channel
	signal router_003_src_startofpacket                                                   : std_logic;                     -- router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	signal router_003_src_endofpacket                                                     : std_logic;                     -- router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	signal jtag_uart_0_avalon_jtag_slave_agent_rp_valid                                   : std_logic;                     -- jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> router_004:sink_valid
	signal jtag_uart_0_avalon_jtag_slave_agent_rp_data                                    : std_logic_vector(97 downto 0); -- jtag_uart_0_avalon_jtag_slave_agent:rp_data -> router_004:sink_data
	signal jtag_uart_0_avalon_jtag_slave_agent_rp_ready                                   : std_logic;                     -- router_004:sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	signal jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket                           : std_logic;                     -- jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	signal jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket                             : std_logic;                     -- jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	signal router_004_src_valid                                                           : std_logic;                     -- router_004:src_valid -> rsp_demux_002:sink_valid
	signal router_004_src_data                                                            : std_logic_vector(97 downto 0); -- router_004:src_data -> rsp_demux_002:sink_data
	signal router_004_src_ready                                                           : std_logic;                     -- rsp_demux_002:sink_ready -> router_004:src_ready
	signal router_004_src_channel                                                         : std_logic_vector(11 downto 0); -- router_004:src_channel -> rsp_demux_002:sink_channel
	signal router_004_src_startofpacket                                                   : std_logic;                     -- router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	signal router_004_src_endofpacket                                                     : std_logic;                     -- router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	signal ps2_avalon_ps2_slave_agent_rp_valid                                            : std_logic;                     -- ps2_avalon_ps2_slave_agent:rp_valid -> router_005:sink_valid
	signal ps2_avalon_ps2_slave_agent_rp_data                                             : std_logic_vector(97 downto 0); -- ps2_avalon_ps2_slave_agent:rp_data -> router_005:sink_data
	signal ps2_avalon_ps2_slave_agent_rp_ready                                            : std_logic;                     -- router_005:sink_ready -> ps2_avalon_ps2_slave_agent:rp_ready
	signal ps2_avalon_ps2_slave_agent_rp_startofpacket                                    : std_logic;                     -- ps2_avalon_ps2_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	signal ps2_avalon_ps2_slave_agent_rp_endofpacket                                      : std_logic;                     -- ps2_avalon_ps2_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	signal router_005_src_valid                                                           : std_logic;                     -- router_005:src_valid -> rsp_demux_003:sink_valid
	signal router_005_src_data                                                            : std_logic_vector(97 downto 0); -- router_005:src_data -> rsp_demux_003:sink_data
	signal router_005_src_ready                                                           : std_logic;                     -- rsp_demux_003:sink_ready -> router_005:src_ready
	signal router_005_src_channel                                                         : std_logic_vector(11 downto 0); -- router_005:src_channel -> rsp_demux_003:sink_channel
	signal router_005_src_startofpacket                                                   : std_logic;                     -- router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	signal router_005_src_endofpacket                                                     : std_logic;                     -- router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	signal sysid_control_slave_agent_rp_valid                                             : std_logic;                     -- sysid_control_slave_agent:rp_valid -> router_006:sink_valid
	signal sysid_control_slave_agent_rp_data                                              : std_logic_vector(97 downto 0); -- sysid_control_slave_agent:rp_data -> router_006:sink_data
	signal sysid_control_slave_agent_rp_ready                                             : std_logic;                     -- router_006:sink_ready -> sysid_control_slave_agent:rp_ready
	signal sysid_control_slave_agent_rp_startofpacket                                     : std_logic;                     -- sysid_control_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	signal sysid_control_slave_agent_rp_endofpacket                                       : std_logic;                     -- sysid_control_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	signal router_006_src_valid                                                           : std_logic;                     -- router_006:src_valid -> rsp_demux_004:sink_valid
	signal router_006_src_data                                                            : std_logic_vector(97 downto 0); -- router_006:src_data -> rsp_demux_004:sink_data
	signal router_006_src_ready                                                           : std_logic;                     -- rsp_demux_004:sink_ready -> router_006:src_ready
	signal router_006_src_channel                                                         : std_logic_vector(11 downto 0); -- router_006:src_channel -> rsp_demux_004:sink_channel
	signal router_006_src_startofpacket                                                   : std_logic;                     -- router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	signal router_006_src_endofpacket                                                     : std_logic;                     -- router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	signal cpu_debug_mem_slave_agent_rp_valid                                             : std_logic;                     -- cpu_debug_mem_slave_agent:rp_valid -> router_007:sink_valid
	signal cpu_debug_mem_slave_agent_rp_data                                              : std_logic_vector(97 downto 0); -- cpu_debug_mem_slave_agent:rp_data -> router_007:sink_data
	signal cpu_debug_mem_slave_agent_rp_ready                                             : std_logic;                     -- router_007:sink_ready -> cpu_debug_mem_slave_agent:rp_ready
	signal cpu_debug_mem_slave_agent_rp_startofpacket                                     : std_logic;                     -- cpu_debug_mem_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	signal cpu_debug_mem_slave_agent_rp_endofpacket                                       : std_logic;                     -- cpu_debug_mem_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	signal router_007_src_valid                                                           : std_logic;                     -- router_007:src_valid -> rsp_demux_005:sink_valid
	signal router_007_src_data                                                            : std_logic_vector(97 downto 0); -- router_007:src_data -> rsp_demux_005:sink_data
	signal router_007_src_ready                                                           : std_logic;                     -- rsp_demux_005:sink_ready -> router_007:src_ready
	signal router_007_src_channel                                                         : std_logic_vector(11 downto 0); -- router_007:src_channel -> rsp_demux_005:sink_channel
	signal router_007_src_startofpacket                                                   : std_logic;                     -- router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	signal router_007_src_endofpacket                                                     : std_logic;                     -- router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	signal onchipmem_s1_agent_rp_valid                                                    : std_logic;                     -- onchipmem_s1_agent:rp_valid -> router_008:sink_valid
	signal onchipmem_s1_agent_rp_data                                                     : std_logic_vector(97 downto 0); -- onchipmem_s1_agent:rp_data -> router_008:sink_data
	signal onchipmem_s1_agent_rp_ready                                                    : std_logic;                     -- router_008:sink_ready -> onchipmem_s1_agent:rp_ready
	signal onchipmem_s1_agent_rp_startofpacket                                            : std_logic;                     -- onchipmem_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	signal onchipmem_s1_agent_rp_endofpacket                                              : std_logic;                     -- onchipmem_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	signal router_008_src_valid                                                           : std_logic;                     -- router_008:src_valid -> rsp_demux_006:sink_valid
	signal router_008_src_data                                                            : std_logic_vector(97 downto 0); -- router_008:src_data -> rsp_demux_006:sink_data
	signal router_008_src_ready                                                           : std_logic;                     -- rsp_demux_006:sink_ready -> router_008:src_ready
	signal router_008_src_channel                                                         : std_logic_vector(11 downto 0); -- router_008:src_channel -> rsp_demux_006:sink_channel
	signal router_008_src_startofpacket                                                   : std_logic;                     -- router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	signal router_008_src_endofpacket                                                     : std_logic;                     -- router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	signal timer0_s1_agent_rp_valid                                                       : std_logic;                     -- timer0_s1_agent:rp_valid -> router_009:sink_valid
	signal timer0_s1_agent_rp_data                                                        : std_logic_vector(97 downto 0); -- timer0_s1_agent:rp_data -> router_009:sink_data
	signal timer0_s1_agent_rp_ready                                                       : std_logic;                     -- router_009:sink_ready -> timer0_s1_agent:rp_ready
	signal timer0_s1_agent_rp_startofpacket                                               : std_logic;                     -- timer0_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	signal timer0_s1_agent_rp_endofpacket                                                 : std_logic;                     -- timer0_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	signal router_009_src_valid                                                           : std_logic;                     -- router_009:src_valid -> rsp_demux_007:sink_valid
	signal router_009_src_data                                                            : std_logic_vector(97 downto 0); -- router_009:src_data -> rsp_demux_007:sink_data
	signal router_009_src_ready                                                           : std_logic;                     -- rsp_demux_007:sink_ready -> router_009:src_ready
	signal router_009_src_channel                                                         : std_logic_vector(11 downto 0); -- router_009:src_channel -> rsp_demux_007:sink_channel
	signal router_009_src_startofpacket                                                   : std_logic;                     -- router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	signal router_009_src_endofpacket                                                     : std_logic;                     -- router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	signal timer1_s1_agent_rp_valid                                                       : std_logic;                     -- timer1_s1_agent:rp_valid -> router_010:sink_valid
	signal timer1_s1_agent_rp_data                                                        : std_logic_vector(97 downto 0); -- timer1_s1_agent:rp_data -> router_010:sink_data
	signal timer1_s1_agent_rp_ready                                                       : std_logic;                     -- router_010:sink_ready -> timer1_s1_agent:rp_ready
	signal timer1_s1_agent_rp_startofpacket                                               : std_logic;                     -- timer1_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	signal timer1_s1_agent_rp_endofpacket                                                 : std_logic;                     -- timer1_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	signal router_010_src_valid                                                           : std_logic;                     -- router_010:src_valid -> rsp_demux_008:sink_valid
	signal router_010_src_data                                                            : std_logic_vector(97 downto 0); -- router_010:src_data -> rsp_demux_008:sink_data
	signal router_010_src_ready                                                           : std_logic;                     -- rsp_demux_008:sink_ready -> router_010:src_ready
	signal router_010_src_channel                                                         : std_logic_vector(11 downto 0); -- router_010:src_channel -> rsp_demux_008:sink_channel
	signal router_010_src_startofpacket                                                   : std_logic;                     -- router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	signal router_010_src_endofpacket                                                     : std_logic;                     -- router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	signal toggleaccmat_s1_agent_rp_valid                                                 : std_logic;                     -- ToggleAccMat_s1_agent:rp_valid -> router_011:sink_valid
	signal toggleaccmat_s1_agent_rp_data                                                  : std_logic_vector(97 downto 0); -- ToggleAccMat_s1_agent:rp_data -> router_011:sink_data
	signal toggleaccmat_s1_agent_rp_ready                                                 : std_logic;                     -- router_011:sink_ready -> ToggleAccMat_s1_agent:rp_ready
	signal toggleaccmat_s1_agent_rp_startofpacket                                         : std_logic;                     -- ToggleAccMat_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	signal toggleaccmat_s1_agent_rp_endofpacket                                           : std_logic;                     -- ToggleAccMat_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	signal router_011_src_valid                                                           : std_logic;                     -- router_011:src_valid -> rsp_demux_009:sink_valid
	signal router_011_src_data                                                            : std_logic_vector(97 downto 0); -- router_011:src_data -> rsp_demux_009:sink_data
	signal router_011_src_ready                                                           : std_logic;                     -- rsp_demux_009:sink_ready -> router_011:src_ready
	signal router_011_src_channel                                                         : std_logic_vector(11 downto 0); -- router_011:src_channel -> rsp_demux_009:sink_channel
	signal router_011_src_startofpacket                                                   : std_logic;                     -- router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	signal router_011_src_endofpacket                                                     : std_logic;                     -- router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	signal datatoaccmat_s1_agent_rp_valid                                                 : std_logic;                     -- DataToAccMat_s1_agent:rp_valid -> router_012:sink_valid
	signal datatoaccmat_s1_agent_rp_data                                                  : std_logic_vector(97 downto 0); -- DataToAccMat_s1_agent:rp_data -> router_012:sink_data
	signal datatoaccmat_s1_agent_rp_ready                                                 : std_logic;                     -- router_012:sink_ready -> DataToAccMat_s1_agent:rp_ready
	signal datatoaccmat_s1_agent_rp_startofpacket                                         : std_logic;                     -- DataToAccMat_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	signal datatoaccmat_s1_agent_rp_endofpacket                                           : std_logic;                     -- DataToAccMat_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	signal router_012_src_valid                                                           : std_logic;                     -- router_012:src_valid -> rsp_demux_010:sink_valid
	signal router_012_src_data                                                            : std_logic_vector(97 downto 0); -- router_012:src_data -> rsp_demux_010:sink_data
	signal router_012_src_ready                                                           : std_logic;                     -- rsp_demux_010:sink_ready -> router_012:src_ready
	signal router_012_src_channel                                                         : std_logic_vector(11 downto 0); -- router_012:src_channel -> rsp_demux_010:sink_channel
	signal router_012_src_startofpacket                                                   : std_logic;                     -- router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	signal router_012_src_endofpacket                                                     : std_logic;                     -- router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	signal datafromaccmat_s1_agent_rp_valid                                               : std_logic;                     -- DataFromAccMat_s1_agent:rp_valid -> router_013:sink_valid
	signal datafromaccmat_s1_agent_rp_data                                                : std_logic_vector(97 downto 0); -- DataFromAccMat_s1_agent:rp_data -> router_013:sink_data
	signal datafromaccmat_s1_agent_rp_ready                                               : std_logic;                     -- router_013:sink_ready -> DataFromAccMat_s1_agent:rp_ready
	signal datafromaccmat_s1_agent_rp_startofpacket                                       : std_logic;                     -- DataFromAccMat_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	signal datafromaccmat_s1_agent_rp_endofpacket                                         : std_logic;                     -- DataFromAccMat_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	signal router_013_src_valid                                                           : std_logic;                     -- router_013:src_valid -> rsp_demux_011:sink_valid
	signal router_013_src_data                                                            : std_logic_vector(97 downto 0); -- router_013:src_data -> rsp_demux_011:sink_data
	signal router_013_src_ready                                                           : std_logic;                     -- rsp_demux_011:sink_ready -> router_013:src_ready
	signal router_013_src_channel                                                         : std_logic_vector(11 downto 0); -- router_013:src_channel -> rsp_demux_011:sink_channel
	signal router_013_src_startofpacket                                                   : std_logic;                     -- router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	signal router_013_src_endofpacket                                                     : std_logic;                     -- router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	signal cmd_demux_src1_valid                                                           : std_logic;                     -- cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	signal cmd_demux_src1_data                                                            : std_logic_vector(97 downto 0); -- cmd_demux:src1_data -> cmd_mux_001:sink0_data
	signal cmd_demux_src1_ready                                                           : std_logic;                     -- cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	signal cmd_demux_src1_channel                                                         : std_logic_vector(11 downto 0); -- cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	signal cmd_demux_src1_startofpacket                                                   : std_logic;                     -- cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	signal cmd_demux_src1_endofpacket                                                     : std_logic;                     -- cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	signal cmd_demux_src2_valid                                                           : std_logic;                     -- cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	signal cmd_demux_src2_data                                                            : std_logic_vector(97 downto 0); -- cmd_demux:src2_data -> cmd_mux_002:sink0_data
	signal cmd_demux_src2_ready                                                           : std_logic;                     -- cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	signal cmd_demux_src2_channel                                                         : std_logic_vector(11 downto 0); -- cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	signal cmd_demux_src2_startofpacket                                                   : std_logic;                     -- cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	signal cmd_demux_src2_endofpacket                                                     : std_logic;                     -- cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	signal cmd_demux_src3_valid                                                           : std_logic;                     -- cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	signal cmd_demux_src3_data                                                            : std_logic_vector(97 downto 0); -- cmd_demux:src3_data -> cmd_mux_003:sink0_data
	signal cmd_demux_src3_ready                                                           : std_logic;                     -- cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	signal cmd_demux_src3_channel                                                         : std_logic_vector(11 downto 0); -- cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	signal cmd_demux_src3_startofpacket                                                   : std_logic;                     -- cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	signal cmd_demux_src3_endofpacket                                                     : std_logic;                     -- cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	signal cmd_demux_src4_valid                                                           : std_logic;                     -- cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	signal cmd_demux_src4_data                                                            : std_logic_vector(97 downto 0); -- cmd_demux:src4_data -> cmd_mux_004:sink0_data
	signal cmd_demux_src4_ready                                                           : std_logic;                     -- cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	signal cmd_demux_src4_channel                                                         : std_logic_vector(11 downto 0); -- cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	signal cmd_demux_src4_startofpacket                                                   : std_logic;                     -- cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	signal cmd_demux_src4_endofpacket                                                     : std_logic;                     -- cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	signal cmd_demux_src5_valid                                                           : std_logic;                     -- cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	signal cmd_demux_src5_data                                                            : std_logic_vector(97 downto 0); -- cmd_demux:src5_data -> cmd_mux_005:sink0_data
	signal cmd_demux_src5_ready                                                           : std_logic;                     -- cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	signal cmd_demux_src5_channel                                                         : std_logic_vector(11 downto 0); -- cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	signal cmd_demux_src5_startofpacket                                                   : std_logic;                     -- cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	signal cmd_demux_src5_endofpacket                                                     : std_logic;                     -- cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	signal cmd_demux_src6_valid                                                           : std_logic;                     -- cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	signal cmd_demux_src6_data                                                            : std_logic_vector(97 downto 0); -- cmd_demux:src6_data -> cmd_mux_006:sink0_data
	signal cmd_demux_src6_ready                                                           : std_logic;                     -- cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	signal cmd_demux_src6_channel                                                         : std_logic_vector(11 downto 0); -- cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	signal cmd_demux_src6_startofpacket                                                   : std_logic;                     -- cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	signal cmd_demux_src6_endofpacket                                                     : std_logic;                     -- cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	signal cmd_demux_src7_valid                                                           : std_logic;                     -- cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	signal cmd_demux_src7_data                                                            : std_logic_vector(97 downto 0); -- cmd_demux:src7_data -> cmd_mux_007:sink0_data
	signal cmd_demux_src7_ready                                                           : std_logic;                     -- cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	signal cmd_demux_src7_channel                                                         : std_logic_vector(11 downto 0); -- cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	signal cmd_demux_src7_startofpacket                                                   : std_logic;                     -- cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	signal cmd_demux_src7_endofpacket                                                     : std_logic;                     -- cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	signal cmd_demux_src8_valid                                                           : std_logic;                     -- cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	signal cmd_demux_src8_data                                                            : std_logic_vector(97 downto 0); -- cmd_demux:src8_data -> cmd_mux_008:sink0_data
	signal cmd_demux_src8_ready                                                           : std_logic;                     -- cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	signal cmd_demux_src8_channel                                                         : std_logic_vector(11 downto 0); -- cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	signal cmd_demux_src8_startofpacket                                                   : std_logic;                     -- cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	signal cmd_demux_src8_endofpacket                                                     : std_logic;                     -- cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	signal cmd_demux_src9_valid                                                           : std_logic;                     -- cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	signal cmd_demux_src9_data                                                            : std_logic_vector(97 downto 0); -- cmd_demux:src9_data -> cmd_mux_009:sink0_data
	signal cmd_demux_src9_ready                                                           : std_logic;                     -- cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	signal cmd_demux_src9_channel                                                         : std_logic_vector(11 downto 0); -- cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	signal cmd_demux_src9_startofpacket                                                   : std_logic;                     -- cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	signal cmd_demux_src9_endofpacket                                                     : std_logic;                     -- cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	signal cmd_demux_src10_valid                                                          : std_logic;                     -- cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	signal cmd_demux_src10_data                                                           : std_logic_vector(97 downto 0); -- cmd_demux:src10_data -> cmd_mux_010:sink0_data
	signal cmd_demux_src10_ready                                                          : std_logic;                     -- cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	signal cmd_demux_src10_channel                                                        : std_logic_vector(11 downto 0); -- cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	signal cmd_demux_src10_startofpacket                                                  : std_logic;                     -- cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	signal cmd_demux_src10_endofpacket                                                    : std_logic;                     -- cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	signal cmd_demux_src11_valid                                                          : std_logic;                     -- cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	signal cmd_demux_src11_data                                                           : std_logic_vector(97 downto 0); -- cmd_demux:src11_data -> cmd_mux_011:sink0_data
	signal cmd_demux_src11_ready                                                          : std_logic;                     -- cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	signal cmd_demux_src11_channel                                                        : std_logic_vector(11 downto 0); -- cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	signal cmd_demux_src11_startofpacket                                                  : std_logic;                     -- cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	signal cmd_demux_src11_endofpacket                                                    : std_logic;                     -- cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	signal cmd_demux_001_src0_valid                                                       : std_logic;                     -- cmd_demux_001:src0_valid -> cmd_mux_005:sink1_valid
	signal cmd_demux_001_src0_data                                                        : std_logic_vector(97 downto 0); -- cmd_demux_001:src0_data -> cmd_mux_005:sink1_data
	signal cmd_demux_001_src0_ready                                                       : std_logic;                     -- cmd_mux_005:sink1_ready -> cmd_demux_001:src0_ready
	signal cmd_demux_001_src0_channel                                                     : std_logic_vector(11 downto 0); -- cmd_demux_001:src0_channel -> cmd_mux_005:sink1_channel
	signal cmd_demux_001_src0_startofpacket                                               : std_logic;                     -- cmd_demux_001:src0_startofpacket -> cmd_mux_005:sink1_startofpacket
	signal cmd_demux_001_src0_endofpacket                                                 : std_logic;                     -- cmd_demux_001:src0_endofpacket -> cmd_mux_005:sink1_endofpacket
	signal cmd_demux_001_src1_valid                                                       : std_logic;                     -- cmd_demux_001:src1_valid -> cmd_mux_006:sink1_valid
	signal cmd_demux_001_src1_data                                                        : std_logic_vector(97 downto 0); -- cmd_demux_001:src1_data -> cmd_mux_006:sink1_data
	signal cmd_demux_001_src1_ready                                                       : std_logic;                     -- cmd_mux_006:sink1_ready -> cmd_demux_001:src1_ready
	signal cmd_demux_001_src1_channel                                                     : std_logic_vector(11 downto 0); -- cmd_demux_001:src1_channel -> cmd_mux_006:sink1_channel
	signal cmd_demux_001_src1_startofpacket                                               : std_logic;                     -- cmd_demux_001:src1_startofpacket -> cmd_mux_006:sink1_startofpacket
	signal cmd_demux_001_src1_endofpacket                                                 : std_logic;                     -- cmd_demux_001:src1_endofpacket -> cmd_mux_006:sink1_endofpacket
	signal rsp_demux_001_src0_valid                                                       : std_logic;                     -- rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	signal rsp_demux_001_src0_data                                                        : std_logic_vector(97 downto 0); -- rsp_demux_001:src0_data -> rsp_mux:sink1_data
	signal rsp_demux_001_src0_ready                                                       : std_logic;                     -- rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	signal rsp_demux_001_src0_channel                                                     : std_logic_vector(11 downto 0); -- rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	signal rsp_demux_001_src0_startofpacket                                               : std_logic;                     -- rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	signal rsp_demux_001_src0_endofpacket                                                 : std_logic;                     -- rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	signal rsp_demux_002_src0_valid                                                       : std_logic;                     -- rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	signal rsp_demux_002_src0_data                                                        : std_logic_vector(97 downto 0); -- rsp_demux_002:src0_data -> rsp_mux:sink2_data
	signal rsp_demux_002_src0_ready                                                       : std_logic;                     -- rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	signal rsp_demux_002_src0_channel                                                     : std_logic_vector(11 downto 0); -- rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	signal rsp_demux_002_src0_startofpacket                                               : std_logic;                     -- rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	signal rsp_demux_002_src0_endofpacket                                                 : std_logic;                     -- rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	signal rsp_demux_003_src0_valid                                                       : std_logic;                     -- rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	signal rsp_demux_003_src0_data                                                        : std_logic_vector(97 downto 0); -- rsp_demux_003:src0_data -> rsp_mux:sink3_data
	signal rsp_demux_003_src0_ready                                                       : std_logic;                     -- rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	signal rsp_demux_003_src0_channel                                                     : std_logic_vector(11 downto 0); -- rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	signal rsp_demux_003_src0_startofpacket                                               : std_logic;                     -- rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	signal rsp_demux_003_src0_endofpacket                                                 : std_logic;                     -- rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	signal rsp_demux_004_src0_valid                                                       : std_logic;                     -- rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	signal rsp_demux_004_src0_data                                                        : std_logic_vector(97 downto 0); -- rsp_demux_004:src0_data -> rsp_mux:sink4_data
	signal rsp_demux_004_src0_ready                                                       : std_logic;                     -- rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	signal rsp_demux_004_src0_channel                                                     : std_logic_vector(11 downto 0); -- rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	signal rsp_demux_004_src0_startofpacket                                               : std_logic;                     -- rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	signal rsp_demux_004_src0_endofpacket                                                 : std_logic;                     -- rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	signal rsp_demux_005_src0_valid                                                       : std_logic;                     -- rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	signal rsp_demux_005_src0_data                                                        : std_logic_vector(97 downto 0); -- rsp_demux_005:src0_data -> rsp_mux:sink5_data
	signal rsp_demux_005_src0_ready                                                       : std_logic;                     -- rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	signal rsp_demux_005_src0_channel                                                     : std_logic_vector(11 downto 0); -- rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	signal rsp_demux_005_src0_startofpacket                                               : std_logic;                     -- rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	signal rsp_demux_005_src0_endofpacket                                                 : std_logic;                     -- rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	signal rsp_demux_005_src1_valid                                                       : std_logic;                     -- rsp_demux_005:src1_valid -> rsp_mux_001:sink0_valid
	signal rsp_demux_005_src1_data                                                        : std_logic_vector(97 downto 0); -- rsp_demux_005:src1_data -> rsp_mux_001:sink0_data
	signal rsp_demux_005_src1_ready                                                       : std_logic;                     -- rsp_mux_001:sink0_ready -> rsp_demux_005:src1_ready
	signal rsp_demux_005_src1_channel                                                     : std_logic_vector(11 downto 0); -- rsp_demux_005:src1_channel -> rsp_mux_001:sink0_channel
	signal rsp_demux_005_src1_startofpacket                                               : std_logic;                     -- rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	signal rsp_demux_005_src1_endofpacket                                                 : std_logic;                     -- rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	signal rsp_demux_006_src0_valid                                                       : std_logic;                     -- rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	signal rsp_demux_006_src0_data                                                        : std_logic_vector(97 downto 0); -- rsp_demux_006:src0_data -> rsp_mux:sink6_data
	signal rsp_demux_006_src0_ready                                                       : std_logic;                     -- rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	signal rsp_demux_006_src0_channel                                                     : std_logic_vector(11 downto 0); -- rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	signal rsp_demux_006_src0_startofpacket                                               : std_logic;                     -- rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	signal rsp_demux_006_src0_endofpacket                                                 : std_logic;                     -- rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	signal rsp_demux_006_src1_valid                                                       : std_logic;                     -- rsp_demux_006:src1_valid -> rsp_mux_001:sink1_valid
	signal rsp_demux_006_src1_data                                                        : std_logic_vector(97 downto 0); -- rsp_demux_006:src1_data -> rsp_mux_001:sink1_data
	signal rsp_demux_006_src1_ready                                                       : std_logic;                     -- rsp_mux_001:sink1_ready -> rsp_demux_006:src1_ready
	signal rsp_demux_006_src1_channel                                                     : std_logic_vector(11 downto 0); -- rsp_demux_006:src1_channel -> rsp_mux_001:sink1_channel
	signal rsp_demux_006_src1_startofpacket                                               : std_logic;                     -- rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	signal rsp_demux_006_src1_endofpacket                                                 : std_logic;                     -- rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	signal rsp_demux_007_src0_valid                                                       : std_logic;                     -- rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	signal rsp_demux_007_src0_data                                                        : std_logic_vector(97 downto 0); -- rsp_demux_007:src0_data -> rsp_mux:sink7_data
	signal rsp_demux_007_src0_ready                                                       : std_logic;                     -- rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	signal rsp_demux_007_src0_channel                                                     : std_logic_vector(11 downto 0); -- rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	signal rsp_demux_007_src0_startofpacket                                               : std_logic;                     -- rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	signal rsp_demux_007_src0_endofpacket                                                 : std_logic;                     -- rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	signal rsp_demux_008_src0_valid                                                       : std_logic;                     -- rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	signal rsp_demux_008_src0_data                                                        : std_logic_vector(97 downto 0); -- rsp_demux_008:src0_data -> rsp_mux:sink8_data
	signal rsp_demux_008_src0_ready                                                       : std_logic;                     -- rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	signal rsp_demux_008_src0_channel                                                     : std_logic_vector(11 downto 0); -- rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	signal rsp_demux_008_src0_startofpacket                                               : std_logic;                     -- rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	signal rsp_demux_008_src0_endofpacket                                                 : std_logic;                     -- rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	signal rsp_demux_009_src0_valid                                                       : std_logic;                     -- rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	signal rsp_demux_009_src0_data                                                        : std_logic_vector(97 downto 0); -- rsp_demux_009:src0_data -> rsp_mux:sink9_data
	signal rsp_demux_009_src0_ready                                                       : std_logic;                     -- rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	signal rsp_demux_009_src0_channel                                                     : std_logic_vector(11 downto 0); -- rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	signal rsp_demux_009_src0_startofpacket                                               : std_logic;                     -- rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	signal rsp_demux_009_src0_endofpacket                                                 : std_logic;                     -- rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	signal rsp_demux_010_src0_valid                                                       : std_logic;                     -- rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	signal rsp_demux_010_src0_data                                                        : std_logic_vector(97 downto 0); -- rsp_demux_010:src0_data -> rsp_mux:sink10_data
	signal rsp_demux_010_src0_ready                                                       : std_logic;                     -- rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	signal rsp_demux_010_src0_channel                                                     : std_logic_vector(11 downto 0); -- rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	signal rsp_demux_010_src0_startofpacket                                               : std_logic;                     -- rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	signal rsp_demux_010_src0_endofpacket                                                 : std_logic;                     -- rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	signal rsp_demux_011_src0_valid                                                       : std_logic;                     -- rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	signal rsp_demux_011_src0_data                                                        : std_logic_vector(97 downto 0); -- rsp_demux_011:src0_data -> rsp_mux:sink11_data
	signal rsp_demux_011_src0_ready                                                       : std_logic;                     -- rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	signal rsp_demux_011_src0_channel                                                     : std_logic_vector(11 downto 0); -- rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	signal rsp_demux_011_src0_startofpacket                                               : std_logic;                     -- rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	signal rsp_demux_011_src0_endofpacket                                                 : std_logic;                     -- rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	signal cmd_demux_src0_valid                                                           : std_logic;                     -- cmd_demux:src0_valid -> crosser:in_valid
	signal cmd_demux_src0_data                                                            : std_logic_vector(97 downto 0); -- cmd_demux:src0_data -> crosser:in_data
	signal cmd_demux_src0_ready                                                           : std_logic;                     -- crosser:in_ready -> cmd_demux:src0_ready
	signal cmd_demux_src0_channel                                                         : std_logic_vector(11 downto 0); -- cmd_demux:src0_channel -> crosser:in_channel
	signal cmd_demux_src0_startofpacket                                                   : std_logic;                     -- cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	signal cmd_demux_src0_endofpacket                                                     : std_logic;                     -- cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	signal crosser_out_valid                                                              : std_logic;                     -- crosser:out_valid -> cmd_mux:sink0_valid
	signal crosser_out_data                                                               : std_logic_vector(97 downto 0); -- crosser:out_data -> cmd_mux:sink0_data
	signal crosser_out_ready                                                              : std_logic;                     -- cmd_mux:sink0_ready -> crosser:out_ready
	signal crosser_out_channel                                                            : std_logic_vector(11 downto 0); -- crosser:out_channel -> cmd_mux:sink0_channel
	signal crosser_out_startofpacket                                                      : std_logic;                     -- crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	signal crosser_out_endofpacket                                                        : std_logic;                     -- crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	signal rsp_demux_src0_valid                                                           : std_logic;                     -- rsp_demux:src0_valid -> crosser_001:in_valid
	signal rsp_demux_src0_data                                                            : std_logic_vector(97 downto 0); -- rsp_demux:src0_data -> crosser_001:in_data
	signal rsp_demux_src0_ready                                                           : std_logic;                     -- crosser_001:in_ready -> rsp_demux:src0_ready
	signal rsp_demux_src0_channel                                                         : std_logic_vector(11 downto 0); -- rsp_demux:src0_channel -> crosser_001:in_channel
	signal rsp_demux_src0_startofpacket                                                   : std_logic;                     -- rsp_demux:src0_startofpacket -> crosser_001:in_startofpacket
	signal rsp_demux_src0_endofpacket                                                     : std_logic;                     -- rsp_demux:src0_endofpacket -> crosser_001:in_endofpacket
	signal crosser_001_out_valid                                                          : std_logic;                     -- crosser_001:out_valid -> rsp_mux:sink0_valid
	signal crosser_001_out_data                                                           : std_logic_vector(97 downto 0); -- crosser_001:out_data -> rsp_mux:sink0_data
	signal crosser_001_out_ready                                                          : std_logic;                     -- rsp_mux:sink0_ready -> crosser_001:out_ready
	signal crosser_001_out_channel                                                        : std_logic_vector(11 downto 0); -- crosser_001:out_channel -> rsp_mux:sink0_channel
	signal crosser_001_out_startofpacket                                                  : std_logic;                     -- crosser_001:out_startofpacket -> rsp_mux:sink0_startofpacket
	signal crosser_001_out_endofpacket                                                    : std_logic;                     -- crosser_001:out_endofpacket -> rsp_mux:sink0_endofpacket
	signal audio_avalon_audio_slave_agent_rdata_fifo_out_valid                            : std_logic;                     -- audio_avalon_audio_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	signal audio_avalon_audio_slave_agent_rdata_fifo_out_data                             : std_logic_vector(33 downto 0); -- audio_avalon_audio_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	signal audio_avalon_audio_slave_agent_rdata_fifo_out_ready                            : std_logic;                     -- avalon_st_adapter:in_0_ready -> audio_avalon_audio_slave_agent_rdata_fifo:out_ready
	signal avalon_st_adapter_out_0_valid                                                  : std_logic;                     -- avalon_st_adapter:out_0_valid -> audio_avalon_audio_slave_agent:rdata_fifo_sink_valid
	signal avalon_st_adapter_out_0_data                                                   : std_logic_vector(33 downto 0); -- avalon_st_adapter:out_0_data -> audio_avalon_audio_slave_agent:rdata_fifo_sink_data
	signal avalon_st_adapter_out_0_ready                                                  : std_logic;                     -- audio_avalon_audio_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	signal avalon_st_adapter_out_0_error                                                  : std_logic_vector(0 downto 0);  -- avalon_st_adapter:out_0_error -> audio_avalon_audio_slave_agent:rdata_fifo_sink_error
	signal audio_and_video_config_avalon_av_config_slave_agent_rdata_fifo_src_valid       : std_logic;                     -- audio_and_video_config_avalon_av_config_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	signal audio_and_video_config_avalon_av_config_slave_agent_rdata_fifo_src_data        : std_logic_vector(33 downto 0); -- audio_and_video_config_avalon_av_config_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	signal audio_and_video_config_avalon_av_config_slave_agent_rdata_fifo_src_ready       : std_logic;                     -- avalon_st_adapter_001:in_0_ready -> audio_and_video_config_avalon_av_config_slave_agent:rdata_fifo_src_ready
	signal avalon_st_adapter_001_out_0_valid                                              : std_logic;                     -- avalon_st_adapter_001:out_0_valid -> audio_and_video_config_avalon_av_config_slave_agent:rdata_fifo_sink_valid
	signal avalon_st_adapter_001_out_0_data                                               : std_logic_vector(33 downto 0); -- avalon_st_adapter_001:out_0_data -> audio_and_video_config_avalon_av_config_slave_agent:rdata_fifo_sink_data
	signal avalon_st_adapter_001_out_0_ready                                              : std_logic;                     -- audio_and_video_config_avalon_av_config_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	signal avalon_st_adapter_001_out_0_error                                              : std_logic_vector(0 downto 0);  -- avalon_st_adapter_001:out_0_error -> audio_and_video_config_avalon_av_config_slave_agent:rdata_fifo_sink_error
	signal jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid                       : std_logic;                     -- jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	signal jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data                        : std_logic_vector(33 downto 0); -- jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	signal jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready                       : std_logic;                     -- avalon_st_adapter_002:in_0_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	signal avalon_st_adapter_002_out_0_valid                                              : std_logic;                     -- avalon_st_adapter_002:out_0_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	signal avalon_st_adapter_002_out_0_data                                               : std_logic_vector(33 downto 0); -- avalon_st_adapter_002:out_0_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	signal avalon_st_adapter_002_out_0_ready                                              : std_logic;                     -- jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	signal avalon_st_adapter_002_out_0_error                                              : std_logic_vector(0 downto 0);  -- avalon_st_adapter_002:out_0_error -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_error
	signal ps2_avalon_ps2_slave_agent_rdata_fifo_src_valid                                : std_logic;                     -- ps2_avalon_ps2_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	signal ps2_avalon_ps2_slave_agent_rdata_fifo_src_data                                 : std_logic_vector(33 downto 0); -- ps2_avalon_ps2_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	signal ps2_avalon_ps2_slave_agent_rdata_fifo_src_ready                                : std_logic;                     -- avalon_st_adapter_003:in_0_ready -> ps2_avalon_ps2_slave_agent:rdata_fifo_src_ready
	signal avalon_st_adapter_003_out_0_valid                                              : std_logic;                     -- avalon_st_adapter_003:out_0_valid -> ps2_avalon_ps2_slave_agent:rdata_fifo_sink_valid
	signal avalon_st_adapter_003_out_0_data                                               : std_logic_vector(33 downto 0); -- avalon_st_adapter_003:out_0_data -> ps2_avalon_ps2_slave_agent:rdata_fifo_sink_data
	signal avalon_st_adapter_003_out_0_ready                                              : std_logic;                     -- ps2_avalon_ps2_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	signal avalon_st_adapter_003_out_0_error                                              : std_logic_vector(0 downto 0);  -- avalon_st_adapter_003:out_0_error -> ps2_avalon_ps2_slave_agent:rdata_fifo_sink_error
	signal sysid_control_slave_agent_rdata_fifo_src_valid                                 : std_logic;                     -- sysid_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	signal sysid_control_slave_agent_rdata_fifo_src_data                                  : std_logic_vector(33 downto 0); -- sysid_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	signal sysid_control_slave_agent_rdata_fifo_src_ready                                 : std_logic;                     -- avalon_st_adapter_004:in_0_ready -> sysid_control_slave_agent:rdata_fifo_src_ready
	signal avalon_st_adapter_004_out_0_valid                                              : std_logic;                     -- avalon_st_adapter_004:out_0_valid -> sysid_control_slave_agent:rdata_fifo_sink_valid
	signal avalon_st_adapter_004_out_0_data                                               : std_logic_vector(33 downto 0); -- avalon_st_adapter_004:out_0_data -> sysid_control_slave_agent:rdata_fifo_sink_data
	signal avalon_st_adapter_004_out_0_ready                                              : std_logic;                     -- sysid_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	signal avalon_st_adapter_004_out_0_error                                              : std_logic_vector(0 downto 0);  -- avalon_st_adapter_004:out_0_error -> sysid_control_slave_agent:rdata_fifo_sink_error
	signal cpu_debug_mem_slave_agent_rdata_fifo_src_valid                                 : std_logic;                     -- cpu_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	signal cpu_debug_mem_slave_agent_rdata_fifo_src_data                                  : std_logic_vector(33 downto 0); -- cpu_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	signal cpu_debug_mem_slave_agent_rdata_fifo_src_ready                                 : std_logic;                     -- avalon_st_adapter_005:in_0_ready -> cpu_debug_mem_slave_agent:rdata_fifo_src_ready
	signal avalon_st_adapter_005_out_0_valid                                              : std_logic;                     -- avalon_st_adapter_005:out_0_valid -> cpu_debug_mem_slave_agent:rdata_fifo_sink_valid
	signal avalon_st_adapter_005_out_0_data                                               : std_logic_vector(33 downto 0); -- avalon_st_adapter_005:out_0_data -> cpu_debug_mem_slave_agent:rdata_fifo_sink_data
	signal avalon_st_adapter_005_out_0_ready                                              : std_logic;                     -- cpu_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	signal avalon_st_adapter_005_out_0_error                                              : std_logic_vector(0 downto 0);  -- avalon_st_adapter_005:out_0_error -> cpu_debug_mem_slave_agent:rdata_fifo_sink_error
	signal onchipmem_s1_agent_rdata_fifo_src_valid                                        : std_logic;                     -- onchipmem_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	signal onchipmem_s1_agent_rdata_fifo_src_data                                         : std_logic_vector(33 downto 0); -- onchipmem_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	signal onchipmem_s1_agent_rdata_fifo_src_ready                                        : std_logic;                     -- avalon_st_adapter_006:in_0_ready -> onchipmem_s1_agent:rdata_fifo_src_ready
	signal avalon_st_adapter_006_out_0_valid                                              : std_logic;                     -- avalon_st_adapter_006:out_0_valid -> onchipmem_s1_agent:rdata_fifo_sink_valid
	signal avalon_st_adapter_006_out_0_data                                               : std_logic_vector(33 downto 0); -- avalon_st_adapter_006:out_0_data -> onchipmem_s1_agent:rdata_fifo_sink_data
	signal avalon_st_adapter_006_out_0_ready                                              : std_logic;                     -- onchipmem_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	signal avalon_st_adapter_006_out_0_error                                              : std_logic_vector(0 downto 0);  -- avalon_st_adapter_006:out_0_error -> onchipmem_s1_agent:rdata_fifo_sink_error
	signal timer0_s1_agent_rdata_fifo_src_valid                                           : std_logic;                     -- timer0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	signal timer0_s1_agent_rdata_fifo_src_data                                            : std_logic_vector(33 downto 0); -- timer0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	signal timer0_s1_agent_rdata_fifo_src_ready                                           : std_logic;                     -- avalon_st_adapter_007:in_0_ready -> timer0_s1_agent:rdata_fifo_src_ready
	signal avalon_st_adapter_007_out_0_valid                                              : std_logic;                     -- avalon_st_adapter_007:out_0_valid -> timer0_s1_agent:rdata_fifo_sink_valid
	signal avalon_st_adapter_007_out_0_data                                               : std_logic_vector(33 downto 0); -- avalon_st_adapter_007:out_0_data -> timer0_s1_agent:rdata_fifo_sink_data
	signal avalon_st_adapter_007_out_0_ready                                              : std_logic;                     -- timer0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	signal avalon_st_adapter_007_out_0_error                                              : std_logic_vector(0 downto 0);  -- avalon_st_adapter_007:out_0_error -> timer0_s1_agent:rdata_fifo_sink_error
	signal timer1_s1_agent_rdata_fifo_src_valid                                           : std_logic;                     -- timer1_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	signal timer1_s1_agent_rdata_fifo_src_data                                            : std_logic_vector(33 downto 0); -- timer1_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	signal timer1_s1_agent_rdata_fifo_src_ready                                           : std_logic;                     -- avalon_st_adapter_008:in_0_ready -> timer1_s1_agent:rdata_fifo_src_ready
	signal avalon_st_adapter_008_out_0_valid                                              : std_logic;                     -- avalon_st_adapter_008:out_0_valid -> timer1_s1_agent:rdata_fifo_sink_valid
	signal avalon_st_adapter_008_out_0_data                                               : std_logic_vector(33 downto 0); -- avalon_st_adapter_008:out_0_data -> timer1_s1_agent:rdata_fifo_sink_data
	signal avalon_st_adapter_008_out_0_ready                                              : std_logic;                     -- timer1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	signal avalon_st_adapter_008_out_0_error                                              : std_logic_vector(0 downto 0);  -- avalon_st_adapter_008:out_0_error -> timer1_s1_agent:rdata_fifo_sink_error
	signal toggleaccmat_s1_agent_rdata_fifo_src_valid                                     : std_logic;                     -- ToggleAccMat_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	signal toggleaccmat_s1_agent_rdata_fifo_src_data                                      : std_logic_vector(33 downto 0); -- ToggleAccMat_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	signal toggleaccmat_s1_agent_rdata_fifo_src_ready                                     : std_logic;                     -- avalon_st_adapter_009:in_0_ready -> ToggleAccMat_s1_agent:rdata_fifo_src_ready
	signal avalon_st_adapter_009_out_0_valid                                              : std_logic;                     -- avalon_st_adapter_009:out_0_valid -> ToggleAccMat_s1_agent:rdata_fifo_sink_valid
	signal avalon_st_adapter_009_out_0_data                                               : std_logic_vector(33 downto 0); -- avalon_st_adapter_009:out_0_data -> ToggleAccMat_s1_agent:rdata_fifo_sink_data
	signal avalon_st_adapter_009_out_0_ready                                              : std_logic;                     -- ToggleAccMat_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	signal avalon_st_adapter_009_out_0_error                                              : std_logic_vector(0 downto 0);  -- avalon_st_adapter_009:out_0_error -> ToggleAccMat_s1_agent:rdata_fifo_sink_error
	signal datatoaccmat_s1_agent_rdata_fifo_src_valid                                     : std_logic;                     -- DataToAccMat_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	signal datatoaccmat_s1_agent_rdata_fifo_src_data                                      : std_logic_vector(33 downto 0); -- DataToAccMat_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	signal datatoaccmat_s1_agent_rdata_fifo_src_ready                                     : std_logic;                     -- avalon_st_adapter_010:in_0_ready -> DataToAccMat_s1_agent:rdata_fifo_src_ready
	signal avalon_st_adapter_010_out_0_valid                                              : std_logic;                     -- avalon_st_adapter_010:out_0_valid -> DataToAccMat_s1_agent:rdata_fifo_sink_valid
	signal avalon_st_adapter_010_out_0_data                                               : std_logic_vector(33 downto 0); -- avalon_st_adapter_010:out_0_data -> DataToAccMat_s1_agent:rdata_fifo_sink_data
	signal avalon_st_adapter_010_out_0_ready                                              : std_logic;                     -- DataToAccMat_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	signal avalon_st_adapter_010_out_0_error                                              : std_logic_vector(0 downto 0);  -- avalon_st_adapter_010:out_0_error -> DataToAccMat_s1_agent:rdata_fifo_sink_error
	signal datafromaccmat_s1_agent_rdata_fifo_src_valid                                   : std_logic;                     -- DataFromAccMat_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	signal datafromaccmat_s1_agent_rdata_fifo_src_data                                    : std_logic_vector(33 downto 0); -- DataFromAccMat_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	signal datafromaccmat_s1_agent_rdata_fifo_src_ready                                   : std_logic;                     -- avalon_st_adapter_011:in_0_ready -> DataFromAccMat_s1_agent:rdata_fifo_src_ready
	signal avalon_st_adapter_011_out_0_valid                                              : std_logic;                     -- avalon_st_adapter_011:out_0_valid -> DataFromAccMat_s1_agent:rdata_fifo_sink_valid
	signal avalon_st_adapter_011_out_0_data                                               : std_logic_vector(33 downto 0); -- avalon_st_adapter_011:out_0_data -> DataFromAccMat_s1_agent:rdata_fifo_sink_data
	signal avalon_st_adapter_011_out_0_ready                                              : std_logic;                     -- DataFromAccMat_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	signal avalon_st_adapter_011_out_0_error                                              : std_logic_vector(0 downto 0);  -- avalon_st_adapter_011:out_0_error -> DataFromAccMat_s1_agent:rdata_fifo_sink_error

begin

	cpu_data_master_translator : component codecaudio_mm_interconnect_0_cpu_data_master_translator
		generic map (
			AV_ADDRESS_W                => 20,
			AV_DATA_W                   => 32,
			AV_BURSTCOUNT_W             => 1,
			AV_BYTEENABLE_W             => 4,
			UAV_ADDRESS_W               => 20,
			UAV_BURSTCOUNT_W            => 3,
			USE_READ                    => 1,
			USE_WRITE                   => 1,
			USE_BEGINBURSTTRANSFER      => 0,
			USE_BEGINTRANSFER           => 0,
			USE_CHIPSELECT              => 0,
			USE_BURSTCOUNT              => 0,
			USE_READDATAVALID           => 0,
			USE_WAITREQUEST             => 1,
			USE_READRESPONSE            => 0,
			USE_WRITERESPONSE           => 0,
			AV_SYMBOLS_PER_WORD         => 4,
			AV_ADDRESS_SYMBOLS          => 1,
			AV_BURSTCOUNT_SYMBOLS       => 0,
			AV_CONSTANT_BURST_BEHAVIOR  => 0,
			UAV_CONSTANT_BURST_BEHAVIOR => 0,
			AV_LINEWRAPBURSTS           => 0,
			AV_REGISTERINCOMINGSIGNALS  => 1
		)
		port map (
			clk                    => pll_0_outclk0_clk,                                                  --                       clk.clk
			reset                  => cpu_reset_reset_bridge_in_reset_reset,                              --                     reset.reset
			uav_address            => cpu_data_master_translator_avalon_universal_master_0_address,       -- avalon_universal_master_0.address
			uav_burstcount         => cpu_data_master_translator_avalon_universal_master_0_burstcount,    --                          .burstcount
			uav_read               => cpu_data_master_translator_avalon_universal_master_0_read,          --                          .read
			uav_write              => cpu_data_master_translator_avalon_universal_master_0_write,         --                          .write
			uav_waitrequest        => cpu_data_master_translator_avalon_universal_master_0_waitrequest,   --                          .waitrequest
			uav_readdatavalid      => cpu_data_master_translator_avalon_universal_master_0_readdatavalid, --                          .readdatavalid
			uav_byteenable         => cpu_data_master_translator_avalon_universal_master_0_byteenable,    --                          .byteenable
			uav_readdata           => cpu_data_master_translator_avalon_universal_master_0_readdata,      --                          .readdata
			uav_writedata          => cpu_data_master_translator_avalon_universal_master_0_writedata,     --                          .writedata
			uav_lock               => cpu_data_master_translator_avalon_universal_master_0_lock,          --                          .lock
			uav_debugaccess        => cpu_data_master_translator_avalon_universal_master_0_debugaccess,   --                          .debugaccess
			av_address             => cpu_data_master_address,                                            --      avalon_anti_master_0.address
			av_waitrequest         => cpu_data_master_waitrequest,                                        --                          .waitrequest
			av_byteenable          => cpu_data_master_byteenable,                                         --                          .byteenable
			av_read                => cpu_data_master_read,                                               --                          .read
			av_readdata            => cpu_data_master_readdata,                                           --                          .readdata
			av_write               => cpu_data_master_write,                                              --                          .write
			av_writedata           => cpu_data_master_writedata,                                          --                          .writedata
			av_debugaccess         => cpu_data_master_debugaccess,                                        --                          .debugaccess
			av_burstcount          => "1",                                                                --               (terminated)
			av_beginbursttransfer  => '0',                                                                --               (terminated)
			av_begintransfer       => '0',                                                                --               (terminated)
			av_chipselect          => '0',                                                                --               (terminated)
			av_readdatavalid       => open,                                                               --               (terminated)
			av_lock                => '0',                                                                --               (terminated)
			uav_clken              => open,                                                               --               (terminated)
			av_clken               => '1',                                                                --               (terminated)
			uav_response           => "00",                                                               --               (terminated)
			av_response            => open,                                                               --               (terminated)
			uav_writeresponsevalid => '0',                                                                --               (terminated)
			av_writeresponsevalid  => open                                                                --               (terminated)
		);

	cpu_instruction_master_translator : component codecaudio_mm_interconnect_0_cpu_instruction_master_translator
		generic map (
			AV_ADDRESS_W                => 20,
			AV_DATA_W                   => 32,
			AV_BURSTCOUNT_W             => 1,
			AV_BYTEENABLE_W             => 4,
			UAV_ADDRESS_W               => 20,
			UAV_BURSTCOUNT_W            => 3,
			USE_READ                    => 1,
			USE_WRITE                   => 0,
			USE_BEGINBURSTTRANSFER      => 0,
			USE_BEGINTRANSFER           => 0,
			USE_CHIPSELECT              => 0,
			USE_BURSTCOUNT              => 0,
			USE_READDATAVALID           => 0,
			USE_WAITREQUEST             => 1,
			USE_READRESPONSE            => 0,
			USE_WRITERESPONSE           => 0,
			AV_SYMBOLS_PER_WORD         => 4,
			AV_ADDRESS_SYMBOLS          => 1,
			AV_BURSTCOUNT_SYMBOLS       => 0,
			AV_CONSTANT_BURST_BEHAVIOR  => 0,
			UAV_CONSTANT_BURST_BEHAVIOR => 0,
			AV_LINEWRAPBURSTS           => 1,
			AV_REGISTERINCOMINGSIGNALS  => 0
		)
		port map (
			clk                    => pll_0_outclk0_clk,                                                         --                       clk.clk
			reset                  => cpu_reset_reset_bridge_in_reset_reset,                                     --                     reset.reset
			uav_address            => cpu_instruction_master_translator_avalon_universal_master_0_address,       -- avalon_universal_master_0.address
			uav_burstcount         => cpu_instruction_master_translator_avalon_universal_master_0_burstcount,    --                          .burstcount
			uav_read               => cpu_instruction_master_translator_avalon_universal_master_0_read,          --                          .read
			uav_write              => cpu_instruction_master_translator_avalon_universal_master_0_write,         --                          .write
			uav_waitrequest        => cpu_instruction_master_translator_avalon_universal_master_0_waitrequest,   --                          .waitrequest
			uav_readdatavalid      => cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid, --                          .readdatavalid
			uav_byteenable         => cpu_instruction_master_translator_avalon_universal_master_0_byteenable,    --                          .byteenable
			uav_readdata           => cpu_instruction_master_translator_avalon_universal_master_0_readdata,      --                          .readdata
			uav_writedata          => cpu_instruction_master_translator_avalon_universal_master_0_writedata,     --                          .writedata
			uav_lock               => cpu_instruction_master_translator_avalon_universal_master_0_lock,          --                          .lock
			uav_debugaccess        => cpu_instruction_master_translator_avalon_universal_master_0_debugaccess,   --                          .debugaccess
			av_address             => cpu_instruction_master_address,                                            --      avalon_anti_master_0.address
			av_waitrequest         => cpu_instruction_master_waitrequest,                                        --                          .waitrequest
			av_read                => cpu_instruction_master_read,                                               --                          .read
			av_readdata            => cpu_instruction_master_readdata,                                           --                          .readdata
			av_burstcount          => "1",                                                                       --               (terminated)
			av_byteenable          => "1111",                                                                    --               (terminated)
			av_beginbursttransfer  => '0',                                                                       --               (terminated)
			av_begintransfer       => '0',                                                                       --               (terminated)
			av_chipselect          => '0',                                                                       --               (terminated)
			av_readdatavalid       => open,                                                                      --               (terminated)
			av_write               => '0',                                                                       --               (terminated)
			av_writedata           => "00000000000000000000000000000000",                                        --               (terminated)
			av_lock                => '0',                                                                       --               (terminated)
			av_debugaccess         => '0',                                                                       --               (terminated)
			uav_clken              => open,                                                                      --               (terminated)
			av_clken               => '1',                                                                       --               (terminated)
			uav_response           => "00",                                                                      --               (terminated)
			av_response            => open,                                                                      --               (terminated)
			uav_writeresponsevalid => '0',                                                                       --               (terminated)
			av_writeresponsevalid  => open                                                                       --               (terminated)
		);

	audio_avalon_audio_slave_translator : component codecaudio_mm_interconnect_0_audio_avalon_audio_slave_translator
		generic map (
			AV_ADDRESS_W                   => 2,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 4,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 20,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 1,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 0,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => dac_pll_audio_clk_clk,                           --                      clk.clk
			reset                  => audio_reset_reset_bridge_in_reset_reset,         --                    reset.reset
			uav_address            => audio_avalon_audio_slave_agent_m0_address,       -- avalon_universal_slave_0.address
			uav_burstcount         => audio_avalon_audio_slave_agent_m0_burstcount,    --                         .burstcount
			uav_read               => audio_avalon_audio_slave_agent_m0_read,          --                         .read
			uav_write              => audio_avalon_audio_slave_agent_m0_write,         --                         .write
			uav_waitrequest        => audio_avalon_audio_slave_agent_m0_waitrequest,   --                         .waitrequest
			uav_readdatavalid      => audio_avalon_audio_slave_agent_m0_readdatavalid, --                         .readdatavalid
			uav_byteenable         => audio_avalon_audio_slave_agent_m0_byteenable,    --                         .byteenable
			uav_readdata           => audio_avalon_audio_slave_agent_m0_readdata,      --                         .readdata
			uav_writedata          => audio_avalon_audio_slave_agent_m0_writedata,     --                         .writedata
			uav_lock               => audio_avalon_audio_slave_agent_m0_lock,          --                         .lock
			uav_debugaccess        => audio_avalon_audio_slave_agent_m0_debugaccess,   --                         .debugaccess
			av_address             => audio_avalon_audio_slave_address,                --      avalon_anti_slave_0.address
			av_write               => audio_avalon_audio_slave_write,                  --                         .write
			av_read                => audio_avalon_audio_slave_read,                   --                         .read
			av_readdata            => audio_avalon_audio_slave_readdata,               --                         .readdata
			av_writedata           => audio_avalon_audio_slave_writedata,              --                         .writedata
			av_chipselect          => audio_avalon_audio_slave_chipselect,             --                         .chipselect
			av_begintransfer       => open,                                            --              (terminated)
			av_beginbursttransfer  => open,                                            --              (terminated)
			av_burstcount          => open,                                            --              (terminated)
			av_byteenable          => open,                                            --              (terminated)
			av_readdatavalid       => '0',                                             --              (terminated)
			av_waitrequest         => '0',                                             --              (terminated)
			av_writebyteenable     => open,                                            --              (terminated)
			av_lock                => open,                                            --              (terminated)
			av_clken               => open,                                            --              (terminated)
			uav_clken              => '0',                                             --              (terminated)
			av_debugaccess         => open,                                            --              (terminated)
			av_outputenable        => open,                                            --              (terminated)
			uav_response           => open,                                            --              (terminated)
			av_response            => "00",                                            --              (terminated)
			uav_writeresponsevalid => open,                                            --              (terminated)
			av_writeresponsevalid  => '0'                                              --              (terminated)
		);

	audio_and_video_config_avalon_av_config_slave_translator : component codecaudio_mm_interconnect_0_audio_and_video_config_avalon_av_config_slave_translator
		generic map (
			AV_ADDRESS_W                   => 2,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 4,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 20,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 1,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 1,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 0,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => pll_0_outclk0_clk,                                                    --                      clk.clk
			reset                  => cpu_reset_reset_bridge_in_reset_reset,                                --                    reset.reset
			uav_address            => audio_and_video_config_avalon_av_config_slave_agent_m0_address,       -- avalon_universal_slave_0.address
			uav_burstcount         => audio_and_video_config_avalon_av_config_slave_agent_m0_burstcount,    --                         .burstcount
			uav_read               => audio_and_video_config_avalon_av_config_slave_agent_m0_read,          --                         .read
			uav_write              => audio_and_video_config_avalon_av_config_slave_agent_m0_write,         --                         .write
			uav_waitrequest        => audio_and_video_config_avalon_av_config_slave_agent_m0_waitrequest,   --                         .waitrequest
			uav_readdatavalid      => audio_and_video_config_avalon_av_config_slave_agent_m0_readdatavalid, --                         .readdatavalid
			uav_byteenable         => audio_and_video_config_avalon_av_config_slave_agent_m0_byteenable,    --                         .byteenable
			uav_readdata           => audio_and_video_config_avalon_av_config_slave_agent_m0_readdata,      --                         .readdata
			uav_writedata          => audio_and_video_config_avalon_av_config_slave_agent_m0_writedata,     --                         .writedata
			uav_lock               => audio_and_video_config_avalon_av_config_slave_agent_m0_lock,          --                         .lock
			uav_debugaccess        => audio_and_video_config_avalon_av_config_slave_agent_m0_debugaccess,   --                         .debugaccess
			av_address             => audio_and_video_config_avalon_av_config_slave_address,                --      avalon_anti_slave_0.address
			av_write               => audio_and_video_config_avalon_av_config_slave_write,                  --                         .write
			av_read                => audio_and_video_config_avalon_av_config_slave_read,                   --                         .read
			av_readdata            => audio_and_video_config_avalon_av_config_slave_readdata,               --                         .readdata
			av_writedata           => audio_and_video_config_avalon_av_config_slave_writedata,              --                         .writedata
			av_byteenable          => audio_and_video_config_avalon_av_config_slave_byteenable,             --                         .byteenable
			av_waitrequest         => audio_and_video_config_avalon_av_config_slave_waitrequest,            --                         .waitrequest
			av_begintransfer       => open,                                                                 --              (terminated)
			av_beginbursttransfer  => open,                                                                 --              (terminated)
			av_burstcount          => open,                                                                 --              (terminated)
			av_readdatavalid       => '0',                                                                  --              (terminated)
			av_writebyteenable     => open,                                                                 --              (terminated)
			av_lock                => open,                                                                 --              (terminated)
			av_chipselect          => open,                                                                 --              (terminated)
			av_clken               => open,                                                                 --              (terminated)
			uav_clken              => '0',                                                                  --              (terminated)
			av_debugaccess         => open,                                                                 --              (terminated)
			av_outputenable        => open,                                                                 --              (terminated)
			uav_response           => open,                                                                 --              (terminated)
			av_response            => "00",                                                                 --              (terminated)
			uav_writeresponsevalid => open,                                                                 --              (terminated)
			av_writeresponsevalid  => '0'                                                                   --              (terminated)
		);

	jtag_uart_0_avalon_jtag_slave_translator : component codecaudio_mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_translator
		generic map (
			AV_ADDRESS_W                   => 1,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 1,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 20,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 1,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => pll_0_outclk0_clk,                                    --                      clk.clk
			reset                  => cpu_reset_reset_bridge_in_reset_reset,                --                    reset.reset
			uav_address            => jtag_uart_0_avalon_jtag_slave_agent_m0_address,       -- avalon_universal_slave_0.address
			uav_burstcount         => jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount,    --                         .burstcount
			uav_read               => jtag_uart_0_avalon_jtag_slave_agent_m0_read,          --                         .read
			uav_write              => jtag_uart_0_avalon_jtag_slave_agent_m0_write,         --                         .write
			uav_waitrequest        => jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest,   --                         .waitrequest
			uav_readdatavalid      => jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid, --                         .readdatavalid
			uav_byteenable         => jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable,    --                         .byteenable
			uav_readdata           => jtag_uart_0_avalon_jtag_slave_agent_m0_readdata,      --                         .readdata
			uav_writedata          => jtag_uart_0_avalon_jtag_slave_agent_m0_writedata,     --                         .writedata
			uav_lock               => jtag_uart_0_avalon_jtag_slave_agent_m0_lock,          --                         .lock
			uav_debugaccess        => jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess,   --                         .debugaccess
			av_address             => jtag_uart_0_avalon_jtag_slave_address,                --      avalon_anti_slave_0.address
			av_write               => jtag_uart_0_avalon_jtag_slave_write,                  --                         .write
			av_read                => jtag_uart_0_avalon_jtag_slave_read,                   --                         .read
			av_readdata            => jtag_uart_0_avalon_jtag_slave_readdata,               --                         .readdata
			av_writedata           => jtag_uart_0_avalon_jtag_slave_writedata,              --                         .writedata
			av_waitrequest         => jtag_uart_0_avalon_jtag_slave_waitrequest,            --                         .waitrequest
			av_chipselect          => jtag_uart_0_avalon_jtag_slave_chipselect,             --                         .chipselect
			av_begintransfer       => open,                                                 --              (terminated)
			av_beginbursttransfer  => open,                                                 --              (terminated)
			av_burstcount          => open,                                                 --              (terminated)
			av_byteenable          => open,                                                 --              (terminated)
			av_readdatavalid       => '0',                                                  --              (terminated)
			av_writebyteenable     => open,                                                 --              (terminated)
			av_lock                => open,                                                 --              (terminated)
			av_clken               => open,                                                 --              (terminated)
			uav_clken              => '0',                                                  --              (terminated)
			av_debugaccess         => open,                                                 --              (terminated)
			av_outputenable        => open,                                                 --              (terminated)
			uav_response           => open,                                                 --              (terminated)
			av_response            => "00",                                                 --              (terminated)
			uav_writeresponsevalid => open,                                                 --              (terminated)
			av_writeresponsevalid  => '0'                                                   --              (terminated)
		);

	ps2_avalon_ps2_slave_translator : component codecaudio_mm_interconnect_0_ps2_avalon_ps2_slave_translator
		generic map (
			AV_ADDRESS_W                   => 1,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 4,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 20,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 1,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 1,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 0,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => pll_0_outclk0_clk,                           --                      clk.clk
			reset                  => cpu_reset_reset_bridge_in_reset_reset,       --                    reset.reset
			uav_address            => ps2_avalon_ps2_slave_agent_m0_address,       -- avalon_universal_slave_0.address
			uav_burstcount         => ps2_avalon_ps2_slave_agent_m0_burstcount,    --                         .burstcount
			uav_read               => ps2_avalon_ps2_slave_agent_m0_read,          --                         .read
			uav_write              => ps2_avalon_ps2_slave_agent_m0_write,         --                         .write
			uav_waitrequest        => ps2_avalon_ps2_slave_agent_m0_waitrequest,   --                         .waitrequest
			uav_readdatavalid      => ps2_avalon_ps2_slave_agent_m0_readdatavalid, --                         .readdatavalid
			uav_byteenable         => ps2_avalon_ps2_slave_agent_m0_byteenable,    --                         .byteenable
			uav_readdata           => ps2_avalon_ps2_slave_agent_m0_readdata,      --                         .readdata
			uav_writedata          => ps2_avalon_ps2_slave_agent_m0_writedata,     --                         .writedata
			uav_lock               => ps2_avalon_ps2_slave_agent_m0_lock,          --                         .lock
			uav_debugaccess        => ps2_avalon_ps2_slave_agent_m0_debugaccess,   --                         .debugaccess
			av_address             => ps2_avalon_ps2_slave_address,                --      avalon_anti_slave_0.address
			av_write               => ps2_avalon_ps2_slave_write,                  --                         .write
			av_read                => ps2_avalon_ps2_slave_read,                   --                         .read
			av_readdata            => ps2_avalon_ps2_slave_readdata,               --                         .readdata
			av_writedata           => ps2_avalon_ps2_slave_writedata,              --                         .writedata
			av_byteenable          => ps2_avalon_ps2_slave_byteenable,             --                         .byteenable
			av_waitrequest         => ps2_avalon_ps2_slave_waitrequest,            --                         .waitrequest
			av_chipselect          => ps2_avalon_ps2_slave_chipselect,             --                         .chipselect
			av_begintransfer       => open,                                        --              (terminated)
			av_beginbursttransfer  => open,                                        --              (terminated)
			av_burstcount          => open,                                        --              (terminated)
			av_readdatavalid       => '0',                                         --              (terminated)
			av_writebyteenable     => open,                                        --              (terminated)
			av_lock                => open,                                        --              (terminated)
			av_clken               => open,                                        --              (terminated)
			uav_clken              => '0',                                         --              (terminated)
			av_debugaccess         => open,                                        --              (terminated)
			av_outputenable        => open,                                        --              (terminated)
			uav_response           => open,                                        --              (terminated)
			av_response            => "00",                                        --              (terminated)
			uav_writeresponsevalid => open,                                        --              (terminated)
			av_writeresponsevalid  => '0'                                          --              (terminated)
		);

	sysid_control_slave_translator : component codecaudio_mm_interconnect_0_sysid_control_slave_translator
		generic map (
			AV_ADDRESS_W                   => 1,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 4,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 20,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => pll_0_outclk0_clk,                          --                      clk.clk
			reset                  => cpu_reset_reset_bridge_in_reset_reset,      --                    reset.reset
			uav_address            => sysid_control_slave_agent_m0_address,       -- avalon_universal_slave_0.address
			uav_burstcount         => sysid_control_slave_agent_m0_burstcount,    --                         .burstcount
			uav_read               => sysid_control_slave_agent_m0_read,          --                         .read
			uav_write              => sysid_control_slave_agent_m0_write,         --                         .write
			uav_waitrequest        => sysid_control_slave_agent_m0_waitrequest,   --                         .waitrequest
			uav_readdatavalid      => sysid_control_slave_agent_m0_readdatavalid, --                         .readdatavalid
			uav_byteenable         => sysid_control_slave_agent_m0_byteenable,    --                         .byteenable
			uav_readdata           => sysid_control_slave_agent_m0_readdata,      --                         .readdata
			uav_writedata          => sysid_control_slave_agent_m0_writedata,     --                         .writedata
			uav_lock               => sysid_control_slave_agent_m0_lock,          --                         .lock
			uav_debugaccess        => sysid_control_slave_agent_m0_debugaccess,   --                         .debugaccess
			av_address             => sysid_control_slave_address,                --      avalon_anti_slave_0.address
			av_readdata            => sysid_control_slave_readdata,               --                         .readdata
			av_write               => open,                                       --              (terminated)
			av_read                => open,                                       --              (terminated)
			av_writedata           => open,                                       --              (terminated)
			av_begintransfer       => open,                                       --              (terminated)
			av_beginbursttransfer  => open,                                       --              (terminated)
			av_burstcount          => open,                                       --              (terminated)
			av_byteenable          => open,                                       --              (terminated)
			av_readdatavalid       => '0',                                        --              (terminated)
			av_waitrequest         => '0',                                        --              (terminated)
			av_writebyteenable     => open,                                       --              (terminated)
			av_lock                => open,                                       --              (terminated)
			av_chipselect          => open,                                       --              (terminated)
			av_clken               => open,                                       --              (terminated)
			uav_clken              => '0',                                        --              (terminated)
			av_debugaccess         => open,                                       --              (terminated)
			av_outputenable        => open,                                       --              (terminated)
			uav_response           => open,                                       --              (terminated)
			av_response            => "00",                                       --              (terminated)
			uav_writeresponsevalid => open,                                       --              (terminated)
			av_writeresponsevalid  => '0'                                         --              (terminated)
		);

	cpu_debug_mem_slave_translator : component codecaudio_mm_interconnect_0_cpu_debug_mem_slave_translator
		generic map (
			AV_ADDRESS_W                   => 9,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 4,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 20,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 1,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => pll_0_outclk0_clk,                          --                      clk.clk
			reset                  => cpu_reset_reset_bridge_in_reset_reset,      --                    reset.reset
			uav_address            => cpu_debug_mem_slave_agent_m0_address,       -- avalon_universal_slave_0.address
			uav_burstcount         => cpu_debug_mem_slave_agent_m0_burstcount,    --                         .burstcount
			uav_read               => cpu_debug_mem_slave_agent_m0_read,          --                         .read
			uav_write              => cpu_debug_mem_slave_agent_m0_write,         --                         .write
			uav_waitrequest        => cpu_debug_mem_slave_agent_m0_waitrequest,   --                         .waitrequest
			uav_readdatavalid      => cpu_debug_mem_slave_agent_m0_readdatavalid, --                         .readdatavalid
			uav_byteenable         => cpu_debug_mem_slave_agent_m0_byteenable,    --                         .byteenable
			uav_readdata           => cpu_debug_mem_slave_agent_m0_readdata,      --                         .readdata
			uav_writedata          => cpu_debug_mem_slave_agent_m0_writedata,     --                         .writedata
			uav_lock               => cpu_debug_mem_slave_agent_m0_lock,          --                         .lock
			uav_debugaccess        => cpu_debug_mem_slave_agent_m0_debugaccess,   --                         .debugaccess
			av_address             => cpu_debug_mem_slave_address,                --      avalon_anti_slave_0.address
			av_write               => cpu_debug_mem_slave_write,                  --                         .write
			av_read                => cpu_debug_mem_slave_read,                   --                         .read
			av_readdata            => cpu_debug_mem_slave_readdata,               --                         .readdata
			av_writedata           => cpu_debug_mem_slave_writedata,              --                         .writedata
			av_byteenable          => cpu_debug_mem_slave_byteenable,             --                         .byteenable
			av_waitrequest         => cpu_debug_mem_slave_waitrequest,            --                         .waitrequest
			av_debugaccess         => cpu_debug_mem_slave_debugaccess,            --                         .debugaccess
			av_begintransfer       => open,                                       --              (terminated)
			av_beginbursttransfer  => open,                                       --              (terminated)
			av_burstcount          => open,                                       --              (terminated)
			av_readdatavalid       => '0',                                        --              (terminated)
			av_writebyteenable     => open,                                       --              (terminated)
			av_lock                => open,                                       --              (terminated)
			av_chipselect          => open,                                       --              (terminated)
			av_clken               => open,                                       --              (terminated)
			uav_clken              => '0',                                        --              (terminated)
			av_outputenable        => open,                                       --              (terminated)
			uav_response           => open,                                       --              (terminated)
			av_response            => "00",                                       --              (terminated)
			uav_writeresponsevalid => open,                                       --              (terminated)
			av_writeresponsevalid  => '0'                                         --              (terminated)
		);

	onchipmem_s1_translator : component codecaudio_mm_interconnect_0_onchipmem_s1_translator
		generic map (
			AV_ADDRESS_W                   => 16,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 4,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 20,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 1,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 0,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => pll_0_outclk0_clk,                     --                      clk.clk
			reset                  => cpu_reset_reset_bridge_in_reset_reset, --                    reset.reset
			uav_address            => onchipmem_s1_agent_m0_address,         -- avalon_universal_slave_0.address
			uav_burstcount         => onchipmem_s1_agent_m0_burstcount,      --                         .burstcount
			uav_read               => onchipmem_s1_agent_m0_read,            --                         .read
			uav_write              => onchipmem_s1_agent_m0_write,           --                         .write
			uav_waitrequest        => onchipmem_s1_agent_m0_waitrequest,     --                         .waitrequest
			uav_readdatavalid      => onchipmem_s1_agent_m0_readdatavalid,   --                         .readdatavalid
			uav_byteenable         => onchipmem_s1_agent_m0_byteenable,      --                         .byteenable
			uav_readdata           => onchipmem_s1_agent_m0_readdata,        --                         .readdata
			uav_writedata          => onchipmem_s1_agent_m0_writedata,       --                         .writedata
			uav_lock               => onchipmem_s1_agent_m0_lock,            --                         .lock
			uav_debugaccess        => onchipmem_s1_agent_m0_debugaccess,     --                         .debugaccess
			av_address             => onchipmem_s1_address,                  --      avalon_anti_slave_0.address
			av_write               => onchipmem_s1_write,                    --                         .write
			av_readdata            => onchipmem_s1_readdata,                 --                         .readdata
			av_writedata           => onchipmem_s1_writedata,                --                         .writedata
			av_byteenable          => onchipmem_s1_byteenable,               --                         .byteenable
			av_chipselect          => onchipmem_s1_chipselect,               --                         .chipselect
			av_clken               => onchipmem_s1_clken,                    --                         .clken
			av_read                => open,                                  --              (terminated)
			av_begintransfer       => open,                                  --              (terminated)
			av_beginbursttransfer  => open,                                  --              (terminated)
			av_burstcount          => open,                                  --              (terminated)
			av_readdatavalid       => '0',                                   --              (terminated)
			av_waitrequest         => '0',                                   --              (terminated)
			av_writebyteenable     => open,                                  --              (terminated)
			av_lock                => open,                                  --              (terminated)
			uav_clken              => '0',                                   --              (terminated)
			av_debugaccess         => open,                                  --              (terminated)
			av_outputenable        => open,                                  --              (terminated)
			uav_response           => open,                                  --              (terminated)
			av_response            => "00",                                  --              (terminated)
			uav_writeresponsevalid => open,                                  --              (terminated)
			av_writeresponsevalid  => '0'                                    --              (terminated)
		);

	timer0_s1_translator : component codecaudio_mm_interconnect_0_timer0_s1_translator
		generic map (
			AV_ADDRESS_W                   => 3,
			AV_DATA_W                      => 16,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 1,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 20,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => pll_0_outclk0_clk,                     --                      clk.clk
			reset                  => cpu_reset_reset_bridge_in_reset_reset, --                    reset.reset
			uav_address            => timer0_s1_agent_m0_address,            -- avalon_universal_slave_0.address
			uav_burstcount         => timer0_s1_agent_m0_burstcount,         --                         .burstcount
			uav_read               => timer0_s1_agent_m0_read,               --                         .read
			uav_write              => timer0_s1_agent_m0_write,              --                         .write
			uav_waitrequest        => timer0_s1_agent_m0_waitrequest,        --                         .waitrequest
			uav_readdatavalid      => timer0_s1_agent_m0_readdatavalid,      --                         .readdatavalid
			uav_byteenable         => timer0_s1_agent_m0_byteenable,         --                         .byteenable
			uav_readdata           => timer0_s1_agent_m0_readdata,           --                         .readdata
			uav_writedata          => timer0_s1_agent_m0_writedata,          --                         .writedata
			uav_lock               => timer0_s1_agent_m0_lock,               --                         .lock
			uav_debugaccess        => timer0_s1_agent_m0_debugaccess,        --                         .debugaccess
			av_address             => timer0_s1_address,                     --      avalon_anti_slave_0.address
			av_write               => timer0_s1_write,                       --                         .write
			av_readdata            => timer0_s1_readdata,                    --                         .readdata
			av_writedata           => timer0_s1_writedata,                   --                         .writedata
			av_chipselect          => timer0_s1_chipselect,                  --                         .chipselect
			av_read                => open,                                  --              (terminated)
			av_begintransfer       => open,                                  --              (terminated)
			av_beginbursttransfer  => open,                                  --              (terminated)
			av_burstcount          => open,                                  --              (terminated)
			av_byteenable          => open,                                  --              (terminated)
			av_readdatavalid       => '0',                                   --              (terminated)
			av_waitrequest         => '0',                                   --              (terminated)
			av_writebyteenable     => open,                                  --              (terminated)
			av_lock                => open,                                  --              (terminated)
			av_clken               => open,                                  --              (terminated)
			uav_clken              => '0',                                   --              (terminated)
			av_debugaccess         => open,                                  --              (terminated)
			av_outputenable        => open,                                  --              (terminated)
			uav_response           => open,                                  --              (terminated)
			av_response            => "00",                                  --              (terminated)
			uav_writeresponsevalid => open,                                  --              (terminated)
			av_writeresponsevalid  => '0'                                    --              (terminated)
		);

	timer1_s1_translator : component codecaudio_mm_interconnect_0_timer0_s1_translator
		generic map (
			AV_ADDRESS_W                   => 3,
			AV_DATA_W                      => 16,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 1,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 20,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => pll_0_outclk0_clk,                     --                      clk.clk
			reset                  => cpu_reset_reset_bridge_in_reset_reset, --                    reset.reset
			uav_address            => timer1_s1_agent_m0_address,            -- avalon_universal_slave_0.address
			uav_burstcount         => timer1_s1_agent_m0_burstcount,         --                         .burstcount
			uav_read               => timer1_s1_agent_m0_read,               --                         .read
			uav_write              => timer1_s1_agent_m0_write,              --                         .write
			uav_waitrequest        => timer1_s1_agent_m0_waitrequest,        --                         .waitrequest
			uav_readdatavalid      => timer1_s1_agent_m0_readdatavalid,      --                         .readdatavalid
			uav_byteenable         => timer1_s1_agent_m0_byteenable,         --                         .byteenable
			uav_readdata           => timer1_s1_agent_m0_readdata,           --                         .readdata
			uav_writedata          => timer1_s1_agent_m0_writedata,          --                         .writedata
			uav_lock               => timer1_s1_agent_m0_lock,               --                         .lock
			uav_debugaccess        => timer1_s1_agent_m0_debugaccess,        --                         .debugaccess
			av_address             => timer1_s1_address,                     --      avalon_anti_slave_0.address
			av_write               => timer1_s1_write,                       --                         .write
			av_readdata            => timer1_s1_readdata,                    --                         .readdata
			av_writedata           => timer1_s1_writedata,                   --                         .writedata
			av_chipselect          => timer1_s1_chipselect,                  --                         .chipselect
			av_read                => open,                                  --              (terminated)
			av_begintransfer       => open,                                  --              (terminated)
			av_beginbursttransfer  => open,                                  --              (terminated)
			av_burstcount          => open,                                  --              (terminated)
			av_byteenable          => open,                                  --              (terminated)
			av_readdatavalid       => '0',                                   --              (terminated)
			av_waitrequest         => '0',                                   --              (terminated)
			av_writebyteenable     => open,                                  --              (terminated)
			av_lock                => open,                                  --              (terminated)
			av_clken               => open,                                  --              (terminated)
			uav_clken              => '0',                                   --              (terminated)
			av_debugaccess         => open,                                  --              (terminated)
			av_outputenable        => open,                                  --              (terminated)
			uav_response           => open,                                  --              (terminated)
			av_response            => "00",                                  --              (terminated)
			uav_writeresponsevalid => open,                                  --              (terminated)
			av_writeresponsevalid  => '0'                                    --              (terminated)
		);

	toggleaccmat_s1_translator : component codecaudio_mm_interconnect_0_toggleaccmat_s1_translator
		generic map (
			AV_ADDRESS_W                   => 2,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 1,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 20,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => pll_0_outclk0_clk,                      --                      clk.clk
			reset                  => cpu_reset_reset_bridge_in_reset_reset,  --                    reset.reset
			uav_address            => toggleaccmat_s1_agent_m0_address,       -- avalon_universal_slave_0.address
			uav_burstcount         => toggleaccmat_s1_agent_m0_burstcount,    --                         .burstcount
			uav_read               => toggleaccmat_s1_agent_m0_read,          --                         .read
			uav_write              => toggleaccmat_s1_agent_m0_write,         --                         .write
			uav_waitrequest        => toggleaccmat_s1_agent_m0_waitrequest,   --                         .waitrequest
			uav_readdatavalid      => toggleaccmat_s1_agent_m0_readdatavalid, --                         .readdatavalid
			uav_byteenable         => toggleaccmat_s1_agent_m0_byteenable,    --                         .byteenable
			uav_readdata           => toggleaccmat_s1_agent_m0_readdata,      --                         .readdata
			uav_writedata          => toggleaccmat_s1_agent_m0_writedata,     --                         .writedata
			uav_lock               => toggleaccmat_s1_agent_m0_lock,          --                         .lock
			uav_debugaccess        => toggleaccmat_s1_agent_m0_debugaccess,   --                         .debugaccess
			av_address             => ToggleAccMat_s1_address,                --      avalon_anti_slave_0.address
			av_write               => ToggleAccMat_s1_write,                  --                         .write
			av_readdata            => ToggleAccMat_s1_readdata,               --                         .readdata
			av_writedata           => ToggleAccMat_s1_writedata,              --                         .writedata
			av_chipselect          => ToggleAccMat_s1_chipselect,             --                         .chipselect
			av_read                => open,                                   --              (terminated)
			av_begintransfer       => open,                                   --              (terminated)
			av_beginbursttransfer  => open,                                   --              (terminated)
			av_burstcount          => open,                                   --              (terminated)
			av_byteenable          => open,                                   --              (terminated)
			av_readdatavalid       => '0',                                    --              (terminated)
			av_waitrequest         => '0',                                    --              (terminated)
			av_writebyteenable     => open,                                   --              (terminated)
			av_lock                => open,                                   --              (terminated)
			av_clken               => open,                                   --              (terminated)
			uav_clken              => '0',                                    --              (terminated)
			av_debugaccess         => open,                                   --              (terminated)
			av_outputenable        => open,                                   --              (terminated)
			uav_response           => open,                                   --              (terminated)
			av_response            => "00",                                   --              (terminated)
			uav_writeresponsevalid => open,                                   --              (terminated)
			av_writeresponsevalid  => '0'                                     --              (terminated)
		);

	datatoaccmat_s1_translator : component codecaudio_mm_interconnect_0_toggleaccmat_s1_translator
		generic map (
			AV_ADDRESS_W                   => 2,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 1,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 20,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => pll_0_outclk0_clk,                      --                      clk.clk
			reset                  => cpu_reset_reset_bridge_in_reset_reset,  --                    reset.reset
			uav_address            => datatoaccmat_s1_agent_m0_address,       -- avalon_universal_slave_0.address
			uav_burstcount         => datatoaccmat_s1_agent_m0_burstcount,    --                         .burstcount
			uav_read               => datatoaccmat_s1_agent_m0_read,          --                         .read
			uav_write              => datatoaccmat_s1_agent_m0_write,         --                         .write
			uav_waitrequest        => datatoaccmat_s1_agent_m0_waitrequest,   --                         .waitrequest
			uav_readdatavalid      => datatoaccmat_s1_agent_m0_readdatavalid, --                         .readdatavalid
			uav_byteenable         => datatoaccmat_s1_agent_m0_byteenable,    --                         .byteenable
			uav_readdata           => datatoaccmat_s1_agent_m0_readdata,      --                         .readdata
			uav_writedata          => datatoaccmat_s1_agent_m0_writedata,     --                         .writedata
			uav_lock               => datatoaccmat_s1_agent_m0_lock,          --                         .lock
			uav_debugaccess        => datatoaccmat_s1_agent_m0_debugaccess,   --                         .debugaccess
			av_address             => DataToAccMat_s1_address,                --      avalon_anti_slave_0.address
			av_write               => DataToAccMat_s1_write,                  --                         .write
			av_readdata            => DataToAccMat_s1_readdata,               --                         .readdata
			av_writedata           => DataToAccMat_s1_writedata,              --                         .writedata
			av_chipselect          => DataToAccMat_s1_chipselect,             --                         .chipselect
			av_read                => open,                                   --              (terminated)
			av_begintransfer       => open,                                   --              (terminated)
			av_beginbursttransfer  => open,                                   --              (terminated)
			av_burstcount          => open,                                   --              (terminated)
			av_byteenable          => open,                                   --              (terminated)
			av_readdatavalid       => '0',                                    --              (terminated)
			av_waitrequest         => '0',                                    --              (terminated)
			av_writebyteenable     => open,                                   --              (terminated)
			av_lock                => open,                                   --              (terminated)
			av_clken               => open,                                   --              (terminated)
			uav_clken              => '0',                                    --              (terminated)
			av_debugaccess         => open,                                   --              (terminated)
			av_outputenable        => open,                                   --              (terminated)
			uav_response           => open,                                   --              (terminated)
			av_response            => "00",                                   --              (terminated)
			uav_writeresponsevalid => open,                                   --              (terminated)
			av_writeresponsevalid  => '0'                                     --              (terminated)
		);

	datafromaccmat_s1_translator : component codecaudio_mm_interconnect_0_datafromaccmat_s1_translator
		generic map (
			AV_ADDRESS_W                   => 2,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 1,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 20,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => pll_0_outclk0_clk,                        --                      clk.clk
			reset                  => cpu_reset_reset_bridge_in_reset_reset,    --                    reset.reset
			uav_address            => datafromaccmat_s1_agent_m0_address,       -- avalon_universal_slave_0.address
			uav_burstcount         => datafromaccmat_s1_agent_m0_burstcount,    --                         .burstcount
			uav_read               => datafromaccmat_s1_agent_m0_read,          --                         .read
			uav_write              => datafromaccmat_s1_agent_m0_write,         --                         .write
			uav_waitrequest        => datafromaccmat_s1_agent_m0_waitrequest,   --                         .waitrequest
			uav_readdatavalid      => datafromaccmat_s1_agent_m0_readdatavalid, --                         .readdatavalid
			uav_byteenable         => datafromaccmat_s1_agent_m0_byteenable,    --                         .byteenable
			uav_readdata           => datafromaccmat_s1_agent_m0_readdata,      --                         .readdata
			uav_writedata          => datafromaccmat_s1_agent_m0_writedata,     --                         .writedata
			uav_lock               => datafromaccmat_s1_agent_m0_lock,          --                         .lock
			uav_debugaccess        => datafromaccmat_s1_agent_m0_debugaccess,   --                         .debugaccess
			av_address             => DataFromAccMat_s1_address,                --      avalon_anti_slave_0.address
			av_readdata            => DataFromAccMat_s1_readdata,               --                         .readdata
			av_write               => open,                                     --              (terminated)
			av_read                => open,                                     --              (terminated)
			av_writedata           => open,                                     --              (terminated)
			av_begintransfer       => open,                                     --              (terminated)
			av_beginbursttransfer  => open,                                     --              (terminated)
			av_burstcount          => open,                                     --              (terminated)
			av_byteenable          => open,                                     --              (terminated)
			av_readdatavalid       => '0',                                      --              (terminated)
			av_waitrequest         => '0',                                      --              (terminated)
			av_writebyteenable     => open,                                     --              (terminated)
			av_lock                => open,                                     --              (terminated)
			av_chipselect          => open,                                     --              (terminated)
			av_clken               => open,                                     --              (terminated)
			uav_clken              => '0',                                      --              (terminated)
			av_debugaccess         => open,                                     --              (terminated)
			av_outputenable        => open,                                     --              (terminated)
			uav_response           => open,                                     --              (terminated)
			av_response            => "00",                                     --              (terminated)
			uav_writeresponsevalid => open,                                     --              (terminated)
			av_writeresponsevalid  => '0'                                       --              (terminated)
		);

	cpu_data_master_agent : component altera_merlin_master_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 97,
			PKT_ORI_BURST_SIZE_L      => 95,
			PKT_RESPONSE_STATUS_H     => 94,
			PKT_RESPONSE_STATUS_L     => 93,
			PKT_QOS_H                 => 76,
			PKT_QOS_L                 => 76,
			PKT_DATA_SIDEBAND_H       => 74,
			PKT_DATA_SIDEBAND_L       => 74,
			PKT_ADDR_SIDEBAND_H       => 73,
			PKT_ADDR_SIDEBAND_L       => 73,
			PKT_BURST_TYPE_H          => 72,
			PKT_BURST_TYPE_L          => 71,
			PKT_CACHE_H               => 92,
			PKT_CACHE_L               => 89,
			PKT_THREAD_ID_H           => 85,
			PKT_THREAD_ID_L           => 85,
			PKT_BURST_SIZE_H          => 70,
			PKT_BURST_SIZE_L          => 68,
			PKT_TRANS_EXCLUSIVE       => 61,
			PKT_TRANS_LOCK            => 60,
			PKT_BEGIN_BURST           => 75,
			PKT_PROTECTION_H          => 88,
			PKT_PROTECTION_L          => 86,
			PKT_BURSTWRAP_H           => 67,
			PKT_BURSTWRAP_L           => 65,
			PKT_BYTE_CNT_H            => 64,
			PKT_BYTE_CNT_L            => 62,
			PKT_ADDR_H                => 55,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 56,
			PKT_TRANS_POSTED          => 57,
			PKT_TRANS_WRITE           => 58,
			PKT_TRANS_READ            => 59,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 80,
			PKT_SRC_ID_L              => 77,
			PKT_DEST_ID_H             => 84,
			PKT_DEST_ID_L             => 81,
			ST_DATA_W                 => 98,
			ST_CHANNEL_W              => 12,
			AV_BURSTCOUNT_W           => 3,
			SUPPRESS_0_BYTEEN_RSP     => 0,
			ID                        => 0,
			BURSTWRAP_VALUE           => 7,
			CACHE_VALUE               => 0,
			SECURE_ACCESS_BIT         => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                   => pll_0_outclk0_clk,                                                  --       clk.clk
			reset                 => cpu_reset_reset_bridge_in_reset_reset,                              -- clk_reset.reset
			av_address            => cpu_data_master_translator_avalon_universal_master_0_address,       --        av.address
			av_write              => cpu_data_master_translator_avalon_universal_master_0_write,         --          .write
			av_read               => cpu_data_master_translator_avalon_universal_master_0_read,          --          .read
			av_writedata          => cpu_data_master_translator_avalon_universal_master_0_writedata,     --          .writedata
			av_readdata           => cpu_data_master_translator_avalon_universal_master_0_readdata,      --          .readdata
			av_waitrequest        => cpu_data_master_translator_avalon_universal_master_0_waitrequest,   --          .waitrequest
			av_readdatavalid      => cpu_data_master_translator_avalon_universal_master_0_readdatavalid, --          .readdatavalid
			av_byteenable         => cpu_data_master_translator_avalon_universal_master_0_byteenable,    --          .byteenable
			av_burstcount         => cpu_data_master_translator_avalon_universal_master_0_burstcount,    --          .burstcount
			av_debugaccess        => cpu_data_master_translator_avalon_universal_master_0_debugaccess,   --          .debugaccess
			av_lock               => cpu_data_master_translator_avalon_universal_master_0_lock,          --          .lock
			cp_valid              => cpu_data_master_agent_cp_valid,                                     --        cp.valid
			cp_data               => cpu_data_master_agent_cp_data,                                      --          .data
			cp_startofpacket      => cpu_data_master_agent_cp_startofpacket,                             --          .startofpacket
			cp_endofpacket        => cpu_data_master_agent_cp_endofpacket,                               --          .endofpacket
			cp_ready              => cpu_data_master_agent_cp_ready,                                     --          .ready
			rp_valid              => rsp_mux_src_valid,                                                  --        rp.valid
			rp_data               => rsp_mux_src_data,                                                   --          .data
			rp_channel            => rsp_mux_src_channel,                                                --          .channel
			rp_startofpacket      => rsp_mux_src_startofpacket,                                          --          .startofpacket
			rp_endofpacket        => rsp_mux_src_endofpacket,                                            --          .endofpacket
			rp_ready              => rsp_mux_src_ready,                                                  --          .ready
			av_response           => open,                                                               -- (terminated)
			av_writeresponsevalid => open                                                                -- (terminated)
		);

	cpu_instruction_master_agent : component altera_merlin_master_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 97,
			PKT_ORI_BURST_SIZE_L      => 95,
			PKT_RESPONSE_STATUS_H     => 94,
			PKT_RESPONSE_STATUS_L     => 93,
			PKT_QOS_H                 => 76,
			PKT_QOS_L                 => 76,
			PKT_DATA_SIDEBAND_H       => 74,
			PKT_DATA_SIDEBAND_L       => 74,
			PKT_ADDR_SIDEBAND_H       => 73,
			PKT_ADDR_SIDEBAND_L       => 73,
			PKT_BURST_TYPE_H          => 72,
			PKT_BURST_TYPE_L          => 71,
			PKT_CACHE_H               => 92,
			PKT_CACHE_L               => 89,
			PKT_THREAD_ID_H           => 85,
			PKT_THREAD_ID_L           => 85,
			PKT_BURST_SIZE_H          => 70,
			PKT_BURST_SIZE_L          => 68,
			PKT_TRANS_EXCLUSIVE       => 61,
			PKT_TRANS_LOCK            => 60,
			PKT_BEGIN_BURST           => 75,
			PKT_PROTECTION_H          => 88,
			PKT_PROTECTION_L          => 86,
			PKT_BURSTWRAP_H           => 67,
			PKT_BURSTWRAP_L           => 65,
			PKT_BYTE_CNT_H            => 64,
			PKT_BYTE_CNT_L            => 62,
			PKT_ADDR_H                => 55,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 56,
			PKT_TRANS_POSTED          => 57,
			PKT_TRANS_WRITE           => 58,
			PKT_TRANS_READ            => 59,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 80,
			PKT_SRC_ID_L              => 77,
			PKT_DEST_ID_H             => 84,
			PKT_DEST_ID_L             => 81,
			ST_DATA_W                 => 98,
			ST_CHANNEL_W              => 12,
			AV_BURSTCOUNT_W           => 3,
			SUPPRESS_0_BYTEEN_RSP     => 0,
			ID                        => 1,
			BURSTWRAP_VALUE           => 3,
			CACHE_VALUE               => 0,
			SECURE_ACCESS_BIT         => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                   => pll_0_outclk0_clk,                                                         --       clk.clk
			reset                 => cpu_reset_reset_bridge_in_reset_reset,                                     -- clk_reset.reset
			av_address            => cpu_instruction_master_translator_avalon_universal_master_0_address,       --        av.address
			av_write              => cpu_instruction_master_translator_avalon_universal_master_0_write,         --          .write
			av_read               => cpu_instruction_master_translator_avalon_universal_master_0_read,          --          .read
			av_writedata          => cpu_instruction_master_translator_avalon_universal_master_0_writedata,     --          .writedata
			av_readdata           => cpu_instruction_master_translator_avalon_universal_master_0_readdata,      --          .readdata
			av_waitrequest        => cpu_instruction_master_translator_avalon_universal_master_0_waitrequest,   --          .waitrequest
			av_readdatavalid      => cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid, --          .readdatavalid
			av_byteenable         => cpu_instruction_master_translator_avalon_universal_master_0_byteenable,    --          .byteenable
			av_burstcount         => cpu_instruction_master_translator_avalon_universal_master_0_burstcount,    --          .burstcount
			av_debugaccess        => cpu_instruction_master_translator_avalon_universal_master_0_debugaccess,   --          .debugaccess
			av_lock               => cpu_instruction_master_translator_avalon_universal_master_0_lock,          --          .lock
			cp_valid              => cpu_instruction_master_agent_cp_valid,                                     --        cp.valid
			cp_data               => cpu_instruction_master_agent_cp_data,                                      --          .data
			cp_startofpacket      => cpu_instruction_master_agent_cp_startofpacket,                             --          .startofpacket
			cp_endofpacket        => cpu_instruction_master_agent_cp_endofpacket,                               --          .endofpacket
			cp_ready              => cpu_instruction_master_agent_cp_ready,                                     --          .ready
			rp_valid              => rsp_mux_001_src_valid,                                                     --        rp.valid
			rp_data               => rsp_mux_001_src_data,                                                      --          .data
			rp_channel            => rsp_mux_001_src_channel,                                                   --          .channel
			rp_startofpacket      => rsp_mux_001_src_startofpacket,                                             --          .startofpacket
			rp_endofpacket        => rsp_mux_001_src_endofpacket,                                               --          .endofpacket
			rp_ready              => rsp_mux_001_src_ready,                                                     --          .ready
			av_response           => open,                                                                      -- (terminated)
			av_writeresponsevalid => open                                                                       -- (terminated)
		);

	audio_avalon_audio_slave_agent : component altera_merlin_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 97,
			PKT_ORI_BURST_SIZE_L      => 95,
			PKT_RESPONSE_STATUS_H     => 94,
			PKT_RESPONSE_STATUS_L     => 93,
			PKT_BURST_SIZE_H          => 70,
			PKT_BURST_SIZE_L          => 68,
			PKT_TRANS_LOCK            => 60,
			PKT_BEGIN_BURST           => 75,
			PKT_PROTECTION_H          => 88,
			PKT_PROTECTION_L          => 86,
			PKT_BURSTWRAP_H           => 67,
			PKT_BURSTWRAP_L           => 65,
			PKT_BYTE_CNT_H            => 64,
			PKT_BYTE_CNT_L            => 62,
			PKT_ADDR_H                => 55,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 56,
			PKT_TRANS_POSTED          => 57,
			PKT_TRANS_WRITE           => 58,
			PKT_TRANS_READ            => 59,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 80,
			PKT_SRC_ID_L              => 77,
			PKT_DEST_ID_H             => 84,
			PKT_DEST_ID_L             => 81,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 12,
			ST_DATA_W                 => 98,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0,
			ECC_ENABLE                => 0
		)
		port map (
			clk                     => dac_pll_audio_clk_clk,                                     --             clk.clk
			reset                   => audio_reset_reset_bridge_in_reset_reset,                   --       clk_reset.reset
			m0_address              => audio_avalon_audio_slave_agent_m0_address,                 --              m0.address
			m0_burstcount           => audio_avalon_audio_slave_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => audio_avalon_audio_slave_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => audio_avalon_audio_slave_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => audio_avalon_audio_slave_agent_m0_lock,                    --                .lock
			m0_readdata             => audio_avalon_audio_slave_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => audio_avalon_audio_slave_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => audio_avalon_audio_slave_agent_m0_read,                    --                .read
			m0_waitrequest          => audio_avalon_audio_slave_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => audio_avalon_audio_slave_agent_m0_writedata,               --                .writedata
			m0_write                => audio_avalon_audio_slave_agent_m0_write,                   --                .write
			rp_endofpacket          => audio_avalon_audio_slave_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => audio_avalon_audio_slave_agent_rp_ready,                   --                .ready
			rp_valid                => audio_avalon_audio_slave_agent_rp_valid,                   --                .valid
			rp_data                 => audio_avalon_audio_slave_agent_rp_data,                    --                .data
			rp_startofpacket        => audio_avalon_audio_slave_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_src_ready,                                         --              cp.ready
			cp_valid                => cmd_mux_src_valid,                                         --                .valid
			cp_data                 => cmd_mux_src_data,                                          --                .data
			cp_startofpacket        => cmd_mux_src_startofpacket,                                 --                .startofpacket
			cp_endofpacket          => cmd_mux_src_endofpacket,                                   --                .endofpacket
			cp_channel              => cmd_mux_src_channel,                                       --                .channel
			rf_sink_ready           => audio_avalon_audio_slave_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => audio_avalon_audio_slave_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => audio_avalon_audio_slave_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => audio_avalon_audio_slave_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => audio_avalon_audio_slave_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => audio_avalon_audio_slave_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => audio_avalon_audio_slave_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => audio_avalon_audio_slave_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => audio_avalon_audio_slave_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => audio_avalon_audio_slave_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => avalon_st_adapter_out_0_ready,                             -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => avalon_st_adapter_out_0_valid,                             --                .valid
			rdata_fifo_sink_data    => avalon_st_adapter_out_0_data,                              --                .data
			rdata_fifo_sink_error   => avalon_st_adapter_out_0_error(0),                          --                .error
			rdata_fifo_src_ready    => audio_avalon_audio_slave_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => audio_avalon_audio_slave_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => audio_avalon_audio_slave_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                                      --     (terminated)
			m0_writeresponsevalid   => '0'                                                        --     (terminated)
		);

	audio_avalon_audio_slave_agent_rsp_fifo : component CodecAudio_mm_interconnect_0_audio_avalon_audio_slave_agent_rsp_fifo
		port map (
			clk               => dac_pll_audio_clk_clk,                                     --       clk.clk
			reset             => audio_reset_reset_bridge_in_reset_reset,                   -- clk_reset.reset
			in_data           => audio_avalon_audio_slave_agent_rf_source_data,             --        in.data
			in_valid          => audio_avalon_audio_slave_agent_rf_source_valid,            --          .valid
			in_ready          => audio_avalon_audio_slave_agent_rf_source_ready,            --          .ready
			in_startofpacket  => audio_avalon_audio_slave_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => audio_avalon_audio_slave_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => audio_avalon_audio_slave_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => audio_avalon_audio_slave_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => audio_avalon_audio_slave_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => audio_avalon_audio_slave_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => audio_avalon_audio_slave_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	audio_avalon_audio_slave_agent_rdata_fifo : component CodecAudio_mm_interconnect_0_audio_avalon_audio_slave_agent_rdata_fifo
		port map (
			clk       => dac_pll_audio_clk_clk,                               --       clk.clk
			reset     => audio_reset_reset_bridge_in_reset_reset,             -- clk_reset.reset
			in_data   => audio_avalon_audio_slave_agent_rdata_fifo_src_data,  --        in.data
			in_valid  => audio_avalon_audio_slave_agent_rdata_fifo_src_valid, --          .valid
			in_ready  => audio_avalon_audio_slave_agent_rdata_fifo_src_ready, --          .ready
			out_data  => audio_avalon_audio_slave_agent_rdata_fifo_out_data,  --       out.data
			out_valid => audio_avalon_audio_slave_agent_rdata_fifo_out_valid, --          .valid
			out_ready => audio_avalon_audio_slave_agent_rdata_fifo_out_ready  --          .ready
		);

	audio_and_video_config_avalon_av_config_slave_agent : component altera_merlin_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 97,
			PKT_ORI_BURST_SIZE_L      => 95,
			PKT_RESPONSE_STATUS_H     => 94,
			PKT_RESPONSE_STATUS_L     => 93,
			PKT_BURST_SIZE_H          => 70,
			PKT_BURST_SIZE_L          => 68,
			PKT_TRANS_LOCK            => 60,
			PKT_BEGIN_BURST           => 75,
			PKT_PROTECTION_H          => 88,
			PKT_PROTECTION_L          => 86,
			PKT_BURSTWRAP_H           => 67,
			PKT_BURSTWRAP_L           => 65,
			PKT_BYTE_CNT_H            => 64,
			PKT_BYTE_CNT_L            => 62,
			PKT_ADDR_H                => 55,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 56,
			PKT_TRANS_POSTED          => 57,
			PKT_TRANS_WRITE           => 58,
			PKT_TRANS_READ            => 59,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 80,
			PKT_SRC_ID_L              => 77,
			PKT_DEST_ID_H             => 84,
			PKT_DEST_ID_L             => 81,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 12,
			ST_DATA_W                 => 98,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0,
			ECC_ENABLE                => 0
		)
		port map (
			clk                     => pll_0_outclk0_clk,                                                              --             clk.clk
			reset                   => cpu_reset_reset_bridge_in_reset_reset,                                          --       clk_reset.reset
			m0_address              => audio_and_video_config_avalon_av_config_slave_agent_m0_address,                 --              m0.address
			m0_burstcount           => audio_and_video_config_avalon_av_config_slave_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => audio_and_video_config_avalon_av_config_slave_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => audio_and_video_config_avalon_av_config_slave_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => audio_and_video_config_avalon_av_config_slave_agent_m0_lock,                    --                .lock
			m0_readdata             => audio_and_video_config_avalon_av_config_slave_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => audio_and_video_config_avalon_av_config_slave_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => audio_and_video_config_avalon_av_config_slave_agent_m0_read,                    --                .read
			m0_waitrequest          => audio_and_video_config_avalon_av_config_slave_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => audio_and_video_config_avalon_av_config_slave_agent_m0_writedata,               --                .writedata
			m0_write                => audio_and_video_config_avalon_av_config_slave_agent_m0_write,                   --                .write
			rp_endofpacket          => audio_and_video_config_avalon_av_config_slave_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => audio_and_video_config_avalon_av_config_slave_agent_rp_ready,                   --                .ready
			rp_valid                => audio_and_video_config_avalon_av_config_slave_agent_rp_valid,                   --                .valid
			rp_data                 => audio_and_video_config_avalon_av_config_slave_agent_rp_data,                    --                .data
			rp_startofpacket        => audio_and_video_config_avalon_av_config_slave_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_001_src_ready,                                                          --              cp.ready
			cp_valid                => cmd_mux_001_src_valid,                                                          --                .valid
			cp_data                 => cmd_mux_001_src_data,                                                           --                .data
			cp_startofpacket        => cmd_mux_001_src_startofpacket,                                                  --                .startofpacket
			cp_endofpacket          => cmd_mux_001_src_endofpacket,                                                    --                .endofpacket
			cp_channel              => cmd_mux_001_src_channel,                                                        --                .channel
			rf_sink_ready           => audio_and_video_config_avalon_av_config_slave_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => audio_and_video_config_avalon_av_config_slave_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => audio_and_video_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => audio_and_video_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => audio_and_video_config_avalon_av_config_slave_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => audio_and_video_config_avalon_av_config_slave_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => audio_and_video_config_avalon_av_config_slave_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => audio_and_video_config_avalon_av_config_slave_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => audio_and_video_config_avalon_av_config_slave_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => audio_and_video_config_avalon_av_config_slave_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => avalon_st_adapter_001_out_0_ready,                                              -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => avalon_st_adapter_001_out_0_valid,                                              --                .valid
			rdata_fifo_sink_data    => avalon_st_adapter_001_out_0_data,                                               --                .data
			rdata_fifo_sink_error   => avalon_st_adapter_001_out_0_error(0),                                           --                .error
			rdata_fifo_src_ready    => audio_and_video_config_avalon_av_config_slave_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => audio_and_video_config_avalon_av_config_slave_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => audio_and_video_config_avalon_av_config_slave_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                                                           --     (terminated)
			m0_writeresponsevalid   => '0'                                                                             --     (terminated)
		);

	audio_and_video_config_avalon_av_config_slave_agent_rsp_fifo : component CodecAudio_mm_interconnect_0_audio_avalon_audio_slave_agent_rsp_fifo
		port map (
			clk               => pll_0_outclk0_clk,                                                              --       clk.clk
			reset             => cpu_reset_reset_bridge_in_reset_reset,                                          -- clk_reset.reset
			in_data           => audio_and_video_config_avalon_av_config_slave_agent_rf_source_data,             --        in.data
			in_valid          => audio_and_video_config_avalon_av_config_slave_agent_rf_source_valid,            --          .valid
			in_ready          => audio_and_video_config_avalon_av_config_slave_agent_rf_source_ready,            --          .ready
			in_startofpacket  => audio_and_video_config_avalon_av_config_slave_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => audio_and_video_config_avalon_av_config_slave_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => audio_and_video_config_avalon_av_config_slave_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => audio_and_video_config_avalon_av_config_slave_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => audio_and_video_config_avalon_av_config_slave_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => audio_and_video_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => audio_and_video_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	jtag_uart_0_avalon_jtag_slave_agent : component altera_merlin_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 97,
			PKT_ORI_BURST_SIZE_L      => 95,
			PKT_RESPONSE_STATUS_H     => 94,
			PKT_RESPONSE_STATUS_L     => 93,
			PKT_BURST_SIZE_H          => 70,
			PKT_BURST_SIZE_L          => 68,
			PKT_TRANS_LOCK            => 60,
			PKT_BEGIN_BURST           => 75,
			PKT_PROTECTION_H          => 88,
			PKT_PROTECTION_L          => 86,
			PKT_BURSTWRAP_H           => 67,
			PKT_BURSTWRAP_L           => 65,
			PKT_BYTE_CNT_H            => 64,
			PKT_BYTE_CNT_L            => 62,
			PKT_ADDR_H                => 55,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 56,
			PKT_TRANS_POSTED          => 57,
			PKT_TRANS_WRITE           => 58,
			PKT_TRANS_READ            => 59,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 80,
			PKT_SRC_ID_L              => 77,
			PKT_DEST_ID_H             => 84,
			PKT_DEST_ID_L             => 81,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 12,
			ST_DATA_W                 => 98,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0,
			ECC_ENABLE                => 0
		)
		port map (
			clk                     => pll_0_outclk0_clk,                                              --             clk.clk
			reset                   => cpu_reset_reset_bridge_in_reset_reset,                          --       clk_reset.reset
			m0_address              => jtag_uart_0_avalon_jtag_slave_agent_m0_address,                 --              m0.address
			m0_burstcount           => jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => jtag_uart_0_avalon_jtag_slave_agent_m0_lock,                    --                .lock
			m0_readdata             => jtag_uart_0_avalon_jtag_slave_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => jtag_uart_0_avalon_jtag_slave_agent_m0_read,                    --                .read
			m0_waitrequest          => jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => jtag_uart_0_avalon_jtag_slave_agent_m0_writedata,               --                .writedata
			m0_write                => jtag_uart_0_avalon_jtag_slave_agent_m0_write,                   --                .write
			rp_endofpacket          => jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => jtag_uart_0_avalon_jtag_slave_agent_rp_ready,                   --                .ready
			rp_valid                => jtag_uart_0_avalon_jtag_slave_agent_rp_valid,                   --                .valid
			rp_data                 => jtag_uart_0_avalon_jtag_slave_agent_rp_data,                    --                .data
			rp_startofpacket        => jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_002_src_ready,                                          --              cp.ready
			cp_valid                => cmd_mux_002_src_valid,                                          --                .valid
			cp_data                 => cmd_mux_002_src_data,                                           --                .data
			cp_startofpacket        => cmd_mux_002_src_startofpacket,                                  --                .startofpacket
			cp_endofpacket          => cmd_mux_002_src_endofpacket,                                    --                .endofpacket
			cp_channel              => cmd_mux_002_src_channel,                                        --                .channel
			rf_sink_ready           => jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => jtag_uart_0_avalon_jtag_slave_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => avalon_st_adapter_002_out_0_ready,                              -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => avalon_st_adapter_002_out_0_valid,                              --                .valid
			rdata_fifo_sink_data    => avalon_st_adapter_002_out_0_data,                               --                .data
			rdata_fifo_sink_error   => avalon_st_adapter_002_out_0_error(0),                           --                .error
			rdata_fifo_src_ready    => jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                                           --     (terminated)
			m0_writeresponsevalid   => '0'                                                             --     (terminated)
		);

	jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo : component CodecAudio_mm_interconnect_0_audio_avalon_audio_slave_agent_rsp_fifo
		port map (
			clk               => pll_0_outclk0_clk,                                              --       clk.clk
			reset             => cpu_reset_reset_bridge_in_reset_reset,                          -- clk_reset.reset
			in_data           => jtag_uart_0_avalon_jtag_slave_agent_rf_source_data,             --        in.data
			in_valid          => jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid,            --          .valid
			in_ready          => jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready,            --          .ready
			in_startofpacket  => jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	ps2_avalon_ps2_slave_agent : component altera_merlin_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 97,
			PKT_ORI_BURST_SIZE_L      => 95,
			PKT_RESPONSE_STATUS_H     => 94,
			PKT_RESPONSE_STATUS_L     => 93,
			PKT_BURST_SIZE_H          => 70,
			PKT_BURST_SIZE_L          => 68,
			PKT_TRANS_LOCK            => 60,
			PKT_BEGIN_BURST           => 75,
			PKT_PROTECTION_H          => 88,
			PKT_PROTECTION_L          => 86,
			PKT_BURSTWRAP_H           => 67,
			PKT_BURSTWRAP_L           => 65,
			PKT_BYTE_CNT_H            => 64,
			PKT_BYTE_CNT_L            => 62,
			PKT_ADDR_H                => 55,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 56,
			PKT_TRANS_POSTED          => 57,
			PKT_TRANS_WRITE           => 58,
			PKT_TRANS_READ            => 59,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 80,
			PKT_SRC_ID_L              => 77,
			PKT_DEST_ID_H             => 84,
			PKT_DEST_ID_L             => 81,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 12,
			ST_DATA_W                 => 98,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0,
			ECC_ENABLE                => 0
		)
		port map (
			clk                     => pll_0_outclk0_clk,                                     --             clk.clk
			reset                   => cpu_reset_reset_bridge_in_reset_reset,                 --       clk_reset.reset
			m0_address              => ps2_avalon_ps2_slave_agent_m0_address,                 --              m0.address
			m0_burstcount           => ps2_avalon_ps2_slave_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => ps2_avalon_ps2_slave_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => ps2_avalon_ps2_slave_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => ps2_avalon_ps2_slave_agent_m0_lock,                    --                .lock
			m0_readdata             => ps2_avalon_ps2_slave_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => ps2_avalon_ps2_slave_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => ps2_avalon_ps2_slave_agent_m0_read,                    --                .read
			m0_waitrequest          => ps2_avalon_ps2_slave_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => ps2_avalon_ps2_slave_agent_m0_writedata,               --                .writedata
			m0_write                => ps2_avalon_ps2_slave_agent_m0_write,                   --                .write
			rp_endofpacket          => ps2_avalon_ps2_slave_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => ps2_avalon_ps2_slave_agent_rp_ready,                   --                .ready
			rp_valid                => ps2_avalon_ps2_slave_agent_rp_valid,                   --                .valid
			rp_data                 => ps2_avalon_ps2_slave_agent_rp_data,                    --                .data
			rp_startofpacket        => ps2_avalon_ps2_slave_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_003_src_ready,                                 --              cp.ready
			cp_valid                => cmd_mux_003_src_valid,                                 --                .valid
			cp_data                 => cmd_mux_003_src_data,                                  --                .data
			cp_startofpacket        => cmd_mux_003_src_startofpacket,                         --                .startofpacket
			cp_endofpacket          => cmd_mux_003_src_endofpacket,                           --                .endofpacket
			cp_channel              => cmd_mux_003_src_channel,                               --                .channel
			rf_sink_ready           => ps2_avalon_ps2_slave_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => ps2_avalon_ps2_slave_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => ps2_avalon_ps2_slave_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => ps2_avalon_ps2_slave_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => ps2_avalon_ps2_slave_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => ps2_avalon_ps2_slave_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => ps2_avalon_ps2_slave_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => ps2_avalon_ps2_slave_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => ps2_avalon_ps2_slave_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => ps2_avalon_ps2_slave_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => avalon_st_adapter_003_out_0_ready,                     -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => avalon_st_adapter_003_out_0_valid,                     --                .valid
			rdata_fifo_sink_data    => avalon_st_adapter_003_out_0_data,                      --                .data
			rdata_fifo_sink_error   => avalon_st_adapter_003_out_0_error(0),                  --                .error
			rdata_fifo_src_ready    => ps2_avalon_ps2_slave_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => ps2_avalon_ps2_slave_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => ps2_avalon_ps2_slave_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                                  --     (terminated)
			m0_writeresponsevalid   => '0'                                                    --     (terminated)
		);

	ps2_avalon_ps2_slave_agent_rsp_fifo : component CodecAudio_mm_interconnect_0_audio_avalon_audio_slave_agent_rsp_fifo
		port map (
			clk               => pll_0_outclk0_clk,                                     --       clk.clk
			reset             => cpu_reset_reset_bridge_in_reset_reset,                 -- clk_reset.reset
			in_data           => ps2_avalon_ps2_slave_agent_rf_source_data,             --        in.data
			in_valid          => ps2_avalon_ps2_slave_agent_rf_source_valid,            --          .valid
			in_ready          => ps2_avalon_ps2_slave_agent_rf_source_ready,            --          .ready
			in_startofpacket  => ps2_avalon_ps2_slave_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => ps2_avalon_ps2_slave_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => ps2_avalon_ps2_slave_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => ps2_avalon_ps2_slave_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => ps2_avalon_ps2_slave_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => ps2_avalon_ps2_slave_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => ps2_avalon_ps2_slave_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	sysid_control_slave_agent : component altera_merlin_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 97,
			PKT_ORI_BURST_SIZE_L      => 95,
			PKT_RESPONSE_STATUS_H     => 94,
			PKT_RESPONSE_STATUS_L     => 93,
			PKT_BURST_SIZE_H          => 70,
			PKT_BURST_SIZE_L          => 68,
			PKT_TRANS_LOCK            => 60,
			PKT_BEGIN_BURST           => 75,
			PKT_PROTECTION_H          => 88,
			PKT_PROTECTION_L          => 86,
			PKT_BURSTWRAP_H           => 67,
			PKT_BURSTWRAP_L           => 65,
			PKT_BYTE_CNT_H            => 64,
			PKT_BYTE_CNT_L            => 62,
			PKT_ADDR_H                => 55,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 56,
			PKT_TRANS_POSTED          => 57,
			PKT_TRANS_WRITE           => 58,
			PKT_TRANS_READ            => 59,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 80,
			PKT_SRC_ID_L              => 77,
			PKT_DEST_ID_H             => 84,
			PKT_DEST_ID_L             => 81,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 12,
			ST_DATA_W                 => 98,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0,
			ECC_ENABLE                => 0
		)
		port map (
			clk                     => pll_0_outclk0_clk,                                    --             clk.clk
			reset                   => cpu_reset_reset_bridge_in_reset_reset,                --       clk_reset.reset
			m0_address              => sysid_control_slave_agent_m0_address,                 --              m0.address
			m0_burstcount           => sysid_control_slave_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => sysid_control_slave_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => sysid_control_slave_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => sysid_control_slave_agent_m0_lock,                    --                .lock
			m0_readdata             => sysid_control_slave_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => sysid_control_slave_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => sysid_control_slave_agent_m0_read,                    --                .read
			m0_waitrequest          => sysid_control_slave_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => sysid_control_slave_agent_m0_writedata,               --                .writedata
			m0_write                => sysid_control_slave_agent_m0_write,                   --                .write
			rp_endofpacket          => sysid_control_slave_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => sysid_control_slave_agent_rp_ready,                   --                .ready
			rp_valid                => sysid_control_slave_agent_rp_valid,                   --                .valid
			rp_data                 => sysid_control_slave_agent_rp_data,                    --                .data
			rp_startofpacket        => sysid_control_slave_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_004_src_ready,                                --              cp.ready
			cp_valid                => cmd_mux_004_src_valid,                                --                .valid
			cp_data                 => cmd_mux_004_src_data,                                 --                .data
			cp_startofpacket        => cmd_mux_004_src_startofpacket,                        --                .startofpacket
			cp_endofpacket          => cmd_mux_004_src_endofpacket,                          --                .endofpacket
			cp_channel              => cmd_mux_004_src_channel,                              --                .channel
			rf_sink_ready           => sysid_control_slave_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => sysid_control_slave_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => sysid_control_slave_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => sysid_control_slave_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => sysid_control_slave_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => sysid_control_slave_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => sysid_control_slave_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => sysid_control_slave_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => sysid_control_slave_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => sysid_control_slave_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => avalon_st_adapter_004_out_0_ready,                    -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => avalon_st_adapter_004_out_0_valid,                    --                .valid
			rdata_fifo_sink_data    => avalon_st_adapter_004_out_0_data,                     --                .data
			rdata_fifo_sink_error   => avalon_st_adapter_004_out_0_error(0),                 --                .error
			rdata_fifo_src_ready    => sysid_control_slave_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => sysid_control_slave_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => sysid_control_slave_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                                 --     (terminated)
			m0_writeresponsevalid   => '0'                                                   --     (terminated)
		);

	sysid_control_slave_agent_rsp_fifo : component CodecAudio_mm_interconnect_0_audio_avalon_audio_slave_agent_rsp_fifo
		port map (
			clk               => pll_0_outclk0_clk,                                    --       clk.clk
			reset             => cpu_reset_reset_bridge_in_reset_reset,                -- clk_reset.reset
			in_data           => sysid_control_slave_agent_rf_source_data,             --        in.data
			in_valid          => sysid_control_slave_agent_rf_source_valid,            --          .valid
			in_ready          => sysid_control_slave_agent_rf_source_ready,            --          .ready
			in_startofpacket  => sysid_control_slave_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => sysid_control_slave_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => sysid_control_slave_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => sysid_control_slave_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => sysid_control_slave_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => sysid_control_slave_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => sysid_control_slave_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	cpu_debug_mem_slave_agent : component altera_merlin_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 97,
			PKT_ORI_BURST_SIZE_L      => 95,
			PKT_RESPONSE_STATUS_H     => 94,
			PKT_RESPONSE_STATUS_L     => 93,
			PKT_BURST_SIZE_H          => 70,
			PKT_BURST_SIZE_L          => 68,
			PKT_TRANS_LOCK            => 60,
			PKT_BEGIN_BURST           => 75,
			PKT_PROTECTION_H          => 88,
			PKT_PROTECTION_L          => 86,
			PKT_BURSTWRAP_H           => 67,
			PKT_BURSTWRAP_L           => 65,
			PKT_BYTE_CNT_H            => 64,
			PKT_BYTE_CNT_L            => 62,
			PKT_ADDR_H                => 55,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 56,
			PKT_TRANS_POSTED          => 57,
			PKT_TRANS_WRITE           => 58,
			PKT_TRANS_READ            => 59,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 80,
			PKT_SRC_ID_L              => 77,
			PKT_DEST_ID_H             => 84,
			PKT_DEST_ID_L             => 81,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 12,
			ST_DATA_W                 => 98,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0,
			ECC_ENABLE                => 0
		)
		port map (
			clk                     => pll_0_outclk0_clk,                                    --             clk.clk
			reset                   => cpu_reset_reset_bridge_in_reset_reset,                --       clk_reset.reset
			m0_address              => cpu_debug_mem_slave_agent_m0_address,                 --              m0.address
			m0_burstcount           => cpu_debug_mem_slave_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => cpu_debug_mem_slave_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => cpu_debug_mem_slave_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => cpu_debug_mem_slave_agent_m0_lock,                    --                .lock
			m0_readdata             => cpu_debug_mem_slave_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => cpu_debug_mem_slave_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => cpu_debug_mem_slave_agent_m0_read,                    --                .read
			m0_waitrequest          => cpu_debug_mem_slave_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => cpu_debug_mem_slave_agent_m0_writedata,               --                .writedata
			m0_write                => cpu_debug_mem_slave_agent_m0_write,                   --                .write
			rp_endofpacket          => cpu_debug_mem_slave_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => cpu_debug_mem_slave_agent_rp_ready,                   --                .ready
			rp_valid                => cpu_debug_mem_slave_agent_rp_valid,                   --                .valid
			rp_data                 => cpu_debug_mem_slave_agent_rp_data,                    --                .data
			rp_startofpacket        => cpu_debug_mem_slave_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_005_src_ready,                                --              cp.ready
			cp_valid                => cmd_mux_005_src_valid,                                --                .valid
			cp_data                 => cmd_mux_005_src_data,                                 --                .data
			cp_startofpacket        => cmd_mux_005_src_startofpacket,                        --                .startofpacket
			cp_endofpacket          => cmd_mux_005_src_endofpacket,                          --                .endofpacket
			cp_channel              => cmd_mux_005_src_channel,                              --                .channel
			rf_sink_ready           => cpu_debug_mem_slave_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => cpu_debug_mem_slave_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => cpu_debug_mem_slave_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => cpu_debug_mem_slave_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => cpu_debug_mem_slave_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => cpu_debug_mem_slave_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => cpu_debug_mem_slave_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => cpu_debug_mem_slave_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => avalon_st_adapter_005_out_0_ready,                    -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => avalon_st_adapter_005_out_0_valid,                    --                .valid
			rdata_fifo_sink_data    => avalon_st_adapter_005_out_0_data,                     --                .data
			rdata_fifo_sink_error   => avalon_st_adapter_005_out_0_error(0),                 --                .error
			rdata_fifo_src_ready    => cpu_debug_mem_slave_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => cpu_debug_mem_slave_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => cpu_debug_mem_slave_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                                 --     (terminated)
			m0_writeresponsevalid   => '0'                                                   --     (terminated)
		);

	cpu_debug_mem_slave_agent_rsp_fifo : component CodecAudio_mm_interconnect_0_audio_avalon_audio_slave_agent_rsp_fifo
		port map (
			clk               => pll_0_outclk0_clk,                                    --       clk.clk
			reset             => cpu_reset_reset_bridge_in_reset_reset,                -- clk_reset.reset
			in_data           => cpu_debug_mem_slave_agent_rf_source_data,             --        in.data
			in_valid          => cpu_debug_mem_slave_agent_rf_source_valid,            --          .valid
			in_ready          => cpu_debug_mem_slave_agent_rf_source_ready,            --          .ready
			in_startofpacket  => cpu_debug_mem_slave_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => cpu_debug_mem_slave_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => cpu_debug_mem_slave_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => cpu_debug_mem_slave_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => cpu_debug_mem_slave_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	onchipmem_s1_agent : component altera_merlin_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 97,
			PKT_ORI_BURST_SIZE_L      => 95,
			PKT_RESPONSE_STATUS_H     => 94,
			PKT_RESPONSE_STATUS_L     => 93,
			PKT_BURST_SIZE_H          => 70,
			PKT_BURST_SIZE_L          => 68,
			PKT_TRANS_LOCK            => 60,
			PKT_BEGIN_BURST           => 75,
			PKT_PROTECTION_H          => 88,
			PKT_PROTECTION_L          => 86,
			PKT_BURSTWRAP_H           => 67,
			PKT_BURSTWRAP_L           => 65,
			PKT_BYTE_CNT_H            => 64,
			PKT_BYTE_CNT_L            => 62,
			PKT_ADDR_H                => 55,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 56,
			PKT_TRANS_POSTED          => 57,
			PKT_TRANS_WRITE           => 58,
			PKT_TRANS_READ            => 59,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 80,
			PKT_SRC_ID_L              => 77,
			PKT_DEST_ID_H             => 84,
			PKT_DEST_ID_L             => 81,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 12,
			ST_DATA_W                 => 98,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0,
			ECC_ENABLE                => 0
		)
		port map (
			clk                     => pll_0_outclk0_clk,                             --             clk.clk
			reset                   => cpu_reset_reset_bridge_in_reset_reset,         --       clk_reset.reset
			m0_address              => onchipmem_s1_agent_m0_address,                 --              m0.address
			m0_burstcount           => onchipmem_s1_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => onchipmem_s1_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => onchipmem_s1_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => onchipmem_s1_agent_m0_lock,                    --                .lock
			m0_readdata             => onchipmem_s1_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => onchipmem_s1_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => onchipmem_s1_agent_m0_read,                    --                .read
			m0_waitrequest          => onchipmem_s1_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => onchipmem_s1_agent_m0_writedata,               --                .writedata
			m0_write                => onchipmem_s1_agent_m0_write,                   --                .write
			rp_endofpacket          => onchipmem_s1_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => onchipmem_s1_agent_rp_ready,                   --                .ready
			rp_valid                => onchipmem_s1_agent_rp_valid,                   --                .valid
			rp_data                 => onchipmem_s1_agent_rp_data,                    --                .data
			rp_startofpacket        => onchipmem_s1_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_006_src_ready,                         --              cp.ready
			cp_valid                => cmd_mux_006_src_valid,                         --                .valid
			cp_data                 => cmd_mux_006_src_data,                          --                .data
			cp_startofpacket        => cmd_mux_006_src_startofpacket,                 --                .startofpacket
			cp_endofpacket          => cmd_mux_006_src_endofpacket,                   --                .endofpacket
			cp_channel              => cmd_mux_006_src_channel,                       --                .channel
			rf_sink_ready           => onchipmem_s1_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => onchipmem_s1_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => onchipmem_s1_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => onchipmem_s1_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => onchipmem_s1_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => onchipmem_s1_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => onchipmem_s1_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => onchipmem_s1_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => onchipmem_s1_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => onchipmem_s1_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => avalon_st_adapter_006_out_0_ready,             -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => avalon_st_adapter_006_out_0_valid,             --                .valid
			rdata_fifo_sink_data    => avalon_st_adapter_006_out_0_data,              --                .data
			rdata_fifo_sink_error   => avalon_st_adapter_006_out_0_error(0),          --                .error
			rdata_fifo_src_ready    => onchipmem_s1_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => onchipmem_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => onchipmem_s1_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                          --     (terminated)
			m0_writeresponsevalid   => '0'                                            --     (terminated)
		);

	onchipmem_s1_agent_rsp_fifo : component CodecAudio_mm_interconnect_0_audio_avalon_audio_slave_agent_rsp_fifo
		port map (
			clk               => pll_0_outclk0_clk,                             --       clk.clk
			reset             => cpu_reset_reset_bridge_in_reset_reset,         -- clk_reset.reset
			in_data           => onchipmem_s1_agent_rf_source_data,             --        in.data
			in_valid          => onchipmem_s1_agent_rf_source_valid,            --          .valid
			in_ready          => onchipmem_s1_agent_rf_source_ready,            --          .ready
			in_startofpacket  => onchipmem_s1_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => onchipmem_s1_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => onchipmem_s1_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => onchipmem_s1_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => onchipmem_s1_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => onchipmem_s1_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => onchipmem_s1_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	timer0_s1_agent : component altera_merlin_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 97,
			PKT_ORI_BURST_SIZE_L      => 95,
			PKT_RESPONSE_STATUS_H     => 94,
			PKT_RESPONSE_STATUS_L     => 93,
			PKT_BURST_SIZE_H          => 70,
			PKT_BURST_SIZE_L          => 68,
			PKT_TRANS_LOCK            => 60,
			PKT_BEGIN_BURST           => 75,
			PKT_PROTECTION_H          => 88,
			PKT_PROTECTION_L          => 86,
			PKT_BURSTWRAP_H           => 67,
			PKT_BURSTWRAP_L           => 65,
			PKT_BYTE_CNT_H            => 64,
			PKT_BYTE_CNT_L            => 62,
			PKT_ADDR_H                => 55,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 56,
			PKT_TRANS_POSTED          => 57,
			PKT_TRANS_WRITE           => 58,
			PKT_TRANS_READ            => 59,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 80,
			PKT_SRC_ID_L              => 77,
			PKT_DEST_ID_H             => 84,
			PKT_DEST_ID_L             => 81,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 12,
			ST_DATA_W                 => 98,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0,
			ECC_ENABLE                => 0
		)
		port map (
			clk                     => pll_0_outclk0_clk,                          --             clk.clk
			reset                   => cpu_reset_reset_bridge_in_reset_reset,      --       clk_reset.reset
			m0_address              => timer0_s1_agent_m0_address,                 --              m0.address
			m0_burstcount           => timer0_s1_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => timer0_s1_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => timer0_s1_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => timer0_s1_agent_m0_lock,                    --                .lock
			m0_readdata             => timer0_s1_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => timer0_s1_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => timer0_s1_agent_m0_read,                    --                .read
			m0_waitrequest          => timer0_s1_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => timer0_s1_agent_m0_writedata,               --                .writedata
			m0_write                => timer0_s1_agent_m0_write,                   --                .write
			rp_endofpacket          => timer0_s1_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => timer0_s1_agent_rp_ready,                   --                .ready
			rp_valid                => timer0_s1_agent_rp_valid,                   --                .valid
			rp_data                 => timer0_s1_agent_rp_data,                    --                .data
			rp_startofpacket        => timer0_s1_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_007_src_ready,                      --              cp.ready
			cp_valid                => cmd_mux_007_src_valid,                      --                .valid
			cp_data                 => cmd_mux_007_src_data,                       --                .data
			cp_startofpacket        => cmd_mux_007_src_startofpacket,              --                .startofpacket
			cp_endofpacket          => cmd_mux_007_src_endofpacket,                --                .endofpacket
			cp_channel              => cmd_mux_007_src_channel,                    --                .channel
			rf_sink_ready           => timer0_s1_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => timer0_s1_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => timer0_s1_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => timer0_s1_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => timer0_s1_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => timer0_s1_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => timer0_s1_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => timer0_s1_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => timer0_s1_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => timer0_s1_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => avalon_st_adapter_007_out_0_ready,          -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => avalon_st_adapter_007_out_0_valid,          --                .valid
			rdata_fifo_sink_data    => avalon_st_adapter_007_out_0_data,           --                .data
			rdata_fifo_sink_error   => avalon_st_adapter_007_out_0_error(0),       --                .error
			rdata_fifo_src_ready    => timer0_s1_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => timer0_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => timer0_s1_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                       --     (terminated)
			m0_writeresponsevalid   => '0'                                         --     (terminated)
		);

	timer0_s1_agent_rsp_fifo : component CodecAudio_mm_interconnect_0_audio_avalon_audio_slave_agent_rsp_fifo
		port map (
			clk               => pll_0_outclk0_clk,                          --       clk.clk
			reset             => cpu_reset_reset_bridge_in_reset_reset,      -- clk_reset.reset
			in_data           => timer0_s1_agent_rf_source_data,             --        in.data
			in_valid          => timer0_s1_agent_rf_source_valid,            --          .valid
			in_ready          => timer0_s1_agent_rf_source_ready,            --          .ready
			in_startofpacket  => timer0_s1_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => timer0_s1_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => timer0_s1_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => timer0_s1_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => timer0_s1_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => timer0_s1_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => timer0_s1_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	timer1_s1_agent : component altera_merlin_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 97,
			PKT_ORI_BURST_SIZE_L      => 95,
			PKT_RESPONSE_STATUS_H     => 94,
			PKT_RESPONSE_STATUS_L     => 93,
			PKT_BURST_SIZE_H          => 70,
			PKT_BURST_SIZE_L          => 68,
			PKT_TRANS_LOCK            => 60,
			PKT_BEGIN_BURST           => 75,
			PKT_PROTECTION_H          => 88,
			PKT_PROTECTION_L          => 86,
			PKT_BURSTWRAP_H           => 67,
			PKT_BURSTWRAP_L           => 65,
			PKT_BYTE_CNT_H            => 64,
			PKT_BYTE_CNT_L            => 62,
			PKT_ADDR_H                => 55,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 56,
			PKT_TRANS_POSTED          => 57,
			PKT_TRANS_WRITE           => 58,
			PKT_TRANS_READ            => 59,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 80,
			PKT_SRC_ID_L              => 77,
			PKT_DEST_ID_H             => 84,
			PKT_DEST_ID_L             => 81,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 12,
			ST_DATA_W                 => 98,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0,
			ECC_ENABLE                => 0
		)
		port map (
			clk                     => pll_0_outclk0_clk,                          --             clk.clk
			reset                   => cpu_reset_reset_bridge_in_reset_reset,      --       clk_reset.reset
			m0_address              => timer1_s1_agent_m0_address,                 --              m0.address
			m0_burstcount           => timer1_s1_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => timer1_s1_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => timer1_s1_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => timer1_s1_agent_m0_lock,                    --                .lock
			m0_readdata             => timer1_s1_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => timer1_s1_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => timer1_s1_agent_m0_read,                    --                .read
			m0_waitrequest          => timer1_s1_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => timer1_s1_agent_m0_writedata,               --                .writedata
			m0_write                => timer1_s1_agent_m0_write,                   --                .write
			rp_endofpacket          => timer1_s1_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => timer1_s1_agent_rp_ready,                   --                .ready
			rp_valid                => timer1_s1_agent_rp_valid,                   --                .valid
			rp_data                 => timer1_s1_agent_rp_data,                    --                .data
			rp_startofpacket        => timer1_s1_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_008_src_ready,                      --              cp.ready
			cp_valid                => cmd_mux_008_src_valid,                      --                .valid
			cp_data                 => cmd_mux_008_src_data,                       --                .data
			cp_startofpacket        => cmd_mux_008_src_startofpacket,              --                .startofpacket
			cp_endofpacket          => cmd_mux_008_src_endofpacket,                --                .endofpacket
			cp_channel              => cmd_mux_008_src_channel,                    --                .channel
			rf_sink_ready           => timer1_s1_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => timer1_s1_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => timer1_s1_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => timer1_s1_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => timer1_s1_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => timer1_s1_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => timer1_s1_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => timer1_s1_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => timer1_s1_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => timer1_s1_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => avalon_st_adapter_008_out_0_ready,          -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => avalon_st_adapter_008_out_0_valid,          --                .valid
			rdata_fifo_sink_data    => avalon_st_adapter_008_out_0_data,           --                .data
			rdata_fifo_sink_error   => avalon_st_adapter_008_out_0_error(0),       --                .error
			rdata_fifo_src_ready    => timer1_s1_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => timer1_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => timer1_s1_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                       --     (terminated)
			m0_writeresponsevalid   => '0'                                         --     (terminated)
		);

	timer1_s1_agent_rsp_fifo : component CodecAudio_mm_interconnect_0_audio_avalon_audio_slave_agent_rsp_fifo
		port map (
			clk               => pll_0_outclk0_clk,                          --       clk.clk
			reset             => cpu_reset_reset_bridge_in_reset_reset,      -- clk_reset.reset
			in_data           => timer1_s1_agent_rf_source_data,             --        in.data
			in_valid          => timer1_s1_agent_rf_source_valid,            --          .valid
			in_ready          => timer1_s1_agent_rf_source_ready,            --          .ready
			in_startofpacket  => timer1_s1_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => timer1_s1_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => timer1_s1_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => timer1_s1_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => timer1_s1_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => timer1_s1_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => timer1_s1_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	toggleaccmat_s1_agent : component altera_merlin_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 97,
			PKT_ORI_BURST_SIZE_L      => 95,
			PKT_RESPONSE_STATUS_H     => 94,
			PKT_RESPONSE_STATUS_L     => 93,
			PKT_BURST_SIZE_H          => 70,
			PKT_BURST_SIZE_L          => 68,
			PKT_TRANS_LOCK            => 60,
			PKT_BEGIN_BURST           => 75,
			PKT_PROTECTION_H          => 88,
			PKT_PROTECTION_L          => 86,
			PKT_BURSTWRAP_H           => 67,
			PKT_BURSTWRAP_L           => 65,
			PKT_BYTE_CNT_H            => 64,
			PKT_BYTE_CNT_L            => 62,
			PKT_ADDR_H                => 55,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 56,
			PKT_TRANS_POSTED          => 57,
			PKT_TRANS_WRITE           => 58,
			PKT_TRANS_READ            => 59,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 80,
			PKT_SRC_ID_L              => 77,
			PKT_DEST_ID_H             => 84,
			PKT_DEST_ID_L             => 81,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 12,
			ST_DATA_W                 => 98,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0,
			ECC_ENABLE                => 0
		)
		port map (
			clk                     => pll_0_outclk0_clk,                                --             clk.clk
			reset                   => cpu_reset_reset_bridge_in_reset_reset,            --       clk_reset.reset
			m0_address              => toggleaccmat_s1_agent_m0_address,                 --              m0.address
			m0_burstcount           => toggleaccmat_s1_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => toggleaccmat_s1_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => toggleaccmat_s1_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => toggleaccmat_s1_agent_m0_lock,                    --                .lock
			m0_readdata             => toggleaccmat_s1_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => toggleaccmat_s1_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => toggleaccmat_s1_agent_m0_read,                    --                .read
			m0_waitrequest          => toggleaccmat_s1_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => toggleaccmat_s1_agent_m0_writedata,               --                .writedata
			m0_write                => toggleaccmat_s1_agent_m0_write,                   --                .write
			rp_endofpacket          => toggleaccmat_s1_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => toggleaccmat_s1_agent_rp_ready,                   --                .ready
			rp_valid                => toggleaccmat_s1_agent_rp_valid,                   --                .valid
			rp_data                 => toggleaccmat_s1_agent_rp_data,                    --                .data
			rp_startofpacket        => toggleaccmat_s1_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_009_src_ready,                            --              cp.ready
			cp_valid                => cmd_mux_009_src_valid,                            --                .valid
			cp_data                 => cmd_mux_009_src_data,                             --                .data
			cp_startofpacket        => cmd_mux_009_src_startofpacket,                    --                .startofpacket
			cp_endofpacket          => cmd_mux_009_src_endofpacket,                      --                .endofpacket
			cp_channel              => cmd_mux_009_src_channel,                          --                .channel
			rf_sink_ready           => toggleaccmat_s1_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => toggleaccmat_s1_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => toggleaccmat_s1_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => toggleaccmat_s1_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => toggleaccmat_s1_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => toggleaccmat_s1_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => toggleaccmat_s1_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => toggleaccmat_s1_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => toggleaccmat_s1_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => toggleaccmat_s1_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => avalon_st_adapter_009_out_0_ready,                -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => avalon_st_adapter_009_out_0_valid,                --                .valid
			rdata_fifo_sink_data    => avalon_st_adapter_009_out_0_data,                 --                .data
			rdata_fifo_sink_error   => avalon_st_adapter_009_out_0_error(0),             --                .error
			rdata_fifo_src_ready    => toggleaccmat_s1_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => toggleaccmat_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => toggleaccmat_s1_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                             --     (terminated)
			m0_writeresponsevalid   => '0'                                               --     (terminated)
		);

	toggleaccmat_s1_agent_rsp_fifo : component CodecAudio_mm_interconnect_0_audio_avalon_audio_slave_agent_rsp_fifo
		port map (
			clk               => pll_0_outclk0_clk,                                --       clk.clk
			reset             => cpu_reset_reset_bridge_in_reset_reset,            -- clk_reset.reset
			in_data           => toggleaccmat_s1_agent_rf_source_data,             --        in.data
			in_valid          => toggleaccmat_s1_agent_rf_source_valid,            --          .valid
			in_ready          => toggleaccmat_s1_agent_rf_source_ready,            --          .ready
			in_startofpacket  => toggleaccmat_s1_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => toggleaccmat_s1_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => toggleaccmat_s1_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => toggleaccmat_s1_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => toggleaccmat_s1_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => toggleaccmat_s1_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => toggleaccmat_s1_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	datatoaccmat_s1_agent : component altera_merlin_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 97,
			PKT_ORI_BURST_SIZE_L      => 95,
			PKT_RESPONSE_STATUS_H     => 94,
			PKT_RESPONSE_STATUS_L     => 93,
			PKT_BURST_SIZE_H          => 70,
			PKT_BURST_SIZE_L          => 68,
			PKT_TRANS_LOCK            => 60,
			PKT_BEGIN_BURST           => 75,
			PKT_PROTECTION_H          => 88,
			PKT_PROTECTION_L          => 86,
			PKT_BURSTWRAP_H           => 67,
			PKT_BURSTWRAP_L           => 65,
			PKT_BYTE_CNT_H            => 64,
			PKT_BYTE_CNT_L            => 62,
			PKT_ADDR_H                => 55,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 56,
			PKT_TRANS_POSTED          => 57,
			PKT_TRANS_WRITE           => 58,
			PKT_TRANS_READ            => 59,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 80,
			PKT_SRC_ID_L              => 77,
			PKT_DEST_ID_H             => 84,
			PKT_DEST_ID_L             => 81,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 12,
			ST_DATA_W                 => 98,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0,
			ECC_ENABLE                => 0
		)
		port map (
			clk                     => pll_0_outclk0_clk,                                --             clk.clk
			reset                   => cpu_reset_reset_bridge_in_reset_reset,            --       clk_reset.reset
			m0_address              => datatoaccmat_s1_agent_m0_address,                 --              m0.address
			m0_burstcount           => datatoaccmat_s1_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => datatoaccmat_s1_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => datatoaccmat_s1_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => datatoaccmat_s1_agent_m0_lock,                    --                .lock
			m0_readdata             => datatoaccmat_s1_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => datatoaccmat_s1_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => datatoaccmat_s1_agent_m0_read,                    --                .read
			m0_waitrequest          => datatoaccmat_s1_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => datatoaccmat_s1_agent_m0_writedata,               --                .writedata
			m0_write                => datatoaccmat_s1_agent_m0_write,                   --                .write
			rp_endofpacket          => datatoaccmat_s1_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => datatoaccmat_s1_agent_rp_ready,                   --                .ready
			rp_valid                => datatoaccmat_s1_agent_rp_valid,                   --                .valid
			rp_data                 => datatoaccmat_s1_agent_rp_data,                    --                .data
			rp_startofpacket        => datatoaccmat_s1_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_010_src_ready,                            --              cp.ready
			cp_valid                => cmd_mux_010_src_valid,                            --                .valid
			cp_data                 => cmd_mux_010_src_data,                             --                .data
			cp_startofpacket        => cmd_mux_010_src_startofpacket,                    --                .startofpacket
			cp_endofpacket          => cmd_mux_010_src_endofpacket,                      --                .endofpacket
			cp_channel              => cmd_mux_010_src_channel,                          --                .channel
			rf_sink_ready           => datatoaccmat_s1_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => datatoaccmat_s1_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => datatoaccmat_s1_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => datatoaccmat_s1_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => datatoaccmat_s1_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => datatoaccmat_s1_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => datatoaccmat_s1_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => datatoaccmat_s1_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => datatoaccmat_s1_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => datatoaccmat_s1_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => avalon_st_adapter_010_out_0_ready,                -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => avalon_st_adapter_010_out_0_valid,                --                .valid
			rdata_fifo_sink_data    => avalon_st_adapter_010_out_0_data,                 --                .data
			rdata_fifo_sink_error   => avalon_st_adapter_010_out_0_error(0),             --                .error
			rdata_fifo_src_ready    => datatoaccmat_s1_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => datatoaccmat_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => datatoaccmat_s1_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                             --     (terminated)
			m0_writeresponsevalid   => '0'                                               --     (terminated)
		);

	datatoaccmat_s1_agent_rsp_fifo : component CodecAudio_mm_interconnect_0_audio_avalon_audio_slave_agent_rsp_fifo
		port map (
			clk               => pll_0_outclk0_clk,                                --       clk.clk
			reset             => cpu_reset_reset_bridge_in_reset_reset,            -- clk_reset.reset
			in_data           => datatoaccmat_s1_agent_rf_source_data,             --        in.data
			in_valid          => datatoaccmat_s1_agent_rf_source_valid,            --          .valid
			in_ready          => datatoaccmat_s1_agent_rf_source_ready,            --          .ready
			in_startofpacket  => datatoaccmat_s1_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => datatoaccmat_s1_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => datatoaccmat_s1_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => datatoaccmat_s1_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => datatoaccmat_s1_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => datatoaccmat_s1_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => datatoaccmat_s1_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	datafromaccmat_s1_agent : component altera_merlin_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 97,
			PKT_ORI_BURST_SIZE_L      => 95,
			PKT_RESPONSE_STATUS_H     => 94,
			PKT_RESPONSE_STATUS_L     => 93,
			PKT_BURST_SIZE_H          => 70,
			PKT_BURST_SIZE_L          => 68,
			PKT_TRANS_LOCK            => 60,
			PKT_BEGIN_BURST           => 75,
			PKT_PROTECTION_H          => 88,
			PKT_PROTECTION_L          => 86,
			PKT_BURSTWRAP_H           => 67,
			PKT_BURSTWRAP_L           => 65,
			PKT_BYTE_CNT_H            => 64,
			PKT_BYTE_CNT_L            => 62,
			PKT_ADDR_H                => 55,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 56,
			PKT_TRANS_POSTED          => 57,
			PKT_TRANS_WRITE           => 58,
			PKT_TRANS_READ            => 59,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 80,
			PKT_SRC_ID_L              => 77,
			PKT_DEST_ID_H             => 84,
			PKT_DEST_ID_L             => 81,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 12,
			ST_DATA_W                 => 98,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0,
			ECC_ENABLE                => 0
		)
		port map (
			clk                     => pll_0_outclk0_clk,                                  --             clk.clk
			reset                   => cpu_reset_reset_bridge_in_reset_reset,              --       clk_reset.reset
			m0_address              => datafromaccmat_s1_agent_m0_address,                 --              m0.address
			m0_burstcount           => datafromaccmat_s1_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => datafromaccmat_s1_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => datafromaccmat_s1_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => datafromaccmat_s1_agent_m0_lock,                    --                .lock
			m0_readdata             => datafromaccmat_s1_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => datafromaccmat_s1_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => datafromaccmat_s1_agent_m0_read,                    --                .read
			m0_waitrequest          => datafromaccmat_s1_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => datafromaccmat_s1_agent_m0_writedata,               --                .writedata
			m0_write                => datafromaccmat_s1_agent_m0_write,                   --                .write
			rp_endofpacket          => datafromaccmat_s1_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => datafromaccmat_s1_agent_rp_ready,                   --                .ready
			rp_valid                => datafromaccmat_s1_agent_rp_valid,                   --                .valid
			rp_data                 => datafromaccmat_s1_agent_rp_data,                    --                .data
			rp_startofpacket        => datafromaccmat_s1_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_011_src_ready,                              --              cp.ready
			cp_valid                => cmd_mux_011_src_valid,                              --                .valid
			cp_data                 => cmd_mux_011_src_data,                               --                .data
			cp_startofpacket        => cmd_mux_011_src_startofpacket,                      --                .startofpacket
			cp_endofpacket          => cmd_mux_011_src_endofpacket,                        --                .endofpacket
			cp_channel              => cmd_mux_011_src_channel,                            --                .channel
			rf_sink_ready           => datafromaccmat_s1_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => datafromaccmat_s1_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => datafromaccmat_s1_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => datafromaccmat_s1_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => datafromaccmat_s1_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => datafromaccmat_s1_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => datafromaccmat_s1_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => datafromaccmat_s1_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => datafromaccmat_s1_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => datafromaccmat_s1_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => avalon_st_adapter_011_out_0_ready,                  -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => avalon_st_adapter_011_out_0_valid,                  --                .valid
			rdata_fifo_sink_data    => avalon_st_adapter_011_out_0_data,                   --                .data
			rdata_fifo_sink_error   => avalon_st_adapter_011_out_0_error(0),               --                .error
			rdata_fifo_src_ready    => datafromaccmat_s1_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => datafromaccmat_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => datafromaccmat_s1_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                               --     (terminated)
			m0_writeresponsevalid   => '0'                                                 --     (terminated)
		);

	datafromaccmat_s1_agent_rsp_fifo : component CodecAudio_mm_interconnect_0_audio_avalon_audio_slave_agent_rsp_fifo
		port map (
			clk               => pll_0_outclk0_clk,                                  --       clk.clk
			reset             => cpu_reset_reset_bridge_in_reset_reset,              -- clk_reset.reset
			in_data           => datafromaccmat_s1_agent_rf_source_data,             --        in.data
			in_valid          => datafromaccmat_s1_agent_rf_source_valid,            --          .valid
			in_ready          => datafromaccmat_s1_agent_rf_source_ready,            --          .ready
			in_startofpacket  => datafromaccmat_s1_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => datafromaccmat_s1_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => datafromaccmat_s1_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => datafromaccmat_s1_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => datafromaccmat_s1_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => datafromaccmat_s1_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => datafromaccmat_s1_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	router : component CodecAudio_mm_interconnect_0_router
		port map (
			sink_ready         => cpu_data_master_agent_cp_ready,         --      sink.ready
			sink_valid         => cpu_data_master_agent_cp_valid,         --          .valid
			sink_data          => cpu_data_master_agent_cp_data,          --          .data
			sink_startofpacket => cpu_data_master_agent_cp_startofpacket, --          .startofpacket
			sink_endofpacket   => cpu_data_master_agent_cp_endofpacket,   --          .endofpacket
			clk                => pll_0_outclk0_clk,                      --       clk.clk
			reset              => cpu_reset_reset_bridge_in_reset_reset,  -- clk_reset.reset
			src_ready          => router_src_ready,                       --       src.ready
			src_valid          => router_src_valid,                       --          .valid
			src_data           => router_src_data,                        --          .data
			src_channel        => router_src_channel,                     --          .channel
			src_startofpacket  => router_src_startofpacket,               --          .startofpacket
			src_endofpacket    => router_src_endofpacket                  --          .endofpacket
		);

	router_001 : component CodecAudio_mm_interconnect_0_router_001
		port map (
			sink_ready         => cpu_instruction_master_agent_cp_ready,         --      sink.ready
			sink_valid         => cpu_instruction_master_agent_cp_valid,         --          .valid
			sink_data          => cpu_instruction_master_agent_cp_data,          --          .data
			sink_startofpacket => cpu_instruction_master_agent_cp_startofpacket, --          .startofpacket
			sink_endofpacket   => cpu_instruction_master_agent_cp_endofpacket,   --          .endofpacket
			clk                => pll_0_outclk0_clk,                             --       clk.clk
			reset              => cpu_reset_reset_bridge_in_reset_reset,         -- clk_reset.reset
			src_ready          => router_001_src_ready,                          --       src.ready
			src_valid          => router_001_src_valid,                          --          .valid
			src_data           => router_001_src_data,                           --          .data
			src_channel        => router_001_src_channel,                        --          .channel
			src_startofpacket  => router_001_src_startofpacket,                  --          .startofpacket
			src_endofpacket    => router_001_src_endofpacket                     --          .endofpacket
		);

	router_002 : component CodecAudio_mm_interconnect_0_router_002
		port map (
			sink_ready         => audio_avalon_audio_slave_agent_rp_ready,         --      sink.ready
			sink_valid         => audio_avalon_audio_slave_agent_rp_valid,         --          .valid
			sink_data          => audio_avalon_audio_slave_agent_rp_data,          --          .data
			sink_startofpacket => audio_avalon_audio_slave_agent_rp_startofpacket, --          .startofpacket
			sink_endofpacket   => audio_avalon_audio_slave_agent_rp_endofpacket,   --          .endofpacket
			clk                => dac_pll_audio_clk_clk,                           --       clk.clk
			reset              => audio_reset_reset_bridge_in_reset_reset,         -- clk_reset.reset
			src_ready          => router_002_src_ready,                            --       src.ready
			src_valid          => router_002_src_valid,                            --          .valid
			src_data           => router_002_src_data,                             --          .data
			src_channel        => router_002_src_channel,                          --          .channel
			src_startofpacket  => router_002_src_startofpacket,                    --          .startofpacket
			src_endofpacket    => router_002_src_endofpacket                       --          .endofpacket
		);

	router_003 : component CodecAudio_mm_interconnect_0_router_002
		port map (
			sink_ready         => audio_and_video_config_avalon_av_config_slave_agent_rp_ready,         --      sink.ready
			sink_valid         => audio_and_video_config_avalon_av_config_slave_agent_rp_valid,         --          .valid
			sink_data          => audio_and_video_config_avalon_av_config_slave_agent_rp_data,          --          .data
			sink_startofpacket => audio_and_video_config_avalon_av_config_slave_agent_rp_startofpacket, --          .startofpacket
			sink_endofpacket   => audio_and_video_config_avalon_av_config_slave_agent_rp_endofpacket,   --          .endofpacket
			clk                => pll_0_outclk0_clk,                                                    --       clk.clk
			reset              => cpu_reset_reset_bridge_in_reset_reset,                                -- clk_reset.reset
			src_ready          => router_003_src_ready,                                                 --       src.ready
			src_valid          => router_003_src_valid,                                                 --          .valid
			src_data           => router_003_src_data,                                                  --          .data
			src_channel        => router_003_src_channel,                                               --          .channel
			src_startofpacket  => router_003_src_startofpacket,                                         --          .startofpacket
			src_endofpacket    => router_003_src_endofpacket                                            --          .endofpacket
		);

	router_004 : component CodecAudio_mm_interconnect_0_router_002
		port map (
			sink_ready         => jtag_uart_0_avalon_jtag_slave_agent_rp_ready,         --      sink.ready
			sink_valid         => jtag_uart_0_avalon_jtag_slave_agent_rp_valid,         --          .valid
			sink_data          => jtag_uart_0_avalon_jtag_slave_agent_rp_data,          --          .data
			sink_startofpacket => jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket, --          .startofpacket
			sink_endofpacket   => jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket,   --          .endofpacket
			clk                => pll_0_outclk0_clk,                                    --       clk.clk
			reset              => cpu_reset_reset_bridge_in_reset_reset,                -- clk_reset.reset
			src_ready          => router_004_src_ready,                                 --       src.ready
			src_valid          => router_004_src_valid,                                 --          .valid
			src_data           => router_004_src_data,                                  --          .data
			src_channel        => router_004_src_channel,                               --          .channel
			src_startofpacket  => router_004_src_startofpacket,                         --          .startofpacket
			src_endofpacket    => router_004_src_endofpacket                            --          .endofpacket
		);

	router_005 : component CodecAudio_mm_interconnect_0_router_002
		port map (
			sink_ready         => ps2_avalon_ps2_slave_agent_rp_ready,         --      sink.ready
			sink_valid         => ps2_avalon_ps2_slave_agent_rp_valid,         --          .valid
			sink_data          => ps2_avalon_ps2_slave_agent_rp_data,          --          .data
			sink_startofpacket => ps2_avalon_ps2_slave_agent_rp_startofpacket, --          .startofpacket
			sink_endofpacket   => ps2_avalon_ps2_slave_agent_rp_endofpacket,   --          .endofpacket
			clk                => pll_0_outclk0_clk,                           --       clk.clk
			reset              => cpu_reset_reset_bridge_in_reset_reset,       -- clk_reset.reset
			src_ready          => router_005_src_ready,                        --       src.ready
			src_valid          => router_005_src_valid,                        --          .valid
			src_data           => router_005_src_data,                         --          .data
			src_channel        => router_005_src_channel,                      --          .channel
			src_startofpacket  => router_005_src_startofpacket,                --          .startofpacket
			src_endofpacket    => router_005_src_endofpacket                   --          .endofpacket
		);

	router_006 : component CodecAudio_mm_interconnect_0_router_002
		port map (
			sink_ready         => sysid_control_slave_agent_rp_ready,         --      sink.ready
			sink_valid         => sysid_control_slave_agent_rp_valid,         --          .valid
			sink_data          => sysid_control_slave_agent_rp_data,          --          .data
			sink_startofpacket => sysid_control_slave_agent_rp_startofpacket, --          .startofpacket
			sink_endofpacket   => sysid_control_slave_agent_rp_endofpacket,   --          .endofpacket
			clk                => pll_0_outclk0_clk,                          --       clk.clk
			reset              => cpu_reset_reset_bridge_in_reset_reset,      -- clk_reset.reset
			src_ready          => router_006_src_ready,                       --       src.ready
			src_valid          => router_006_src_valid,                       --          .valid
			src_data           => router_006_src_data,                        --          .data
			src_channel        => router_006_src_channel,                     --          .channel
			src_startofpacket  => router_006_src_startofpacket,               --          .startofpacket
			src_endofpacket    => router_006_src_endofpacket                  --          .endofpacket
		);

	router_007 : component CodecAudio_mm_interconnect_0_router_007
		port map (
			sink_ready         => cpu_debug_mem_slave_agent_rp_ready,         --      sink.ready
			sink_valid         => cpu_debug_mem_slave_agent_rp_valid,         --          .valid
			sink_data          => cpu_debug_mem_slave_agent_rp_data,          --          .data
			sink_startofpacket => cpu_debug_mem_slave_agent_rp_startofpacket, --          .startofpacket
			sink_endofpacket   => cpu_debug_mem_slave_agent_rp_endofpacket,   --          .endofpacket
			clk                => pll_0_outclk0_clk,                          --       clk.clk
			reset              => cpu_reset_reset_bridge_in_reset_reset,      -- clk_reset.reset
			src_ready          => router_007_src_ready,                       --       src.ready
			src_valid          => router_007_src_valid,                       --          .valid
			src_data           => router_007_src_data,                        --          .data
			src_channel        => router_007_src_channel,                     --          .channel
			src_startofpacket  => router_007_src_startofpacket,               --          .startofpacket
			src_endofpacket    => router_007_src_endofpacket                  --          .endofpacket
		);

	router_008 : component CodecAudio_mm_interconnect_0_router_007
		port map (
			sink_ready         => onchipmem_s1_agent_rp_ready,           --      sink.ready
			sink_valid         => onchipmem_s1_agent_rp_valid,           --          .valid
			sink_data          => onchipmem_s1_agent_rp_data,            --          .data
			sink_startofpacket => onchipmem_s1_agent_rp_startofpacket,   --          .startofpacket
			sink_endofpacket   => onchipmem_s1_agent_rp_endofpacket,     --          .endofpacket
			clk                => pll_0_outclk0_clk,                     --       clk.clk
			reset              => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_008_src_ready,                  --       src.ready
			src_valid          => router_008_src_valid,                  --          .valid
			src_data           => router_008_src_data,                   --          .data
			src_channel        => router_008_src_channel,                --          .channel
			src_startofpacket  => router_008_src_startofpacket,          --          .startofpacket
			src_endofpacket    => router_008_src_endofpacket             --          .endofpacket
		);

	router_009 : component CodecAudio_mm_interconnect_0_router_002
		port map (
			sink_ready         => timer0_s1_agent_rp_ready,              --      sink.ready
			sink_valid         => timer0_s1_agent_rp_valid,              --          .valid
			sink_data          => timer0_s1_agent_rp_data,               --          .data
			sink_startofpacket => timer0_s1_agent_rp_startofpacket,      --          .startofpacket
			sink_endofpacket   => timer0_s1_agent_rp_endofpacket,        --          .endofpacket
			clk                => pll_0_outclk0_clk,                     --       clk.clk
			reset              => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_009_src_ready,                  --       src.ready
			src_valid          => router_009_src_valid,                  --          .valid
			src_data           => router_009_src_data,                   --          .data
			src_channel        => router_009_src_channel,                --          .channel
			src_startofpacket  => router_009_src_startofpacket,          --          .startofpacket
			src_endofpacket    => router_009_src_endofpacket             --          .endofpacket
		);

	router_010 : component CodecAudio_mm_interconnect_0_router_002
		port map (
			sink_ready         => timer1_s1_agent_rp_ready,              --      sink.ready
			sink_valid         => timer1_s1_agent_rp_valid,              --          .valid
			sink_data          => timer1_s1_agent_rp_data,               --          .data
			sink_startofpacket => timer1_s1_agent_rp_startofpacket,      --          .startofpacket
			sink_endofpacket   => timer1_s1_agent_rp_endofpacket,        --          .endofpacket
			clk                => pll_0_outclk0_clk,                     --       clk.clk
			reset              => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_010_src_ready,                  --       src.ready
			src_valid          => router_010_src_valid,                  --          .valid
			src_data           => router_010_src_data,                   --          .data
			src_channel        => router_010_src_channel,                --          .channel
			src_startofpacket  => router_010_src_startofpacket,          --          .startofpacket
			src_endofpacket    => router_010_src_endofpacket             --          .endofpacket
		);

	router_011 : component CodecAudio_mm_interconnect_0_router_002
		port map (
			sink_ready         => toggleaccmat_s1_agent_rp_ready,         --      sink.ready
			sink_valid         => toggleaccmat_s1_agent_rp_valid,         --          .valid
			sink_data          => toggleaccmat_s1_agent_rp_data,          --          .data
			sink_startofpacket => toggleaccmat_s1_agent_rp_startofpacket, --          .startofpacket
			sink_endofpacket   => toggleaccmat_s1_agent_rp_endofpacket,   --          .endofpacket
			clk                => pll_0_outclk0_clk,                      --       clk.clk
			reset              => cpu_reset_reset_bridge_in_reset_reset,  -- clk_reset.reset
			src_ready          => router_011_src_ready,                   --       src.ready
			src_valid          => router_011_src_valid,                   --          .valid
			src_data           => router_011_src_data,                    --          .data
			src_channel        => router_011_src_channel,                 --          .channel
			src_startofpacket  => router_011_src_startofpacket,           --          .startofpacket
			src_endofpacket    => router_011_src_endofpacket              --          .endofpacket
		);

	router_012 : component CodecAudio_mm_interconnect_0_router_002
		port map (
			sink_ready         => datatoaccmat_s1_agent_rp_ready,         --      sink.ready
			sink_valid         => datatoaccmat_s1_agent_rp_valid,         --          .valid
			sink_data          => datatoaccmat_s1_agent_rp_data,          --          .data
			sink_startofpacket => datatoaccmat_s1_agent_rp_startofpacket, --          .startofpacket
			sink_endofpacket   => datatoaccmat_s1_agent_rp_endofpacket,   --          .endofpacket
			clk                => pll_0_outclk0_clk,                      --       clk.clk
			reset              => cpu_reset_reset_bridge_in_reset_reset,  -- clk_reset.reset
			src_ready          => router_012_src_ready,                   --       src.ready
			src_valid          => router_012_src_valid,                   --          .valid
			src_data           => router_012_src_data,                    --          .data
			src_channel        => router_012_src_channel,                 --          .channel
			src_startofpacket  => router_012_src_startofpacket,           --          .startofpacket
			src_endofpacket    => router_012_src_endofpacket              --          .endofpacket
		);

	router_013 : component CodecAudio_mm_interconnect_0_router_002
		port map (
			sink_ready         => datafromaccmat_s1_agent_rp_ready,         --      sink.ready
			sink_valid         => datafromaccmat_s1_agent_rp_valid,         --          .valid
			sink_data          => datafromaccmat_s1_agent_rp_data,          --          .data
			sink_startofpacket => datafromaccmat_s1_agent_rp_startofpacket, --          .startofpacket
			sink_endofpacket   => datafromaccmat_s1_agent_rp_endofpacket,   --          .endofpacket
			clk                => pll_0_outclk0_clk,                        --       clk.clk
			reset              => cpu_reset_reset_bridge_in_reset_reset,    -- clk_reset.reset
			src_ready          => router_013_src_ready,                     --       src.ready
			src_valid          => router_013_src_valid,                     --          .valid
			src_data           => router_013_src_data,                      --          .data
			src_channel        => router_013_src_channel,                   --          .channel
			src_startofpacket  => router_013_src_startofpacket,             --          .startofpacket
			src_endofpacket    => router_013_src_endofpacket                --          .endofpacket
		);

	cmd_demux : component CodecAudio_mm_interconnect_0_cmd_demux
		port map (
			clk                 => pll_0_outclk0_clk,                     --       clk.clk
			reset               => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready          => router_src_ready,                      --      sink.ready
			sink_channel        => router_src_channel,                    --          .channel
			sink_data           => router_src_data,                       --          .data
			sink_startofpacket  => router_src_startofpacket,              --          .startofpacket
			sink_endofpacket    => router_src_endofpacket,                --          .endofpacket
			sink_valid(0)       => router_src_valid,                      --          .valid
			src0_ready          => cmd_demux_src0_ready,                  --      src0.ready
			src0_valid          => cmd_demux_src0_valid,                  --          .valid
			src0_data           => cmd_demux_src0_data,                   --          .data
			src0_channel        => cmd_demux_src0_channel,                --          .channel
			src0_startofpacket  => cmd_demux_src0_startofpacket,          --          .startofpacket
			src0_endofpacket    => cmd_demux_src0_endofpacket,            --          .endofpacket
			src1_ready          => cmd_demux_src1_ready,                  --      src1.ready
			src1_valid          => cmd_demux_src1_valid,                  --          .valid
			src1_data           => cmd_demux_src1_data,                   --          .data
			src1_channel        => cmd_demux_src1_channel,                --          .channel
			src1_startofpacket  => cmd_demux_src1_startofpacket,          --          .startofpacket
			src1_endofpacket    => cmd_demux_src1_endofpacket,            --          .endofpacket
			src2_ready          => cmd_demux_src2_ready,                  --      src2.ready
			src2_valid          => cmd_demux_src2_valid,                  --          .valid
			src2_data           => cmd_demux_src2_data,                   --          .data
			src2_channel        => cmd_demux_src2_channel,                --          .channel
			src2_startofpacket  => cmd_demux_src2_startofpacket,          --          .startofpacket
			src2_endofpacket    => cmd_demux_src2_endofpacket,            --          .endofpacket
			src3_ready          => cmd_demux_src3_ready,                  --      src3.ready
			src3_valid          => cmd_demux_src3_valid,                  --          .valid
			src3_data           => cmd_demux_src3_data,                   --          .data
			src3_channel        => cmd_demux_src3_channel,                --          .channel
			src3_startofpacket  => cmd_demux_src3_startofpacket,          --          .startofpacket
			src3_endofpacket    => cmd_demux_src3_endofpacket,            --          .endofpacket
			src4_ready          => cmd_demux_src4_ready,                  --      src4.ready
			src4_valid          => cmd_demux_src4_valid,                  --          .valid
			src4_data           => cmd_demux_src4_data,                   --          .data
			src4_channel        => cmd_demux_src4_channel,                --          .channel
			src4_startofpacket  => cmd_demux_src4_startofpacket,          --          .startofpacket
			src4_endofpacket    => cmd_demux_src4_endofpacket,            --          .endofpacket
			src5_ready          => cmd_demux_src5_ready,                  --      src5.ready
			src5_valid          => cmd_demux_src5_valid,                  --          .valid
			src5_data           => cmd_demux_src5_data,                   --          .data
			src5_channel        => cmd_demux_src5_channel,                --          .channel
			src5_startofpacket  => cmd_demux_src5_startofpacket,          --          .startofpacket
			src5_endofpacket    => cmd_demux_src5_endofpacket,            --          .endofpacket
			src6_ready          => cmd_demux_src6_ready,                  --      src6.ready
			src6_valid          => cmd_demux_src6_valid,                  --          .valid
			src6_data           => cmd_demux_src6_data,                   --          .data
			src6_channel        => cmd_demux_src6_channel,                --          .channel
			src6_startofpacket  => cmd_demux_src6_startofpacket,          --          .startofpacket
			src6_endofpacket    => cmd_demux_src6_endofpacket,            --          .endofpacket
			src7_ready          => cmd_demux_src7_ready,                  --      src7.ready
			src7_valid          => cmd_demux_src7_valid,                  --          .valid
			src7_data           => cmd_demux_src7_data,                   --          .data
			src7_channel        => cmd_demux_src7_channel,                --          .channel
			src7_startofpacket  => cmd_demux_src7_startofpacket,          --          .startofpacket
			src7_endofpacket    => cmd_demux_src7_endofpacket,            --          .endofpacket
			src8_ready          => cmd_demux_src8_ready,                  --      src8.ready
			src8_valid          => cmd_demux_src8_valid,                  --          .valid
			src8_data           => cmd_demux_src8_data,                   --          .data
			src8_channel        => cmd_demux_src8_channel,                --          .channel
			src8_startofpacket  => cmd_demux_src8_startofpacket,          --          .startofpacket
			src8_endofpacket    => cmd_demux_src8_endofpacket,            --          .endofpacket
			src9_ready          => cmd_demux_src9_ready,                  --      src9.ready
			src9_valid          => cmd_demux_src9_valid,                  --          .valid
			src9_data           => cmd_demux_src9_data,                   --          .data
			src9_channel        => cmd_demux_src9_channel,                --          .channel
			src9_startofpacket  => cmd_demux_src9_startofpacket,          --          .startofpacket
			src9_endofpacket    => cmd_demux_src9_endofpacket,            --          .endofpacket
			src10_ready         => cmd_demux_src10_ready,                 --     src10.ready
			src10_valid         => cmd_demux_src10_valid,                 --          .valid
			src10_data          => cmd_demux_src10_data,                  --          .data
			src10_channel       => cmd_demux_src10_channel,               --          .channel
			src10_startofpacket => cmd_demux_src10_startofpacket,         --          .startofpacket
			src10_endofpacket   => cmd_demux_src10_endofpacket,           --          .endofpacket
			src11_ready         => cmd_demux_src11_ready,                 --     src11.ready
			src11_valid         => cmd_demux_src11_valid,                 --          .valid
			src11_data          => cmd_demux_src11_data,                  --          .data
			src11_channel       => cmd_demux_src11_channel,               --          .channel
			src11_startofpacket => cmd_demux_src11_startofpacket,         --          .startofpacket
			src11_endofpacket   => cmd_demux_src11_endofpacket            --          .endofpacket
		);

	cmd_demux_001 : component CodecAudio_mm_interconnect_0_cmd_demux_001
		port map (
			clk                => pll_0_outclk0_clk,                     --       clk.clk
			reset              => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_001_src_ready,                  --      sink.ready
			sink_channel       => router_001_src_channel,                --          .channel
			sink_data          => router_001_src_data,                   --          .data
			sink_startofpacket => router_001_src_startofpacket,          --          .startofpacket
			sink_endofpacket   => router_001_src_endofpacket,            --          .endofpacket
			sink_valid(0)      => router_001_src_valid,                  --          .valid
			src0_ready         => cmd_demux_001_src0_ready,              --      src0.ready
			src0_valid         => cmd_demux_001_src0_valid,              --          .valid
			src0_data          => cmd_demux_001_src0_data,               --          .data
			src0_channel       => cmd_demux_001_src0_channel,            --          .channel
			src0_startofpacket => cmd_demux_001_src0_startofpacket,      --          .startofpacket
			src0_endofpacket   => cmd_demux_001_src0_endofpacket,        --          .endofpacket
			src1_ready         => cmd_demux_001_src1_ready,              --      src1.ready
			src1_valid         => cmd_demux_001_src1_valid,              --          .valid
			src1_data          => cmd_demux_001_src1_data,               --          .data
			src1_channel       => cmd_demux_001_src1_channel,            --          .channel
			src1_startofpacket => cmd_demux_001_src1_startofpacket,      --          .startofpacket
			src1_endofpacket   => cmd_demux_001_src1_endofpacket         --          .endofpacket
		);

	cmd_mux : component CodecAudio_mm_interconnect_0_cmd_mux
		port map (
			clk                 => dac_pll_audio_clk_clk,                   --       clk.clk
			reset               => audio_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_src_ready,                       --       src.ready
			src_valid           => cmd_mux_src_valid,                       --          .valid
			src_data            => cmd_mux_src_data,                        --          .data
			src_channel         => cmd_mux_src_channel,                     --          .channel
			src_startofpacket   => cmd_mux_src_startofpacket,               --          .startofpacket
			src_endofpacket     => cmd_mux_src_endofpacket,                 --          .endofpacket
			sink0_ready         => crosser_out_ready,                       --     sink0.ready
			sink0_valid         => crosser_out_valid,                       --          .valid
			sink0_channel       => crosser_out_channel,                     --          .channel
			sink0_data          => crosser_out_data,                        --          .data
			sink0_startofpacket => crosser_out_startofpacket,               --          .startofpacket
			sink0_endofpacket   => crosser_out_endofpacket                  --          .endofpacket
		);

	cmd_mux_001 : component CodecAudio_mm_interconnect_0_cmd_mux
		port map (
			clk                 => pll_0_outclk0_clk,                     --       clk.clk
			reset               => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_001_src_ready,                 --       src.ready
			src_valid           => cmd_mux_001_src_valid,                 --          .valid
			src_data            => cmd_mux_001_src_data,                  --          .data
			src_channel         => cmd_mux_001_src_channel,               --          .channel
			src_startofpacket   => cmd_mux_001_src_startofpacket,         --          .startofpacket
			src_endofpacket     => cmd_mux_001_src_endofpacket,           --          .endofpacket
			sink0_ready         => cmd_demux_src1_ready,                  --     sink0.ready
			sink0_valid         => cmd_demux_src1_valid,                  --          .valid
			sink0_channel       => cmd_demux_src1_channel,                --          .channel
			sink0_data          => cmd_demux_src1_data,                   --          .data
			sink0_startofpacket => cmd_demux_src1_startofpacket,          --          .startofpacket
			sink0_endofpacket   => cmd_demux_src1_endofpacket             --          .endofpacket
		);

	cmd_mux_002 : component CodecAudio_mm_interconnect_0_cmd_mux
		port map (
			clk                 => pll_0_outclk0_clk,                     --       clk.clk
			reset               => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_002_src_ready,                 --       src.ready
			src_valid           => cmd_mux_002_src_valid,                 --          .valid
			src_data            => cmd_mux_002_src_data,                  --          .data
			src_channel         => cmd_mux_002_src_channel,               --          .channel
			src_startofpacket   => cmd_mux_002_src_startofpacket,         --          .startofpacket
			src_endofpacket     => cmd_mux_002_src_endofpacket,           --          .endofpacket
			sink0_ready         => cmd_demux_src2_ready,                  --     sink0.ready
			sink0_valid         => cmd_demux_src2_valid,                  --          .valid
			sink0_channel       => cmd_demux_src2_channel,                --          .channel
			sink0_data          => cmd_demux_src2_data,                   --          .data
			sink0_startofpacket => cmd_demux_src2_startofpacket,          --          .startofpacket
			sink0_endofpacket   => cmd_demux_src2_endofpacket             --          .endofpacket
		);

	cmd_mux_003 : component CodecAudio_mm_interconnect_0_cmd_mux
		port map (
			clk                 => pll_0_outclk0_clk,                     --       clk.clk
			reset               => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_003_src_ready,                 --       src.ready
			src_valid           => cmd_mux_003_src_valid,                 --          .valid
			src_data            => cmd_mux_003_src_data,                  --          .data
			src_channel         => cmd_mux_003_src_channel,               --          .channel
			src_startofpacket   => cmd_mux_003_src_startofpacket,         --          .startofpacket
			src_endofpacket     => cmd_mux_003_src_endofpacket,           --          .endofpacket
			sink0_ready         => cmd_demux_src3_ready,                  --     sink0.ready
			sink0_valid         => cmd_demux_src3_valid,                  --          .valid
			sink0_channel       => cmd_demux_src3_channel,                --          .channel
			sink0_data          => cmd_demux_src3_data,                   --          .data
			sink0_startofpacket => cmd_demux_src3_startofpacket,          --          .startofpacket
			sink0_endofpacket   => cmd_demux_src3_endofpacket             --          .endofpacket
		);

	cmd_mux_004 : component CodecAudio_mm_interconnect_0_cmd_mux
		port map (
			clk                 => pll_0_outclk0_clk,                     --       clk.clk
			reset               => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_004_src_ready,                 --       src.ready
			src_valid           => cmd_mux_004_src_valid,                 --          .valid
			src_data            => cmd_mux_004_src_data,                  --          .data
			src_channel         => cmd_mux_004_src_channel,               --          .channel
			src_startofpacket   => cmd_mux_004_src_startofpacket,         --          .startofpacket
			src_endofpacket     => cmd_mux_004_src_endofpacket,           --          .endofpacket
			sink0_ready         => cmd_demux_src4_ready,                  --     sink0.ready
			sink0_valid         => cmd_demux_src4_valid,                  --          .valid
			sink0_channel       => cmd_demux_src4_channel,                --          .channel
			sink0_data          => cmd_demux_src4_data,                   --          .data
			sink0_startofpacket => cmd_demux_src4_startofpacket,          --          .startofpacket
			sink0_endofpacket   => cmd_demux_src4_endofpacket             --          .endofpacket
		);

	cmd_mux_005 : component CodecAudio_mm_interconnect_0_cmd_mux_005
		port map (
			clk                 => pll_0_outclk0_clk,                     --       clk.clk
			reset               => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_005_src_ready,                 --       src.ready
			src_valid           => cmd_mux_005_src_valid,                 --          .valid
			src_data            => cmd_mux_005_src_data,                  --          .data
			src_channel         => cmd_mux_005_src_channel,               --          .channel
			src_startofpacket   => cmd_mux_005_src_startofpacket,         --          .startofpacket
			src_endofpacket     => cmd_mux_005_src_endofpacket,           --          .endofpacket
			sink0_ready         => cmd_demux_src5_ready,                  --     sink0.ready
			sink0_valid         => cmd_demux_src5_valid,                  --          .valid
			sink0_channel       => cmd_demux_src5_channel,                --          .channel
			sink0_data          => cmd_demux_src5_data,                   --          .data
			sink0_startofpacket => cmd_demux_src5_startofpacket,          --          .startofpacket
			sink0_endofpacket   => cmd_demux_src5_endofpacket,            --          .endofpacket
			sink1_ready         => cmd_demux_001_src0_ready,              --     sink1.ready
			sink1_valid         => cmd_demux_001_src0_valid,              --          .valid
			sink1_channel       => cmd_demux_001_src0_channel,            --          .channel
			sink1_data          => cmd_demux_001_src0_data,               --          .data
			sink1_startofpacket => cmd_demux_001_src0_startofpacket,      --          .startofpacket
			sink1_endofpacket   => cmd_demux_001_src0_endofpacket         --          .endofpacket
		);

	cmd_mux_006 : component CodecAudio_mm_interconnect_0_cmd_mux_005
		port map (
			clk                 => pll_0_outclk0_clk,                     --       clk.clk
			reset               => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_006_src_ready,                 --       src.ready
			src_valid           => cmd_mux_006_src_valid,                 --          .valid
			src_data            => cmd_mux_006_src_data,                  --          .data
			src_channel         => cmd_mux_006_src_channel,               --          .channel
			src_startofpacket   => cmd_mux_006_src_startofpacket,         --          .startofpacket
			src_endofpacket     => cmd_mux_006_src_endofpacket,           --          .endofpacket
			sink0_ready         => cmd_demux_src6_ready,                  --     sink0.ready
			sink0_valid         => cmd_demux_src6_valid,                  --          .valid
			sink0_channel       => cmd_demux_src6_channel,                --          .channel
			sink0_data          => cmd_demux_src6_data,                   --          .data
			sink0_startofpacket => cmd_demux_src6_startofpacket,          --          .startofpacket
			sink0_endofpacket   => cmd_demux_src6_endofpacket,            --          .endofpacket
			sink1_ready         => cmd_demux_001_src1_ready,              --     sink1.ready
			sink1_valid         => cmd_demux_001_src1_valid,              --          .valid
			sink1_channel       => cmd_demux_001_src1_channel,            --          .channel
			sink1_data          => cmd_demux_001_src1_data,               --          .data
			sink1_startofpacket => cmd_demux_001_src1_startofpacket,      --          .startofpacket
			sink1_endofpacket   => cmd_demux_001_src1_endofpacket         --          .endofpacket
		);

	cmd_mux_007 : component CodecAudio_mm_interconnect_0_cmd_mux
		port map (
			clk                 => pll_0_outclk0_clk,                     --       clk.clk
			reset               => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_007_src_ready,                 --       src.ready
			src_valid           => cmd_mux_007_src_valid,                 --          .valid
			src_data            => cmd_mux_007_src_data,                  --          .data
			src_channel         => cmd_mux_007_src_channel,               --          .channel
			src_startofpacket   => cmd_mux_007_src_startofpacket,         --          .startofpacket
			src_endofpacket     => cmd_mux_007_src_endofpacket,           --          .endofpacket
			sink0_ready         => cmd_demux_src7_ready,                  --     sink0.ready
			sink0_valid         => cmd_demux_src7_valid,                  --          .valid
			sink0_channel       => cmd_demux_src7_channel,                --          .channel
			sink0_data          => cmd_demux_src7_data,                   --          .data
			sink0_startofpacket => cmd_demux_src7_startofpacket,          --          .startofpacket
			sink0_endofpacket   => cmd_demux_src7_endofpacket             --          .endofpacket
		);

	cmd_mux_008 : component CodecAudio_mm_interconnect_0_cmd_mux
		port map (
			clk                 => pll_0_outclk0_clk,                     --       clk.clk
			reset               => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_008_src_ready,                 --       src.ready
			src_valid           => cmd_mux_008_src_valid,                 --          .valid
			src_data            => cmd_mux_008_src_data,                  --          .data
			src_channel         => cmd_mux_008_src_channel,               --          .channel
			src_startofpacket   => cmd_mux_008_src_startofpacket,         --          .startofpacket
			src_endofpacket     => cmd_mux_008_src_endofpacket,           --          .endofpacket
			sink0_ready         => cmd_demux_src8_ready,                  --     sink0.ready
			sink0_valid         => cmd_demux_src8_valid,                  --          .valid
			sink0_channel       => cmd_demux_src8_channel,                --          .channel
			sink0_data          => cmd_demux_src8_data,                   --          .data
			sink0_startofpacket => cmd_demux_src8_startofpacket,          --          .startofpacket
			sink0_endofpacket   => cmd_demux_src8_endofpacket             --          .endofpacket
		);

	cmd_mux_009 : component CodecAudio_mm_interconnect_0_cmd_mux
		port map (
			clk                 => pll_0_outclk0_clk,                     --       clk.clk
			reset               => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_009_src_ready,                 --       src.ready
			src_valid           => cmd_mux_009_src_valid,                 --          .valid
			src_data            => cmd_mux_009_src_data,                  --          .data
			src_channel         => cmd_mux_009_src_channel,               --          .channel
			src_startofpacket   => cmd_mux_009_src_startofpacket,         --          .startofpacket
			src_endofpacket     => cmd_mux_009_src_endofpacket,           --          .endofpacket
			sink0_ready         => cmd_demux_src9_ready,                  --     sink0.ready
			sink0_valid         => cmd_demux_src9_valid,                  --          .valid
			sink0_channel       => cmd_demux_src9_channel,                --          .channel
			sink0_data          => cmd_demux_src9_data,                   --          .data
			sink0_startofpacket => cmd_demux_src9_startofpacket,          --          .startofpacket
			sink0_endofpacket   => cmd_demux_src9_endofpacket             --          .endofpacket
		);

	cmd_mux_010 : component CodecAudio_mm_interconnect_0_cmd_mux
		port map (
			clk                 => pll_0_outclk0_clk,                     --       clk.clk
			reset               => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_010_src_ready,                 --       src.ready
			src_valid           => cmd_mux_010_src_valid,                 --          .valid
			src_data            => cmd_mux_010_src_data,                  --          .data
			src_channel         => cmd_mux_010_src_channel,               --          .channel
			src_startofpacket   => cmd_mux_010_src_startofpacket,         --          .startofpacket
			src_endofpacket     => cmd_mux_010_src_endofpacket,           --          .endofpacket
			sink0_ready         => cmd_demux_src10_ready,                 --     sink0.ready
			sink0_valid         => cmd_demux_src10_valid,                 --          .valid
			sink0_channel       => cmd_demux_src10_channel,               --          .channel
			sink0_data          => cmd_demux_src10_data,                  --          .data
			sink0_startofpacket => cmd_demux_src10_startofpacket,         --          .startofpacket
			sink0_endofpacket   => cmd_demux_src10_endofpacket            --          .endofpacket
		);

	cmd_mux_011 : component CodecAudio_mm_interconnect_0_cmd_mux
		port map (
			clk                 => pll_0_outclk0_clk,                     --       clk.clk
			reset               => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_011_src_ready,                 --       src.ready
			src_valid           => cmd_mux_011_src_valid,                 --          .valid
			src_data            => cmd_mux_011_src_data,                  --          .data
			src_channel         => cmd_mux_011_src_channel,               --          .channel
			src_startofpacket   => cmd_mux_011_src_startofpacket,         --          .startofpacket
			src_endofpacket     => cmd_mux_011_src_endofpacket,           --          .endofpacket
			sink0_ready         => cmd_demux_src11_ready,                 --     sink0.ready
			sink0_valid         => cmd_demux_src11_valid,                 --          .valid
			sink0_channel       => cmd_demux_src11_channel,               --          .channel
			sink0_data          => cmd_demux_src11_data,                  --          .data
			sink0_startofpacket => cmd_demux_src11_startofpacket,         --          .startofpacket
			sink0_endofpacket   => cmd_demux_src11_endofpacket            --          .endofpacket
		);

	rsp_demux : component CodecAudio_mm_interconnect_0_rsp_demux
		port map (
			clk                => dac_pll_audio_clk_clk,                   --       clk.clk
			reset              => audio_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_002_src_ready,                    --      sink.ready
			sink_channel       => router_002_src_channel,                  --          .channel
			sink_data          => router_002_src_data,                     --          .data
			sink_startofpacket => router_002_src_startofpacket,            --          .startofpacket
			sink_endofpacket   => router_002_src_endofpacket,              --          .endofpacket
			sink_valid(0)      => router_002_src_valid,                    --          .valid
			src0_ready         => rsp_demux_src0_ready,                    --      src0.ready
			src0_valid         => rsp_demux_src0_valid,                    --          .valid
			src0_data          => rsp_demux_src0_data,                     --          .data
			src0_channel       => rsp_demux_src0_channel,                  --          .channel
			src0_startofpacket => rsp_demux_src0_startofpacket,            --          .startofpacket
			src0_endofpacket   => rsp_demux_src0_endofpacket               --          .endofpacket
		);

	rsp_demux_001 : component CodecAudio_mm_interconnect_0_rsp_demux_001
		port map (
			clk                => pll_0_outclk0_clk,                     --       clk.clk
			reset              => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_003_src_ready,                  --      sink.ready
			sink_channel       => router_003_src_channel,                --          .channel
			sink_data          => router_003_src_data,                   --          .data
			sink_startofpacket => router_003_src_startofpacket,          --          .startofpacket
			sink_endofpacket   => router_003_src_endofpacket,            --          .endofpacket
			sink_valid(0)      => router_003_src_valid,                  --          .valid
			src0_ready         => rsp_demux_001_src0_ready,              --      src0.ready
			src0_valid         => rsp_demux_001_src0_valid,              --          .valid
			src0_data          => rsp_demux_001_src0_data,               --          .data
			src0_channel       => rsp_demux_001_src0_channel,            --          .channel
			src0_startofpacket => rsp_demux_001_src0_startofpacket,      --          .startofpacket
			src0_endofpacket   => rsp_demux_001_src0_endofpacket         --          .endofpacket
		);

	rsp_demux_002 : component CodecAudio_mm_interconnect_0_rsp_demux_001
		port map (
			clk                => pll_0_outclk0_clk,                     --       clk.clk
			reset              => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_004_src_ready,                  --      sink.ready
			sink_channel       => router_004_src_channel,                --          .channel
			sink_data          => router_004_src_data,                   --          .data
			sink_startofpacket => router_004_src_startofpacket,          --          .startofpacket
			sink_endofpacket   => router_004_src_endofpacket,            --          .endofpacket
			sink_valid(0)      => router_004_src_valid,                  --          .valid
			src0_ready         => rsp_demux_002_src0_ready,              --      src0.ready
			src0_valid         => rsp_demux_002_src0_valid,              --          .valid
			src0_data          => rsp_demux_002_src0_data,               --          .data
			src0_channel       => rsp_demux_002_src0_channel,            --          .channel
			src0_startofpacket => rsp_demux_002_src0_startofpacket,      --          .startofpacket
			src0_endofpacket   => rsp_demux_002_src0_endofpacket         --          .endofpacket
		);

	rsp_demux_003 : component CodecAudio_mm_interconnect_0_rsp_demux_001
		port map (
			clk                => pll_0_outclk0_clk,                     --       clk.clk
			reset              => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_005_src_ready,                  --      sink.ready
			sink_channel       => router_005_src_channel,                --          .channel
			sink_data          => router_005_src_data,                   --          .data
			sink_startofpacket => router_005_src_startofpacket,          --          .startofpacket
			sink_endofpacket   => router_005_src_endofpacket,            --          .endofpacket
			sink_valid(0)      => router_005_src_valid,                  --          .valid
			src0_ready         => rsp_demux_003_src0_ready,              --      src0.ready
			src0_valid         => rsp_demux_003_src0_valid,              --          .valid
			src0_data          => rsp_demux_003_src0_data,               --          .data
			src0_channel       => rsp_demux_003_src0_channel,            --          .channel
			src0_startofpacket => rsp_demux_003_src0_startofpacket,      --          .startofpacket
			src0_endofpacket   => rsp_demux_003_src0_endofpacket         --          .endofpacket
		);

	rsp_demux_004 : component CodecAudio_mm_interconnect_0_rsp_demux_001
		port map (
			clk                => pll_0_outclk0_clk,                     --       clk.clk
			reset              => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_006_src_ready,                  --      sink.ready
			sink_channel       => router_006_src_channel,                --          .channel
			sink_data          => router_006_src_data,                   --          .data
			sink_startofpacket => router_006_src_startofpacket,          --          .startofpacket
			sink_endofpacket   => router_006_src_endofpacket,            --          .endofpacket
			sink_valid(0)      => router_006_src_valid,                  --          .valid
			src0_ready         => rsp_demux_004_src0_ready,              --      src0.ready
			src0_valid         => rsp_demux_004_src0_valid,              --          .valid
			src0_data          => rsp_demux_004_src0_data,               --          .data
			src0_channel       => rsp_demux_004_src0_channel,            --          .channel
			src0_startofpacket => rsp_demux_004_src0_startofpacket,      --          .startofpacket
			src0_endofpacket   => rsp_demux_004_src0_endofpacket         --          .endofpacket
		);

	rsp_demux_005 : component CodecAudio_mm_interconnect_0_cmd_demux_001
		port map (
			clk                => pll_0_outclk0_clk,                     --       clk.clk
			reset              => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_007_src_ready,                  --      sink.ready
			sink_channel       => router_007_src_channel,                --          .channel
			sink_data          => router_007_src_data,                   --          .data
			sink_startofpacket => router_007_src_startofpacket,          --          .startofpacket
			sink_endofpacket   => router_007_src_endofpacket,            --          .endofpacket
			sink_valid(0)      => router_007_src_valid,                  --          .valid
			src0_ready         => rsp_demux_005_src0_ready,              --      src0.ready
			src0_valid         => rsp_demux_005_src0_valid,              --          .valid
			src0_data          => rsp_demux_005_src0_data,               --          .data
			src0_channel       => rsp_demux_005_src0_channel,            --          .channel
			src0_startofpacket => rsp_demux_005_src0_startofpacket,      --          .startofpacket
			src0_endofpacket   => rsp_demux_005_src0_endofpacket,        --          .endofpacket
			src1_ready         => rsp_demux_005_src1_ready,              --      src1.ready
			src1_valid         => rsp_demux_005_src1_valid,              --          .valid
			src1_data          => rsp_demux_005_src1_data,               --          .data
			src1_channel       => rsp_demux_005_src1_channel,            --          .channel
			src1_startofpacket => rsp_demux_005_src1_startofpacket,      --          .startofpacket
			src1_endofpacket   => rsp_demux_005_src1_endofpacket         --          .endofpacket
		);

	rsp_demux_006 : component CodecAudio_mm_interconnect_0_cmd_demux_001
		port map (
			clk                => pll_0_outclk0_clk,                     --       clk.clk
			reset              => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_008_src_ready,                  --      sink.ready
			sink_channel       => router_008_src_channel,                --          .channel
			sink_data          => router_008_src_data,                   --          .data
			sink_startofpacket => router_008_src_startofpacket,          --          .startofpacket
			sink_endofpacket   => router_008_src_endofpacket,            --          .endofpacket
			sink_valid(0)      => router_008_src_valid,                  --          .valid
			src0_ready         => rsp_demux_006_src0_ready,              --      src0.ready
			src0_valid         => rsp_demux_006_src0_valid,              --          .valid
			src0_data          => rsp_demux_006_src0_data,               --          .data
			src0_channel       => rsp_demux_006_src0_channel,            --          .channel
			src0_startofpacket => rsp_demux_006_src0_startofpacket,      --          .startofpacket
			src0_endofpacket   => rsp_demux_006_src0_endofpacket,        --          .endofpacket
			src1_ready         => rsp_demux_006_src1_ready,              --      src1.ready
			src1_valid         => rsp_demux_006_src1_valid,              --          .valid
			src1_data          => rsp_demux_006_src1_data,               --          .data
			src1_channel       => rsp_demux_006_src1_channel,            --          .channel
			src1_startofpacket => rsp_demux_006_src1_startofpacket,      --          .startofpacket
			src1_endofpacket   => rsp_demux_006_src1_endofpacket         --          .endofpacket
		);

	rsp_demux_007 : component CodecAudio_mm_interconnect_0_rsp_demux_001
		port map (
			clk                => pll_0_outclk0_clk,                     --       clk.clk
			reset              => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_009_src_ready,                  --      sink.ready
			sink_channel       => router_009_src_channel,                --          .channel
			sink_data          => router_009_src_data,                   --          .data
			sink_startofpacket => router_009_src_startofpacket,          --          .startofpacket
			sink_endofpacket   => router_009_src_endofpacket,            --          .endofpacket
			sink_valid(0)      => router_009_src_valid,                  --          .valid
			src0_ready         => rsp_demux_007_src0_ready,              --      src0.ready
			src0_valid         => rsp_demux_007_src0_valid,              --          .valid
			src0_data          => rsp_demux_007_src0_data,               --          .data
			src0_channel       => rsp_demux_007_src0_channel,            --          .channel
			src0_startofpacket => rsp_demux_007_src0_startofpacket,      --          .startofpacket
			src0_endofpacket   => rsp_demux_007_src0_endofpacket         --          .endofpacket
		);

	rsp_demux_008 : component CodecAudio_mm_interconnect_0_rsp_demux_001
		port map (
			clk                => pll_0_outclk0_clk,                     --       clk.clk
			reset              => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_010_src_ready,                  --      sink.ready
			sink_channel       => router_010_src_channel,                --          .channel
			sink_data          => router_010_src_data,                   --          .data
			sink_startofpacket => router_010_src_startofpacket,          --          .startofpacket
			sink_endofpacket   => router_010_src_endofpacket,            --          .endofpacket
			sink_valid(0)      => router_010_src_valid,                  --          .valid
			src0_ready         => rsp_demux_008_src0_ready,              --      src0.ready
			src0_valid         => rsp_demux_008_src0_valid,              --          .valid
			src0_data          => rsp_demux_008_src0_data,               --          .data
			src0_channel       => rsp_demux_008_src0_channel,            --          .channel
			src0_startofpacket => rsp_demux_008_src0_startofpacket,      --          .startofpacket
			src0_endofpacket   => rsp_demux_008_src0_endofpacket         --          .endofpacket
		);

	rsp_demux_009 : component CodecAudio_mm_interconnect_0_rsp_demux_001
		port map (
			clk                => pll_0_outclk0_clk,                     --       clk.clk
			reset              => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_011_src_ready,                  --      sink.ready
			sink_channel       => router_011_src_channel,                --          .channel
			sink_data          => router_011_src_data,                   --          .data
			sink_startofpacket => router_011_src_startofpacket,          --          .startofpacket
			sink_endofpacket   => router_011_src_endofpacket,            --          .endofpacket
			sink_valid(0)      => router_011_src_valid,                  --          .valid
			src0_ready         => rsp_demux_009_src0_ready,              --      src0.ready
			src0_valid         => rsp_demux_009_src0_valid,              --          .valid
			src0_data          => rsp_demux_009_src0_data,               --          .data
			src0_channel       => rsp_demux_009_src0_channel,            --          .channel
			src0_startofpacket => rsp_demux_009_src0_startofpacket,      --          .startofpacket
			src0_endofpacket   => rsp_demux_009_src0_endofpacket         --          .endofpacket
		);

	rsp_demux_010 : component CodecAudio_mm_interconnect_0_rsp_demux_001
		port map (
			clk                => pll_0_outclk0_clk,                     --       clk.clk
			reset              => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_012_src_ready,                  --      sink.ready
			sink_channel       => router_012_src_channel,                --          .channel
			sink_data          => router_012_src_data,                   --          .data
			sink_startofpacket => router_012_src_startofpacket,          --          .startofpacket
			sink_endofpacket   => router_012_src_endofpacket,            --          .endofpacket
			sink_valid(0)      => router_012_src_valid,                  --          .valid
			src0_ready         => rsp_demux_010_src0_ready,              --      src0.ready
			src0_valid         => rsp_demux_010_src0_valid,              --          .valid
			src0_data          => rsp_demux_010_src0_data,               --          .data
			src0_channel       => rsp_demux_010_src0_channel,            --          .channel
			src0_startofpacket => rsp_demux_010_src0_startofpacket,      --          .startofpacket
			src0_endofpacket   => rsp_demux_010_src0_endofpacket         --          .endofpacket
		);

	rsp_demux_011 : component CodecAudio_mm_interconnect_0_rsp_demux_001
		port map (
			clk                => pll_0_outclk0_clk,                     --       clk.clk
			reset              => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_013_src_ready,                  --      sink.ready
			sink_channel       => router_013_src_channel,                --          .channel
			sink_data          => router_013_src_data,                   --          .data
			sink_startofpacket => router_013_src_startofpacket,          --          .startofpacket
			sink_endofpacket   => router_013_src_endofpacket,            --          .endofpacket
			sink_valid(0)      => router_013_src_valid,                  --          .valid
			src0_ready         => rsp_demux_011_src0_ready,              --      src0.ready
			src0_valid         => rsp_demux_011_src0_valid,              --          .valid
			src0_data          => rsp_demux_011_src0_data,               --          .data
			src0_channel       => rsp_demux_011_src0_channel,            --          .channel
			src0_startofpacket => rsp_demux_011_src0_startofpacket,      --          .startofpacket
			src0_endofpacket   => rsp_demux_011_src0_endofpacket         --          .endofpacket
		);

	rsp_mux : component CodecAudio_mm_interconnect_0_rsp_mux
		port map (
			clk                  => pll_0_outclk0_clk,                     --       clk.clk
			reset                => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready            => rsp_mux_src_ready,                     --       src.ready
			src_valid            => rsp_mux_src_valid,                     --          .valid
			src_data             => rsp_mux_src_data,                      --          .data
			src_channel          => rsp_mux_src_channel,                   --          .channel
			src_startofpacket    => rsp_mux_src_startofpacket,             --          .startofpacket
			src_endofpacket      => rsp_mux_src_endofpacket,               --          .endofpacket
			sink0_ready          => crosser_001_out_ready,                 --     sink0.ready
			sink0_valid          => crosser_001_out_valid,                 --          .valid
			sink0_channel        => crosser_001_out_channel,               --          .channel
			sink0_data           => crosser_001_out_data,                  --          .data
			sink0_startofpacket  => crosser_001_out_startofpacket,         --          .startofpacket
			sink0_endofpacket    => crosser_001_out_endofpacket,           --          .endofpacket
			sink1_ready          => rsp_demux_001_src0_ready,              --     sink1.ready
			sink1_valid          => rsp_demux_001_src0_valid,              --          .valid
			sink1_channel        => rsp_demux_001_src0_channel,            --          .channel
			sink1_data           => rsp_demux_001_src0_data,               --          .data
			sink1_startofpacket  => rsp_demux_001_src0_startofpacket,      --          .startofpacket
			sink1_endofpacket    => rsp_demux_001_src0_endofpacket,        --          .endofpacket
			sink2_ready          => rsp_demux_002_src0_ready,              --     sink2.ready
			sink2_valid          => rsp_demux_002_src0_valid,              --          .valid
			sink2_channel        => rsp_demux_002_src0_channel,            --          .channel
			sink2_data           => rsp_demux_002_src0_data,               --          .data
			sink2_startofpacket  => rsp_demux_002_src0_startofpacket,      --          .startofpacket
			sink2_endofpacket    => rsp_demux_002_src0_endofpacket,        --          .endofpacket
			sink3_ready          => rsp_demux_003_src0_ready,              --     sink3.ready
			sink3_valid          => rsp_demux_003_src0_valid,              --          .valid
			sink3_channel        => rsp_demux_003_src0_channel,            --          .channel
			sink3_data           => rsp_demux_003_src0_data,               --          .data
			sink3_startofpacket  => rsp_demux_003_src0_startofpacket,      --          .startofpacket
			sink3_endofpacket    => rsp_demux_003_src0_endofpacket,        --          .endofpacket
			sink4_ready          => rsp_demux_004_src0_ready,              --     sink4.ready
			sink4_valid          => rsp_demux_004_src0_valid,              --          .valid
			sink4_channel        => rsp_demux_004_src0_channel,            --          .channel
			sink4_data           => rsp_demux_004_src0_data,               --          .data
			sink4_startofpacket  => rsp_demux_004_src0_startofpacket,      --          .startofpacket
			sink4_endofpacket    => rsp_demux_004_src0_endofpacket,        --          .endofpacket
			sink5_ready          => rsp_demux_005_src0_ready,              --     sink5.ready
			sink5_valid          => rsp_demux_005_src0_valid,              --          .valid
			sink5_channel        => rsp_demux_005_src0_channel,            --          .channel
			sink5_data           => rsp_demux_005_src0_data,               --          .data
			sink5_startofpacket  => rsp_demux_005_src0_startofpacket,      --          .startofpacket
			sink5_endofpacket    => rsp_demux_005_src0_endofpacket,        --          .endofpacket
			sink6_ready          => rsp_demux_006_src0_ready,              --     sink6.ready
			sink6_valid          => rsp_demux_006_src0_valid,              --          .valid
			sink6_channel        => rsp_demux_006_src0_channel,            --          .channel
			sink6_data           => rsp_demux_006_src0_data,               --          .data
			sink6_startofpacket  => rsp_demux_006_src0_startofpacket,      --          .startofpacket
			sink6_endofpacket    => rsp_demux_006_src0_endofpacket,        --          .endofpacket
			sink7_ready          => rsp_demux_007_src0_ready,              --     sink7.ready
			sink7_valid          => rsp_demux_007_src0_valid,              --          .valid
			sink7_channel        => rsp_demux_007_src0_channel,            --          .channel
			sink7_data           => rsp_demux_007_src0_data,               --          .data
			sink7_startofpacket  => rsp_demux_007_src0_startofpacket,      --          .startofpacket
			sink7_endofpacket    => rsp_demux_007_src0_endofpacket,        --          .endofpacket
			sink8_ready          => rsp_demux_008_src0_ready,              --     sink8.ready
			sink8_valid          => rsp_demux_008_src0_valid,              --          .valid
			sink8_channel        => rsp_demux_008_src0_channel,            --          .channel
			sink8_data           => rsp_demux_008_src0_data,               --          .data
			sink8_startofpacket  => rsp_demux_008_src0_startofpacket,      --          .startofpacket
			sink8_endofpacket    => rsp_demux_008_src0_endofpacket,        --          .endofpacket
			sink9_ready          => rsp_demux_009_src0_ready,              --     sink9.ready
			sink9_valid          => rsp_demux_009_src0_valid,              --          .valid
			sink9_channel        => rsp_demux_009_src0_channel,            --          .channel
			sink9_data           => rsp_demux_009_src0_data,               --          .data
			sink9_startofpacket  => rsp_demux_009_src0_startofpacket,      --          .startofpacket
			sink9_endofpacket    => rsp_demux_009_src0_endofpacket,        --          .endofpacket
			sink10_ready         => rsp_demux_010_src0_ready,              --    sink10.ready
			sink10_valid         => rsp_demux_010_src0_valid,              --          .valid
			sink10_channel       => rsp_demux_010_src0_channel,            --          .channel
			sink10_data          => rsp_demux_010_src0_data,               --          .data
			sink10_startofpacket => rsp_demux_010_src0_startofpacket,      --          .startofpacket
			sink10_endofpacket   => rsp_demux_010_src0_endofpacket,        --          .endofpacket
			sink11_ready         => rsp_demux_011_src0_ready,              --    sink11.ready
			sink11_valid         => rsp_demux_011_src0_valid,              --          .valid
			sink11_channel       => rsp_demux_011_src0_channel,            --          .channel
			sink11_data          => rsp_demux_011_src0_data,               --          .data
			sink11_startofpacket => rsp_demux_011_src0_startofpacket,      --          .startofpacket
			sink11_endofpacket   => rsp_demux_011_src0_endofpacket         --          .endofpacket
		);

	rsp_mux_001 : component CodecAudio_mm_interconnect_0_rsp_mux_001
		port map (
			clk                 => pll_0_outclk0_clk,                     --       clk.clk
			reset               => cpu_reset_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => rsp_mux_001_src_ready,                 --       src.ready
			src_valid           => rsp_mux_001_src_valid,                 --          .valid
			src_data            => rsp_mux_001_src_data,                  --          .data
			src_channel         => rsp_mux_001_src_channel,               --          .channel
			src_startofpacket   => rsp_mux_001_src_startofpacket,         --          .startofpacket
			src_endofpacket     => rsp_mux_001_src_endofpacket,           --          .endofpacket
			sink0_ready         => rsp_demux_005_src1_ready,              --     sink0.ready
			sink0_valid         => rsp_demux_005_src1_valid,              --          .valid
			sink0_channel       => rsp_demux_005_src1_channel,            --          .channel
			sink0_data          => rsp_demux_005_src1_data,               --          .data
			sink0_startofpacket => rsp_demux_005_src1_startofpacket,      --          .startofpacket
			sink0_endofpacket   => rsp_demux_005_src1_endofpacket,        --          .endofpacket
			sink1_ready         => rsp_demux_006_src1_ready,              --     sink1.ready
			sink1_valid         => rsp_demux_006_src1_valid,              --          .valid
			sink1_channel       => rsp_demux_006_src1_channel,            --          .channel
			sink1_data          => rsp_demux_006_src1_data,               --          .data
			sink1_startofpacket => rsp_demux_006_src1_startofpacket,      --          .startofpacket
			sink1_endofpacket   => rsp_demux_006_src1_endofpacket         --          .endofpacket
		);

	crosser : component altera_avalon_st_handshake_clock_crosser
		generic map (
			DATA_WIDTH          => 98,
			BITS_PER_SYMBOL     => 98,
			USE_PACKETS         => 1,
			USE_CHANNEL         => 1,
			CHANNEL_WIDTH       => 12,
			USE_ERROR           => 0,
			ERROR_WIDTH         => 1,
			VALID_SYNC_DEPTH    => 2,
			READY_SYNC_DEPTH    => 2,
			USE_OUTPUT_PIPELINE => 0
		)
		port map (
			in_clk            => pll_0_outclk0_clk,                       --        in_clk.clk
			in_reset          => cpu_reset_reset_bridge_in_reset_reset,   --  in_clk_reset.reset
			out_clk           => dac_pll_audio_clk_clk,                   --       out_clk.clk
			out_reset         => audio_reset_reset_bridge_in_reset_reset, -- out_clk_reset.reset
			in_ready          => cmd_demux_src0_ready,                    --            in.ready
			in_valid          => cmd_demux_src0_valid,                    --              .valid
			in_startofpacket  => cmd_demux_src0_startofpacket,            --              .startofpacket
			in_endofpacket    => cmd_demux_src0_endofpacket,              --              .endofpacket
			in_channel        => cmd_demux_src0_channel,                  --              .channel
			in_data           => cmd_demux_src0_data,                     --              .data
			out_ready         => crosser_out_ready,                       --           out.ready
			out_valid         => crosser_out_valid,                       --              .valid
			out_startofpacket => crosser_out_startofpacket,               --              .startofpacket
			out_endofpacket   => crosser_out_endofpacket,                 --              .endofpacket
			out_channel       => crosser_out_channel,                     --              .channel
			out_data          => crosser_out_data,                        --              .data
			in_empty          => "0",                                     --   (terminated)
			in_error          => "0",                                     --   (terminated)
			out_empty         => open,                                    --   (terminated)
			out_error         => open                                     --   (terminated)
		);

	crosser_001 : component altera_avalon_st_handshake_clock_crosser
		generic map (
			DATA_WIDTH          => 98,
			BITS_PER_SYMBOL     => 98,
			USE_PACKETS         => 1,
			USE_CHANNEL         => 1,
			CHANNEL_WIDTH       => 12,
			USE_ERROR           => 0,
			ERROR_WIDTH         => 1,
			VALID_SYNC_DEPTH    => 2,
			READY_SYNC_DEPTH    => 2,
			USE_OUTPUT_PIPELINE => 0
		)
		port map (
			in_clk            => dac_pll_audio_clk_clk,                   --        in_clk.clk
			in_reset          => audio_reset_reset_bridge_in_reset_reset, --  in_clk_reset.reset
			out_clk           => pll_0_outclk0_clk,                       --       out_clk.clk
			out_reset         => cpu_reset_reset_bridge_in_reset_reset,   -- out_clk_reset.reset
			in_ready          => rsp_demux_src0_ready,                    --            in.ready
			in_valid          => rsp_demux_src0_valid,                    --              .valid
			in_startofpacket  => rsp_demux_src0_startofpacket,            --              .startofpacket
			in_endofpacket    => rsp_demux_src0_endofpacket,              --              .endofpacket
			in_channel        => rsp_demux_src0_channel,                  --              .channel
			in_data           => rsp_demux_src0_data,                     --              .data
			out_ready         => crosser_001_out_ready,                   --           out.ready
			out_valid         => crosser_001_out_valid,                   --              .valid
			out_startofpacket => crosser_001_out_startofpacket,           --              .startofpacket
			out_endofpacket   => crosser_001_out_endofpacket,             --              .endofpacket
			out_channel       => crosser_001_out_channel,                 --              .channel
			out_data          => crosser_001_out_data,                    --              .data
			in_empty          => "0",                                     --   (terminated)
			in_error          => "0",                                     --   (terminated)
			out_empty         => open,                                    --   (terminated)
			out_error         => open                                     --   (terminated)
		);

	avalon_st_adapter : component CodecAudio_mm_interconnect_0_avalon_st_adapter
		generic map (
			inBitsPerSymbol => 34,
			inUsePackets    => 0,
			inDataWidth     => 34,
			inChannelWidth  => 0,
			inErrorWidth    => 0,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 1,
			inReadyLatency  => 0,
			outDataWidth    => 34,
			outChannelWidth => 0,
			outErrorWidth   => 1,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 1,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk   => dac_pll_audio_clk_clk,                               -- in_clk_0.clk
			in_rst_0_reset => audio_reset_reset_bridge_in_reset_reset,             -- in_rst_0.reset
			in_0_data      => audio_avalon_audio_slave_agent_rdata_fifo_out_data,  --     in_0.data
			in_0_valid     => audio_avalon_audio_slave_agent_rdata_fifo_out_valid, --         .valid
			in_0_ready     => audio_avalon_audio_slave_agent_rdata_fifo_out_ready, --         .ready
			out_0_data     => avalon_st_adapter_out_0_data,                        --    out_0.data
			out_0_valid    => avalon_st_adapter_out_0_valid,                       --         .valid
			out_0_ready    => avalon_st_adapter_out_0_ready,                       --         .ready
			out_0_error    => avalon_st_adapter_out_0_error                        --         .error
		);

	avalon_st_adapter_001 : component CodecAudio_mm_interconnect_0_avalon_st_adapter
		generic map (
			inBitsPerSymbol => 34,
			inUsePackets    => 0,
			inDataWidth     => 34,
			inChannelWidth  => 0,
			inErrorWidth    => 0,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 1,
			inReadyLatency  => 0,
			outDataWidth    => 34,
			outChannelWidth => 0,
			outErrorWidth   => 1,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 1,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk   => pll_0_outclk0_clk,                                                        -- in_clk_0.clk
			in_rst_0_reset => cpu_reset_reset_bridge_in_reset_reset,                                    -- in_rst_0.reset
			in_0_data      => audio_and_video_config_avalon_av_config_slave_agent_rdata_fifo_src_data,  --     in_0.data
			in_0_valid     => audio_and_video_config_avalon_av_config_slave_agent_rdata_fifo_src_valid, --         .valid
			in_0_ready     => audio_and_video_config_avalon_av_config_slave_agent_rdata_fifo_src_ready, --         .ready
			out_0_data     => avalon_st_adapter_001_out_0_data,                                         --    out_0.data
			out_0_valid    => avalon_st_adapter_001_out_0_valid,                                        --         .valid
			out_0_ready    => avalon_st_adapter_001_out_0_ready,                                        --         .ready
			out_0_error    => avalon_st_adapter_001_out_0_error                                         --         .error
		);

	avalon_st_adapter_002 : component CodecAudio_mm_interconnect_0_avalon_st_adapter
		generic map (
			inBitsPerSymbol => 34,
			inUsePackets    => 0,
			inDataWidth     => 34,
			inChannelWidth  => 0,
			inErrorWidth    => 0,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 1,
			inReadyLatency  => 0,
			outDataWidth    => 34,
			outChannelWidth => 0,
			outErrorWidth   => 1,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 1,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk   => pll_0_outclk0_clk,                                        -- in_clk_0.clk
			in_rst_0_reset => cpu_reset_reset_bridge_in_reset_reset,                    -- in_rst_0.reset
			in_0_data      => jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data,  --     in_0.data
			in_0_valid     => jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid, --         .valid
			in_0_ready     => jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready, --         .ready
			out_0_data     => avalon_st_adapter_002_out_0_data,                         --    out_0.data
			out_0_valid    => avalon_st_adapter_002_out_0_valid,                        --         .valid
			out_0_ready    => avalon_st_adapter_002_out_0_ready,                        --         .ready
			out_0_error    => avalon_st_adapter_002_out_0_error                         --         .error
		);

	avalon_st_adapter_003 : component CodecAudio_mm_interconnect_0_avalon_st_adapter
		generic map (
			inBitsPerSymbol => 34,
			inUsePackets    => 0,
			inDataWidth     => 34,
			inChannelWidth  => 0,
			inErrorWidth    => 0,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 1,
			inReadyLatency  => 0,
			outDataWidth    => 34,
			outChannelWidth => 0,
			outErrorWidth   => 1,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 1,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk   => pll_0_outclk0_clk,                               -- in_clk_0.clk
			in_rst_0_reset => cpu_reset_reset_bridge_in_reset_reset,           -- in_rst_0.reset
			in_0_data      => ps2_avalon_ps2_slave_agent_rdata_fifo_src_data,  --     in_0.data
			in_0_valid     => ps2_avalon_ps2_slave_agent_rdata_fifo_src_valid, --         .valid
			in_0_ready     => ps2_avalon_ps2_slave_agent_rdata_fifo_src_ready, --         .ready
			out_0_data     => avalon_st_adapter_003_out_0_data,                --    out_0.data
			out_0_valid    => avalon_st_adapter_003_out_0_valid,               --         .valid
			out_0_ready    => avalon_st_adapter_003_out_0_ready,               --         .ready
			out_0_error    => avalon_st_adapter_003_out_0_error                --         .error
		);

	avalon_st_adapter_004 : component CodecAudio_mm_interconnect_0_avalon_st_adapter
		generic map (
			inBitsPerSymbol => 34,
			inUsePackets    => 0,
			inDataWidth     => 34,
			inChannelWidth  => 0,
			inErrorWidth    => 0,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 1,
			inReadyLatency  => 0,
			outDataWidth    => 34,
			outChannelWidth => 0,
			outErrorWidth   => 1,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 1,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk   => pll_0_outclk0_clk,                              -- in_clk_0.clk
			in_rst_0_reset => cpu_reset_reset_bridge_in_reset_reset,          -- in_rst_0.reset
			in_0_data      => sysid_control_slave_agent_rdata_fifo_src_data,  --     in_0.data
			in_0_valid     => sysid_control_slave_agent_rdata_fifo_src_valid, --         .valid
			in_0_ready     => sysid_control_slave_agent_rdata_fifo_src_ready, --         .ready
			out_0_data     => avalon_st_adapter_004_out_0_data,               --    out_0.data
			out_0_valid    => avalon_st_adapter_004_out_0_valid,              --         .valid
			out_0_ready    => avalon_st_adapter_004_out_0_ready,              --         .ready
			out_0_error    => avalon_st_adapter_004_out_0_error               --         .error
		);

	avalon_st_adapter_005 : component CodecAudio_mm_interconnect_0_avalon_st_adapter
		generic map (
			inBitsPerSymbol => 34,
			inUsePackets    => 0,
			inDataWidth     => 34,
			inChannelWidth  => 0,
			inErrorWidth    => 0,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 1,
			inReadyLatency  => 0,
			outDataWidth    => 34,
			outChannelWidth => 0,
			outErrorWidth   => 1,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 1,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk   => pll_0_outclk0_clk,                              -- in_clk_0.clk
			in_rst_0_reset => cpu_reset_reset_bridge_in_reset_reset,          -- in_rst_0.reset
			in_0_data      => cpu_debug_mem_slave_agent_rdata_fifo_src_data,  --     in_0.data
			in_0_valid     => cpu_debug_mem_slave_agent_rdata_fifo_src_valid, --         .valid
			in_0_ready     => cpu_debug_mem_slave_agent_rdata_fifo_src_ready, --         .ready
			out_0_data     => avalon_st_adapter_005_out_0_data,               --    out_0.data
			out_0_valid    => avalon_st_adapter_005_out_0_valid,              --         .valid
			out_0_ready    => avalon_st_adapter_005_out_0_ready,              --         .ready
			out_0_error    => avalon_st_adapter_005_out_0_error               --         .error
		);

	avalon_st_adapter_006 : component CodecAudio_mm_interconnect_0_avalon_st_adapter
		generic map (
			inBitsPerSymbol => 34,
			inUsePackets    => 0,
			inDataWidth     => 34,
			inChannelWidth  => 0,
			inErrorWidth    => 0,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 1,
			inReadyLatency  => 0,
			outDataWidth    => 34,
			outChannelWidth => 0,
			outErrorWidth   => 1,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 1,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk   => pll_0_outclk0_clk,                       -- in_clk_0.clk
			in_rst_0_reset => cpu_reset_reset_bridge_in_reset_reset,   -- in_rst_0.reset
			in_0_data      => onchipmem_s1_agent_rdata_fifo_src_data,  --     in_0.data
			in_0_valid     => onchipmem_s1_agent_rdata_fifo_src_valid, --         .valid
			in_0_ready     => onchipmem_s1_agent_rdata_fifo_src_ready, --         .ready
			out_0_data     => avalon_st_adapter_006_out_0_data,        --    out_0.data
			out_0_valid    => avalon_st_adapter_006_out_0_valid,       --         .valid
			out_0_ready    => avalon_st_adapter_006_out_0_ready,       --         .ready
			out_0_error    => avalon_st_adapter_006_out_0_error        --         .error
		);

	avalon_st_adapter_007 : component CodecAudio_mm_interconnect_0_avalon_st_adapter
		generic map (
			inBitsPerSymbol => 34,
			inUsePackets    => 0,
			inDataWidth     => 34,
			inChannelWidth  => 0,
			inErrorWidth    => 0,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 1,
			inReadyLatency  => 0,
			outDataWidth    => 34,
			outChannelWidth => 0,
			outErrorWidth   => 1,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 1,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk   => pll_0_outclk0_clk,                     -- in_clk_0.clk
			in_rst_0_reset => cpu_reset_reset_bridge_in_reset_reset, -- in_rst_0.reset
			in_0_data      => timer0_s1_agent_rdata_fifo_src_data,   --     in_0.data
			in_0_valid     => timer0_s1_agent_rdata_fifo_src_valid,  --         .valid
			in_0_ready     => timer0_s1_agent_rdata_fifo_src_ready,  --         .ready
			out_0_data     => avalon_st_adapter_007_out_0_data,      --    out_0.data
			out_0_valid    => avalon_st_adapter_007_out_0_valid,     --         .valid
			out_0_ready    => avalon_st_adapter_007_out_0_ready,     --         .ready
			out_0_error    => avalon_st_adapter_007_out_0_error      --         .error
		);

	avalon_st_adapter_008 : component CodecAudio_mm_interconnect_0_avalon_st_adapter
		generic map (
			inBitsPerSymbol => 34,
			inUsePackets    => 0,
			inDataWidth     => 34,
			inChannelWidth  => 0,
			inErrorWidth    => 0,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 1,
			inReadyLatency  => 0,
			outDataWidth    => 34,
			outChannelWidth => 0,
			outErrorWidth   => 1,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 1,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk   => pll_0_outclk0_clk,                     -- in_clk_0.clk
			in_rst_0_reset => cpu_reset_reset_bridge_in_reset_reset, -- in_rst_0.reset
			in_0_data      => timer1_s1_agent_rdata_fifo_src_data,   --     in_0.data
			in_0_valid     => timer1_s1_agent_rdata_fifo_src_valid,  --         .valid
			in_0_ready     => timer1_s1_agent_rdata_fifo_src_ready,  --         .ready
			out_0_data     => avalon_st_adapter_008_out_0_data,      --    out_0.data
			out_0_valid    => avalon_st_adapter_008_out_0_valid,     --         .valid
			out_0_ready    => avalon_st_adapter_008_out_0_ready,     --         .ready
			out_0_error    => avalon_st_adapter_008_out_0_error      --         .error
		);

	avalon_st_adapter_009 : component CodecAudio_mm_interconnect_0_avalon_st_adapter
		generic map (
			inBitsPerSymbol => 34,
			inUsePackets    => 0,
			inDataWidth     => 34,
			inChannelWidth  => 0,
			inErrorWidth    => 0,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 1,
			inReadyLatency  => 0,
			outDataWidth    => 34,
			outChannelWidth => 0,
			outErrorWidth   => 1,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 1,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk   => pll_0_outclk0_clk,                          -- in_clk_0.clk
			in_rst_0_reset => cpu_reset_reset_bridge_in_reset_reset,      -- in_rst_0.reset
			in_0_data      => toggleaccmat_s1_agent_rdata_fifo_src_data,  --     in_0.data
			in_0_valid     => toggleaccmat_s1_agent_rdata_fifo_src_valid, --         .valid
			in_0_ready     => toggleaccmat_s1_agent_rdata_fifo_src_ready, --         .ready
			out_0_data     => avalon_st_adapter_009_out_0_data,           --    out_0.data
			out_0_valid    => avalon_st_adapter_009_out_0_valid,          --         .valid
			out_0_ready    => avalon_st_adapter_009_out_0_ready,          --         .ready
			out_0_error    => avalon_st_adapter_009_out_0_error           --         .error
		);

	avalon_st_adapter_010 : component CodecAudio_mm_interconnect_0_avalon_st_adapter
		generic map (
			inBitsPerSymbol => 34,
			inUsePackets    => 0,
			inDataWidth     => 34,
			inChannelWidth  => 0,
			inErrorWidth    => 0,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 1,
			inReadyLatency  => 0,
			outDataWidth    => 34,
			outChannelWidth => 0,
			outErrorWidth   => 1,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 1,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk   => pll_0_outclk0_clk,                          -- in_clk_0.clk
			in_rst_0_reset => cpu_reset_reset_bridge_in_reset_reset,      -- in_rst_0.reset
			in_0_data      => datatoaccmat_s1_agent_rdata_fifo_src_data,  --     in_0.data
			in_0_valid     => datatoaccmat_s1_agent_rdata_fifo_src_valid, --         .valid
			in_0_ready     => datatoaccmat_s1_agent_rdata_fifo_src_ready, --         .ready
			out_0_data     => avalon_st_adapter_010_out_0_data,           --    out_0.data
			out_0_valid    => avalon_st_adapter_010_out_0_valid,          --         .valid
			out_0_ready    => avalon_st_adapter_010_out_0_ready,          --         .ready
			out_0_error    => avalon_st_adapter_010_out_0_error           --         .error
		);

	avalon_st_adapter_011 : component CodecAudio_mm_interconnect_0_avalon_st_adapter
		generic map (
			inBitsPerSymbol => 34,
			inUsePackets    => 0,
			inDataWidth     => 34,
			inChannelWidth  => 0,
			inErrorWidth    => 0,
			inUseEmptyPort  => 0,
			inUseValid      => 1,
			inUseReady      => 1,
			inReadyLatency  => 0,
			outDataWidth    => 34,
			outChannelWidth => 0,
			outErrorWidth   => 1,
			outUseEmptyPort => 0,
			outUseValid     => 1,
			outUseReady     => 1,
			outReadyLatency => 0
		)
		port map (
			in_clk_0_clk   => pll_0_outclk0_clk,                            -- in_clk_0.clk
			in_rst_0_reset => cpu_reset_reset_bridge_in_reset_reset,        -- in_rst_0.reset
			in_0_data      => datafromaccmat_s1_agent_rdata_fifo_src_data,  --     in_0.data
			in_0_valid     => datafromaccmat_s1_agent_rdata_fifo_src_valid, --         .valid
			in_0_ready     => datafromaccmat_s1_agent_rdata_fifo_src_ready, --         .ready
			out_0_data     => avalon_st_adapter_011_out_0_data,             --    out_0.data
			out_0_valid    => avalon_st_adapter_011_out_0_valid,            --         .valid
			out_0_ready    => avalon_st_adapter_011_out_0_ready,            --         .ready
			out_0_error    => avalon_st_adapter_011_out_0_error             --         .error
		);

end architecture rtl; -- of CodecAudio_mm_interconnect_0
